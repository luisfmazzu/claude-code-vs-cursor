
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Employee
 * 
 */
export type Employee = $Result.DefaultSelection<Prisma.$EmployeePayload>
/**
 * Model AbsenceType
 * 
 */
export type AbsenceType = $Result.DefaultSelection<Prisma.$AbsenceTypePayload>
/**
 * Model AbsenceRecord
 * 
 */
export type AbsenceRecord = $Result.DefaultSelection<Prisma.$AbsenceRecordPayload>
/**
 * Model EmailIntegration
 * 
 */
export type EmailIntegration = $Result.DefaultSelection<Prisma.$EmailIntegrationPayload>
/**
 * Model AIProcessingLog
 * 
 */
export type AIProcessingLog = $Result.DefaultSelection<Prisma.$AIProcessingLogPayload>
/**
 * Model Subscription
 * 
 */
export type Subscription = $Result.DefaultSelection<Prisma.$SubscriptionPayload>
/**
 * Model UsageMetrics
 * 
 */
export type UsageMetrics = $Result.DefaultSelection<Prisma.$UsageMetricsPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Companies
 * const companies = await prisma.company.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Companies
   * const companies = await prisma.company.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<ExtArgs>;

  /**
   * `prisma.absenceType`: Exposes CRUD operations for the **AbsenceType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AbsenceTypes
    * const absenceTypes = await prisma.absenceType.findMany()
    * ```
    */
  get absenceType(): Prisma.AbsenceTypeDelegate<ExtArgs>;

  /**
   * `prisma.absenceRecord`: Exposes CRUD operations for the **AbsenceRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AbsenceRecords
    * const absenceRecords = await prisma.absenceRecord.findMany()
    * ```
    */
  get absenceRecord(): Prisma.AbsenceRecordDelegate<ExtArgs>;

  /**
   * `prisma.emailIntegration`: Exposes CRUD operations for the **EmailIntegration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailIntegrations
    * const emailIntegrations = await prisma.emailIntegration.findMany()
    * ```
    */
  get emailIntegration(): Prisma.EmailIntegrationDelegate<ExtArgs>;

  /**
   * `prisma.aIProcessingLog`: Exposes CRUD operations for the **AIProcessingLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AIProcessingLogs
    * const aIProcessingLogs = await prisma.aIProcessingLog.findMany()
    * ```
    */
  get aIProcessingLog(): Prisma.AIProcessingLogDelegate<ExtArgs>;

  /**
   * `prisma.subscription`: Exposes CRUD operations for the **Subscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subscriptions
    * const subscriptions = await prisma.subscription.findMany()
    * ```
    */
  get subscription(): Prisma.SubscriptionDelegate<ExtArgs>;

  /**
   * `prisma.usageMetrics`: Exposes CRUD operations for the **UsageMetrics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsageMetrics
    * const usageMetrics = await prisma.usageMetrics.findMany()
    * ```
    */
  get usageMetrics(): Prisma.UsageMetricsDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.7.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Company: 'Company',
    User: 'User',
    Employee: 'Employee',
    AbsenceType: 'AbsenceType',
    AbsenceRecord: 'AbsenceRecord',
    EmailIntegration: 'EmailIntegration',
    AIProcessingLog: 'AIProcessingLog',
    Subscription: 'Subscription',
    UsageMetrics: 'UsageMetrics',
    AuditLog: 'AuditLog',
    Notification: 'Notification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'company' | 'user' | 'employee' | 'absenceType' | 'absenceRecord' | 'emailIntegration' | 'aIProcessingLog' | 'subscription' | 'usageMetrics' | 'auditLog' | 'notification'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>,
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Employee: {
        payload: Prisma.$EmployeePayload<ExtArgs>
        fields: Prisma.EmployeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findFirst: {
            args: Prisma.EmployeeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findMany: {
            args: Prisma.EmployeeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          create: {
            args: Prisma.EmployeeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          createMany: {
            args: Prisma.EmployeeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EmployeeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          update: {
            args: Prisma.EmployeeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          deleteMany: {
            args: Prisma.EmployeeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EmployeeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          aggregate: {
            args: Prisma.EmployeeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEmployee>
          }
          groupBy: {
            args: Prisma.EmployeeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeCountArgs<ExtArgs>,
            result: $Utils.Optional<EmployeeCountAggregateOutputType> | number
          }
        }
      }
      AbsenceType: {
        payload: Prisma.$AbsenceTypePayload<ExtArgs>
        fields: Prisma.AbsenceTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AbsenceTypeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AbsenceTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AbsenceTypeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AbsenceTypePayload>
          }
          findFirst: {
            args: Prisma.AbsenceTypeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AbsenceTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AbsenceTypeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AbsenceTypePayload>
          }
          findMany: {
            args: Prisma.AbsenceTypeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AbsenceTypePayload>[]
          }
          create: {
            args: Prisma.AbsenceTypeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AbsenceTypePayload>
          }
          createMany: {
            args: Prisma.AbsenceTypeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AbsenceTypeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AbsenceTypePayload>
          }
          update: {
            args: Prisma.AbsenceTypeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AbsenceTypePayload>
          }
          deleteMany: {
            args: Prisma.AbsenceTypeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AbsenceTypeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AbsenceTypeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AbsenceTypePayload>
          }
          aggregate: {
            args: Prisma.AbsenceTypeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAbsenceType>
          }
          groupBy: {
            args: Prisma.AbsenceTypeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AbsenceTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.AbsenceTypeCountArgs<ExtArgs>,
            result: $Utils.Optional<AbsenceTypeCountAggregateOutputType> | number
          }
        }
      }
      AbsenceRecord: {
        payload: Prisma.$AbsenceRecordPayload<ExtArgs>
        fields: Prisma.AbsenceRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AbsenceRecordFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AbsenceRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AbsenceRecordFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AbsenceRecordPayload>
          }
          findFirst: {
            args: Prisma.AbsenceRecordFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AbsenceRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AbsenceRecordFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AbsenceRecordPayload>
          }
          findMany: {
            args: Prisma.AbsenceRecordFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AbsenceRecordPayload>[]
          }
          create: {
            args: Prisma.AbsenceRecordCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AbsenceRecordPayload>
          }
          createMany: {
            args: Prisma.AbsenceRecordCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AbsenceRecordDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AbsenceRecordPayload>
          }
          update: {
            args: Prisma.AbsenceRecordUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AbsenceRecordPayload>
          }
          deleteMany: {
            args: Prisma.AbsenceRecordDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AbsenceRecordUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AbsenceRecordUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AbsenceRecordPayload>
          }
          aggregate: {
            args: Prisma.AbsenceRecordAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAbsenceRecord>
          }
          groupBy: {
            args: Prisma.AbsenceRecordGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AbsenceRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.AbsenceRecordCountArgs<ExtArgs>,
            result: $Utils.Optional<AbsenceRecordCountAggregateOutputType> | number
          }
        }
      }
      EmailIntegration: {
        payload: Prisma.$EmailIntegrationPayload<ExtArgs>
        fields: Prisma.EmailIntegrationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailIntegrationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailIntegrationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailIntegrationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailIntegrationPayload>
          }
          findFirst: {
            args: Prisma.EmailIntegrationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailIntegrationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailIntegrationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailIntegrationPayload>
          }
          findMany: {
            args: Prisma.EmailIntegrationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailIntegrationPayload>[]
          }
          create: {
            args: Prisma.EmailIntegrationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailIntegrationPayload>
          }
          createMany: {
            args: Prisma.EmailIntegrationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EmailIntegrationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailIntegrationPayload>
          }
          update: {
            args: Prisma.EmailIntegrationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailIntegrationPayload>
          }
          deleteMany: {
            args: Prisma.EmailIntegrationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EmailIntegrationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EmailIntegrationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailIntegrationPayload>
          }
          aggregate: {
            args: Prisma.EmailIntegrationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEmailIntegration>
          }
          groupBy: {
            args: Prisma.EmailIntegrationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EmailIntegrationGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailIntegrationCountArgs<ExtArgs>,
            result: $Utils.Optional<EmailIntegrationCountAggregateOutputType> | number
          }
        }
      }
      AIProcessingLog: {
        payload: Prisma.$AIProcessingLogPayload<ExtArgs>
        fields: Prisma.AIProcessingLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AIProcessingLogFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AIProcessingLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AIProcessingLogFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AIProcessingLogPayload>
          }
          findFirst: {
            args: Prisma.AIProcessingLogFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AIProcessingLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AIProcessingLogFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AIProcessingLogPayload>
          }
          findMany: {
            args: Prisma.AIProcessingLogFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AIProcessingLogPayload>[]
          }
          create: {
            args: Prisma.AIProcessingLogCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AIProcessingLogPayload>
          }
          createMany: {
            args: Prisma.AIProcessingLogCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AIProcessingLogDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AIProcessingLogPayload>
          }
          update: {
            args: Prisma.AIProcessingLogUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AIProcessingLogPayload>
          }
          deleteMany: {
            args: Prisma.AIProcessingLogDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AIProcessingLogUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AIProcessingLogUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AIProcessingLogPayload>
          }
          aggregate: {
            args: Prisma.AIProcessingLogAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAIProcessingLog>
          }
          groupBy: {
            args: Prisma.AIProcessingLogGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AIProcessingLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AIProcessingLogCountArgs<ExtArgs>,
            result: $Utils.Optional<AIProcessingLogCountAggregateOutputType> | number
          }
        }
      }
      Subscription: {
        payload: Prisma.$SubscriptionPayload<ExtArgs>
        fields: Prisma.SubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findMany: {
            args: Prisma.SubscriptionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          create: {
            args: Prisma.SubscriptionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          createMany: {
            args: Prisma.SubscriptionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SubscriptionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          update: {
            args: Prisma.SubscriptionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SubscriptionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubscription>
          }
          groupBy: {
            args: Prisma.SubscriptionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionCountArgs<ExtArgs>,
            result: $Utils.Optional<SubscriptionCountAggregateOutputType> | number
          }
        }
      }
      UsageMetrics: {
        payload: Prisma.$UsageMetricsPayload<ExtArgs>
        fields: Prisma.UsageMetricsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsageMetricsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsageMetricsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsageMetricsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsageMetricsPayload>
          }
          findFirst: {
            args: Prisma.UsageMetricsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsageMetricsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsageMetricsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsageMetricsPayload>
          }
          findMany: {
            args: Prisma.UsageMetricsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsageMetricsPayload>[]
          }
          create: {
            args: Prisma.UsageMetricsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsageMetricsPayload>
          }
          createMany: {
            args: Prisma.UsageMetricsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsageMetricsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsageMetricsPayload>
          }
          update: {
            args: Prisma.UsageMetricsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsageMetricsPayload>
          }
          deleteMany: {
            args: Prisma.UsageMetricsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsageMetricsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsageMetricsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsageMetricsPayload>
          }
          aggregate: {
            args: Prisma.UsageMetricsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsageMetrics>
          }
          groupBy: {
            args: Prisma.UsageMetricsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsageMetricsGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsageMetricsCountArgs<ExtArgs>,
            result: $Utils.Optional<UsageMetricsCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>,
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    users: number
    employees: number
    absenceTypes: number
    absenceRecords: number
    emailIntegrations: number
    aiProcessingLogs: number
    subscriptions: number
    usageMetrics: number
    auditLogs: number
    notifications: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | CompanyCountOutputTypeCountUsersArgs
    employees?: boolean | CompanyCountOutputTypeCountEmployeesArgs
    absenceTypes?: boolean | CompanyCountOutputTypeCountAbsenceTypesArgs
    absenceRecords?: boolean | CompanyCountOutputTypeCountAbsenceRecordsArgs
    emailIntegrations?: boolean | CompanyCountOutputTypeCountEmailIntegrationsArgs
    aiProcessingLogs?: boolean | CompanyCountOutputTypeCountAiProcessingLogsArgs
    subscriptions?: boolean | CompanyCountOutputTypeCountSubscriptionsArgs
    usageMetrics?: boolean | CompanyCountOutputTypeCountUsageMetricsArgs
    auditLogs?: boolean | CompanyCountOutputTypeCountAuditLogsArgs
    notifications?: boolean | CompanyCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }


  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountAbsenceTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AbsenceTypeWhereInput
  }


  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountAbsenceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AbsenceRecordWhereInput
  }


  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountEmailIntegrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailIntegrationWhereInput
  }


  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountAiProcessingLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AIProcessingLogWhereInput
  }


  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }


  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountUsageMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsageMetricsWhereInput
  }


  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }



  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdAbsenceRecords: number
    approvedAbsenceRecords: number
    notifications: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdAbsenceRecords?: boolean | UserCountOutputTypeCountCreatedAbsenceRecordsArgs
    approvedAbsenceRecords?: boolean | UserCountOutputTypeCountApprovedAbsenceRecordsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedAbsenceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AbsenceRecordWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApprovedAbsenceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AbsenceRecordWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }



  /**
   * Count Type EmployeeCountOutputType
   */

  export type EmployeeCountOutputType = {
    subordinates: number
    absenceRecords: number
  }

  export type EmployeeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subordinates?: boolean | EmployeeCountOutputTypeCountSubordinatesArgs
    absenceRecords?: boolean | EmployeeCountOutputTypeCountAbsenceRecordsArgs
  }

  // Custom InputTypes

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCountOutputType
     */
    select?: EmployeeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountSubordinatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }


  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountAbsenceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AbsenceRecordWhereInput
  }



  /**
   * Count Type AbsenceTypeCountOutputType
   */

  export type AbsenceTypeCountOutputType = {
    absenceRecords: number
  }

  export type AbsenceTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    absenceRecords?: boolean | AbsenceTypeCountOutputTypeCountAbsenceRecordsArgs
  }

  // Custom InputTypes

  /**
   * AbsenceTypeCountOutputType without action
   */
  export type AbsenceTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceTypeCountOutputType
     */
    select?: AbsenceTypeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AbsenceTypeCountOutputType without action
   */
  export type AbsenceTypeCountOutputTypeCountAbsenceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AbsenceRecordWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    industry: string | null
    sizeRange: string | null
    emailDomain: string | null
    logoUrl: string | null
    timezone: string | null
    subscriptionStatus: string | null
    subscriptionTier: string | null
    stripeCustomerId: string | null
    trialEndsAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    industry: string | null
    sizeRange: string | null
    emailDomain: string | null
    logoUrl: string | null
    timezone: string | null
    subscriptionStatus: string | null
    subscriptionTier: string | null
    stripeCustomerId: string | null
    trialEndsAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    industry: number
    sizeRange: number
    emailDomain: number
    logoUrl: number
    timezone: number
    subscriptionStatus: number
    subscriptionTier: number
    stripeCustomerId: number
    trialEndsAt: number
    settings: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompanyMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    industry?: true
    sizeRange?: true
    emailDomain?: true
    logoUrl?: true
    timezone?: true
    subscriptionStatus?: true
    subscriptionTier?: true
    stripeCustomerId?: true
    trialEndsAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    industry?: true
    sizeRange?: true
    emailDomain?: true
    logoUrl?: true
    timezone?: true
    subscriptionStatus?: true
    subscriptionTier?: true
    stripeCustomerId?: true
    trialEndsAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    industry?: true
    sizeRange?: true
    emailDomain?: true
    logoUrl?: true
    timezone?: true
    subscriptionStatus?: true
    subscriptionTier?: true
    stripeCustomerId?: true
    trialEndsAt?: true
    settings?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: string
    name: string
    slug: string
    industry: string | null
    sizeRange: string | null
    emailDomain: string | null
    logoUrl: string | null
    timezone: string
    subscriptionStatus: string
    subscriptionTier: string | null
    stripeCustomerId: string | null
    trialEndsAt: Date | null
    settings: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    industry?: boolean
    sizeRange?: boolean
    emailDomain?: boolean
    logoUrl?: boolean
    timezone?: boolean
    subscriptionStatus?: boolean
    subscriptionTier?: boolean
    stripeCustomerId?: boolean
    trialEndsAt?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Company$usersArgs<ExtArgs>
    employees?: boolean | Company$employeesArgs<ExtArgs>
    absenceTypes?: boolean | Company$absenceTypesArgs<ExtArgs>
    absenceRecords?: boolean | Company$absenceRecordsArgs<ExtArgs>
    emailIntegrations?: boolean | Company$emailIntegrationsArgs<ExtArgs>
    aiProcessingLogs?: boolean | Company$aiProcessingLogsArgs<ExtArgs>
    subscriptions?: boolean | Company$subscriptionsArgs<ExtArgs>
    usageMetrics?: boolean | Company$usageMetricsArgs<ExtArgs>
    auditLogs?: boolean | Company$auditLogsArgs<ExtArgs>
    notifications?: boolean | Company$notificationsArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    industry?: boolean
    sizeRange?: boolean
    emailDomain?: boolean
    logoUrl?: boolean
    timezone?: boolean
    subscriptionStatus?: boolean
    subscriptionTier?: boolean
    stripeCustomerId?: boolean
    trialEndsAt?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Company$usersArgs<ExtArgs>
    employees?: boolean | Company$employeesArgs<ExtArgs>
    absenceTypes?: boolean | Company$absenceTypesArgs<ExtArgs>
    absenceRecords?: boolean | Company$absenceRecordsArgs<ExtArgs>
    emailIntegrations?: boolean | Company$emailIntegrationsArgs<ExtArgs>
    aiProcessingLogs?: boolean | Company$aiProcessingLogsArgs<ExtArgs>
    subscriptions?: boolean | Company$subscriptionsArgs<ExtArgs>
    usageMetrics?: boolean | Company$usageMetricsArgs<ExtArgs>
    auditLogs?: boolean | Company$auditLogsArgs<ExtArgs>
    notifications?: boolean | Company$notificationsArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      employees: Prisma.$EmployeePayload<ExtArgs>[]
      absenceTypes: Prisma.$AbsenceTypePayload<ExtArgs>[]
      absenceRecords: Prisma.$AbsenceRecordPayload<ExtArgs>[]
      emailIntegrations: Prisma.$EmailIntegrationPayload<ExtArgs>[]
      aiProcessingLogs: Prisma.$AIProcessingLogPayload<ExtArgs>[]
      subscriptions: Prisma.$SubscriptionPayload<ExtArgs>[]
      usageMetrics: Prisma.$UsageMetricsPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      industry: string | null
      sizeRange: string | null
      emailDomain: string | null
      logoUrl: string | null
      timezone: string
      subscriptionStatus: string
      subscriptionTier: string | null
      stripeCustomerId: string | null
      trialEndsAt: Date | null
      settings: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["company"]>
    composites: {}
  }


  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompanyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Company that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompanyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompanyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
    **/
    create<T extends CompanyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Companies.
     *     @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     *     @example
     *     // Create many Companies
     *     const company = await prisma.company.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompanyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
    **/
    delete<T extends CompanyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompanyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompanyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompanyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
    **/
    upsert<T extends CompanyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends Company$usersArgs<ExtArgs> = {}>(args?: Subset<T, Company$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    employees<T extends Company$employeesArgs<ExtArgs> = {}>(args?: Subset<T, Company$employeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findMany'> | Null>;

    absenceTypes<T extends Company$absenceTypesArgs<ExtArgs> = {}>(args?: Subset<T, Company$absenceTypesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AbsenceTypePayload<ExtArgs>, T, 'findMany'> | Null>;

    absenceRecords<T extends Company$absenceRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Company$absenceRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AbsenceRecordPayload<ExtArgs>, T, 'findMany'> | Null>;

    emailIntegrations<T extends Company$emailIntegrationsArgs<ExtArgs> = {}>(args?: Subset<T, Company$emailIntegrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailIntegrationPayload<ExtArgs>, T, 'findMany'> | Null>;

    aiProcessingLogs<T extends Company$aiProcessingLogsArgs<ExtArgs> = {}>(args?: Subset<T, Company$aiProcessingLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIProcessingLogPayload<ExtArgs>, T, 'findMany'> | Null>;

    subscriptions<T extends Company$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, Company$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'findMany'> | Null>;

    usageMetrics<T extends Company$usageMetricsArgs<ExtArgs> = {}>(args?: Subset<T, Company$usageMetricsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageMetricsPayload<ExtArgs>, T, 'findMany'> | Null>;

    auditLogs<T extends Company$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, Company$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, 'findMany'> | Null>;

    notifications<T extends Company$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Company$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Company model
   */ 
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'String'>
    readonly name: FieldRef<"Company", 'String'>
    readonly slug: FieldRef<"Company", 'String'>
    readonly industry: FieldRef<"Company", 'String'>
    readonly sizeRange: FieldRef<"Company", 'String'>
    readonly emailDomain: FieldRef<"Company", 'String'>
    readonly logoUrl: FieldRef<"Company", 'String'>
    readonly timezone: FieldRef<"Company", 'String'>
    readonly subscriptionStatus: FieldRef<"Company", 'String'>
    readonly subscriptionTier: FieldRef<"Company", 'String'>
    readonly stripeCustomerId: FieldRef<"Company", 'String'>
    readonly trialEndsAt: FieldRef<"Company", 'DateTime'>
    readonly settings: FieldRef<"Company", 'Json'>
    readonly createdAt: FieldRef<"Company", 'DateTime'>
    readonly updatedAt: FieldRef<"Company", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }


  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }


  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }


  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }


  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
  }


  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }


  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
  }


  /**
   * Company.users
   */
  export type Company$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * Company.employees
   */
  export type Company$employeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }


  /**
   * Company.absenceTypes
   */
  export type Company$absenceTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceType
     */
    select?: AbsenceTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceTypeInclude<ExtArgs> | null
    where?: AbsenceTypeWhereInput
    orderBy?: AbsenceTypeOrderByWithRelationInput | AbsenceTypeOrderByWithRelationInput[]
    cursor?: AbsenceTypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AbsenceTypeScalarFieldEnum | AbsenceTypeScalarFieldEnum[]
  }


  /**
   * Company.absenceRecords
   */
  export type Company$absenceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceRecord
     */
    select?: AbsenceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceRecordInclude<ExtArgs> | null
    where?: AbsenceRecordWhereInput
    orderBy?: AbsenceRecordOrderByWithRelationInput | AbsenceRecordOrderByWithRelationInput[]
    cursor?: AbsenceRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AbsenceRecordScalarFieldEnum | AbsenceRecordScalarFieldEnum[]
  }


  /**
   * Company.emailIntegrations
   */
  export type Company$emailIntegrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailIntegration
     */
    select?: EmailIntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailIntegrationInclude<ExtArgs> | null
    where?: EmailIntegrationWhereInput
    orderBy?: EmailIntegrationOrderByWithRelationInput | EmailIntegrationOrderByWithRelationInput[]
    cursor?: EmailIntegrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailIntegrationScalarFieldEnum | EmailIntegrationScalarFieldEnum[]
  }


  /**
   * Company.aiProcessingLogs
   */
  export type Company$aiProcessingLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProcessingLog
     */
    select?: AIProcessingLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProcessingLogInclude<ExtArgs> | null
    where?: AIProcessingLogWhereInput
    orderBy?: AIProcessingLogOrderByWithRelationInput | AIProcessingLogOrderByWithRelationInput[]
    cursor?: AIProcessingLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AIProcessingLogScalarFieldEnum | AIProcessingLogScalarFieldEnum[]
  }


  /**
   * Company.subscriptions
   */
  export type Company$subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }


  /**
   * Company.usageMetrics
   */
  export type Company$usageMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageMetrics
     */
    select?: UsageMetricsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsageMetricsInclude<ExtArgs> | null
    where?: UsageMetricsWhereInput
    orderBy?: UsageMetricsOrderByWithRelationInput | UsageMetricsOrderByWithRelationInput[]
    cursor?: UsageMetricsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsageMetricsScalarFieldEnum | UsageMetricsScalarFieldEnum[]
  }


  /**
   * Company.auditLogs
   */
  export type Company$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }


  /**
   * Company.notifications
   */
  export type Company$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
  }



  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    role: string | null
    phone: string | null
    passwordHash: string | null
    avatarUrl: string | null
    isActive: boolean | null
    emailVerified: boolean | null
    emailVerificationToken: string | null
    passwordResetToken: string | null
    passwordResetExpires: Date | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    role: string | null
    phone: string | null
    passwordHash: string | null
    avatarUrl: string | null
    isActive: boolean | null
    emailVerified: boolean | null
    emailVerificationToken: string | null
    passwordResetToken: string | null
    passwordResetExpires: Date | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    companyId: number
    email: number
    firstName: number
    lastName: number
    role: number
    phone: number
    passwordHash: number
    avatarUrl: number
    isActive: number
    emailVerified: number
    emailVerificationToken: number
    passwordResetToken: number
    passwordResetExpires: number
    lastLogin: number
    preferences: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    companyId?: true
    email?: true
    firstName?: true
    lastName?: true
    role?: true
    phone?: true
    passwordHash?: true
    avatarUrl?: true
    isActive?: true
    emailVerified?: true
    emailVerificationToken?: true
    passwordResetToken?: true
    passwordResetExpires?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    companyId?: true
    email?: true
    firstName?: true
    lastName?: true
    role?: true
    phone?: true
    passwordHash?: true
    avatarUrl?: true
    isActive?: true
    emailVerified?: true
    emailVerificationToken?: true
    passwordResetToken?: true
    passwordResetExpires?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    companyId?: true
    email?: true
    firstName?: true
    lastName?: true
    role?: true
    phone?: true
    passwordHash?: true
    avatarUrl?: true
    isActive?: true
    emailVerified?: true
    emailVerificationToken?: true
    passwordResetToken?: true
    passwordResetExpires?: true
    lastLogin?: true
    preferences?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    companyId: string
    email: string
    firstName: string
    lastName: string
    role: string
    phone: string | null
    passwordHash: string
    avatarUrl: string | null
    isActive: boolean
    emailVerified: boolean
    emailVerificationToken: string | null
    passwordResetToken: string | null
    passwordResetExpires: Date | null
    lastLogin: Date | null
    preferences: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    phone?: boolean
    passwordHash?: boolean
    avatarUrl?: boolean
    isActive?: boolean
    emailVerified?: boolean
    emailVerificationToken?: boolean
    passwordResetToken?: boolean
    passwordResetExpires?: boolean
    lastLogin?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    createdAbsenceRecords?: boolean | User$createdAbsenceRecordsArgs<ExtArgs>
    approvedAbsenceRecords?: boolean | User$approvedAbsenceRecordsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    companyId?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    phone?: boolean
    passwordHash?: boolean
    avatarUrl?: boolean
    isActive?: boolean
    emailVerified?: boolean
    emailVerificationToken?: boolean
    passwordResetToken?: boolean
    passwordResetExpires?: boolean
    lastLogin?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    createdAbsenceRecords?: boolean | User$createdAbsenceRecordsArgs<ExtArgs>
    approvedAbsenceRecords?: boolean | User$approvedAbsenceRecordsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      createdAbsenceRecords: Prisma.$AbsenceRecordPayload<ExtArgs>[]
      approvedAbsenceRecords: Prisma.$AbsenceRecordPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      email: string
      firstName: string
      lastName: string
      role: string
      phone: string | null
      passwordHash: string
      avatarUrl: string | null
      isActive: boolean
      emailVerified: boolean
      emailVerificationToken: string | null
      passwordResetToken: string | null
      passwordResetExpires: Date | null
      lastLogin: Date | null
      preferences: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    createdAbsenceRecords<T extends User$createdAbsenceRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdAbsenceRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AbsenceRecordPayload<ExtArgs>, T, 'findMany'> | Null>;

    approvedAbsenceRecords<T extends User$approvedAbsenceRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$approvedAbsenceRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AbsenceRecordPayload<ExtArgs>, T, 'findMany'> | Null>;

    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly companyId: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly emailVerificationToken: FieldRef<"User", 'String'>
    readonly passwordResetToken: FieldRef<"User", 'String'>
    readonly passwordResetExpires: FieldRef<"User", 'DateTime'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly preferences: FieldRef<"User", 'Json'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.createdAbsenceRecords
   */
  export type User$createdAbsenceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceRecord
     */
    select?: AbsenceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceRecordInclude<ExtArgs> | null
    where?: AbsenceRecordWhereInput
    orderBy?: AbsenceRecordOrderByWithRelationInput | AbsenceRecordOrderByWithRelationInput[]
    cursor?: AbsenceRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AbsenceRecordScalarFieldEnum | AbsenceRecordScalarFieldEnum[]
  }


  /**
   * User.approvedAbsenceRecords
   */
  export type User$approvedAbsenceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceRecord
     */
    select?: AbsenceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceRecordInclude<ExtArgs> | null
    where?: AbsenceRecordWhereInput
    orderBy?: AbsenceRecordOrderByWithRelationInput | AbsenceRecordOrderByWithRelationInput[]
    cursor?: AbsenceRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AbsenceRecordScalarFieldEnum | AbsenceRecordScalarFieldEnum[]
  }


  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Employee
   */

  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeAvgAggregateOutputType = {
    salaryAmount: Decimal | null
  }

  export type EmployeeSumAggregateOutputType = {
    salaryAmount: Decimal | null
  }

  export type EmployeeMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    employeeId: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    department: string | null
    position: string | null
    hireDate: Date | null
    terminationDate: Date | null
    status: string | null
    managerId: string | null
    employmentType: string | null
    workLocation: string | null
    salaryCurrency: string | null
    salaryAmount: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmployeeMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    employeeId: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    department: string | null
    position: string | null
    hireDate: Date | null
    terminationDate: Date | null
    status: string | null
    managerId: string | null
    employmentType: string | null
    workLocation: string | null
    salaryCurrency: string | null
    salaryAmount: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    companyId: number
    employeeId: number
    email: number
    firstName: number
    lastName: number
    department: number
    position: number
    hireDate: number
    terminationDate: number
    status: number
    managerId: number
    employmentType: number
    workLocation: number
    salaryCurrency: number
    salaryAmount: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmployeeAvgAggregateInputType = {
    salaryAmount?: true
  }

  export type EmployeeSumAggregateInputType = {
    salaryAmount?: true
  }

  export type EmployeeMinAggregateInputType = {
    id?: true
    companyId?: true
    employeeId?: true
    email?: true
    firstName?: true
    lastName?: true
    department?: true
    position?: true
    hireDate?: true
    terminationDate?: true
    status?: true
    managerId?: true
    employmentType?: true
    workLocation?: true
    salaryCurrency?: true
    salaryAmount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    companyId?: true
    employeeId?: true
    email?: true
    firstName?: true
    lastName?: true
    department?: true
    position?: true
    hireDate?: true
    terminationDate?: true
    status?: true
    managerId?: true
    employmentType?: true
    workLocation?: true
    salaryCurrency?: true
    salaryAmount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    companyId?: true
    employeeId?: true
    email?: true
    firstName?: true
    lastName?: true
    department?: true
    position?: true
    hireDate?: true
    terminationDate?: true
    status?: true
    managerId?: true
    employmentType?: true
    workLocation?: true
    salaryCurrency?: true
    salaryAmount?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employee to aggregate.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type EmployeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithAggregationInput | EmployeeOrderByWithAggregationInput[]
    by: EmployeeScalarFieldEnum[] | EmployeeScalarFieldEnum
    having?: EmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _avg?: EmployeeAvgAggregateInputType
    _sum?: EmployeeSumAggregateInputType
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }

  export type EmployeeGroupByOutputType = {
    id: string
    companyId: string
    employeeId: string | null
    email: string | null
    firstName: string
    lastName: string
    department: string | null
    position: string | null
    hireDate: Date | null
    terminationDate: Date | null
    status: string
    managerId: string | null
    employmentType: string | null
    workLocation: string | null
    salaryCurrency: string
    salaryAmount: Decimal | null
    metadata: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    employeeId?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    department?: boolean
    position?: boolean
    hireDate?: boolean
    terminationDate?: boolean
    status?: boolean
    managerId?: boolean
    employmentType?: boolean
    workLocation?: boolean
    salaryCurrency?: boolean
    salaryAmount?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    manager?: boolean | Employee$managerArgs<ExtArgs>
    subordinates?: boolean | Employee$subordinatesArgs<ExtArgs>
    absenceRecords?: boolean | Employee$absenceRecordsArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectScalar = {
    id?: boolean
    companyId?: boolean
    employeeId?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    department?: boolean
    position?: boolean
    hireDate?: boolean
    terminationDate?: boolean
    status?: boolean
    managerId?: boolean
    employmentType?: boolean
    workLocation?: boolean
    salaryCurrency?: boolean
    salaryAmount?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmployeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    manager?: boolean | Employee$managerArgs<ExtArgs>
    subordinates?: boolean | Employee$subordinatesArgs<ExtArgs>
    absenceRecords?: boolean | Employee$absenceRecordsArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EmployeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employee"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      manager: Prisma.$EmployeePayload<ExtArgs> | null
      subordinates: Prisma.$EmployeePayload<ExtArgs>[]
      absenceRecords: Prisma.$AbsenceRecordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      employeeId: string | null
      email: string | null
      firstName: string
      lastName: string
      department: string | null
      position: string | null
      hireDate: Date | null
      terminationDate: Date | null
      status: string
      managerId: string | null
      employmentType: string | null
      workLocation: string | null
      salaryCurrency: string
      salaryAmount: Prisma.Decimal | null
      metadata: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["employee"]>
    composites: {}
  }


  type EmployeeGetPayload<S extends boolean | null | undefined | EmployeeDefaultArgs> = $Result.GetResult<Prisma.$EmployeePayload, S>

  type EmployeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmployeeFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: EmployeeCountAggregateInputType | true
    }

  export interface EmployeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employee'], meta: { name: 'Employee' } }
    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmployeeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EmployeeFindUniqueArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Employee that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EmployeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EmployeeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmployeeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmployeeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EmployeeFindFirstArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Employee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EmployeeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmployeeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EmployeeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmployeeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
    **/
    create<T extends EmployeeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EmployeeCreateArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Employees.
     *     @param {EmployeeCreateManyArgs} args - Arguments to create many Employees.
     *     @example
     *     // Create many Employees
     *     const employee = await prisma.employee.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EmployeeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmployeeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
    **/
    delete<T extends EmployeeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EmployeeDeleteArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmployeeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EmployeeUpdateArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmployeeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmployeeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmployeeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EmployeeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
    **/
    upsert<T extends EmployeeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EmployeeUpsertArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employee model
   */
  readonly fields: EmployeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    manager<T extends Employee$managerArgs<ExtArgs> = {}>(args?: Subset<T, Employee$managerArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    subordinates<T extends Employee$subordinatesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$subordinatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findMany'> | Null>;

    absenceRecords<T extends Employee$absenceRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$absenceRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AbsenceRecordPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Employee model
   */ 
  interface EmployeeFieldRefs {
    readonly id: FieldRef<"Employee", 'String'>
    readonly companyId: FieldRef<"Employee", 'String'>
    readonly employeeId: FieldRef<"Employee", 'String'>
    readonly email: FieldRef<"Employee", 'String'>
    readonly firstName: FieldRef<"Employee", 'String'>
    readonly lastName: FieldRef<"Employee", 'String'>
    readonly department: FieldRef<"Employee", 'String'>
    readonly position: FieldRef<"Employee", 'String'>
    readonly hireDate: FieldRef<"Employee", 'DateTime'>
    readonly terminationDate: FieldRef<"Employee", 'DateTime'>
    readonly status: FieldRef<"Employee", 'String'>
    readonly managerId: FieldRef<"Employee", 'String'>
    readonly employmentType: FieldRef<"Employee", 'String'>
    readonly workLocation: FieldRef<"Employee", 'String'>
    readonly salaryCurrency: FieldRef<"Employee", 'String'>
    readonly salaryAmount: FieldRef<"Employee", 'Decimal'>
    readonly metadata: FieldRef<"Employee", 'Json'>
    readonly createdAt: FieldRef<"Employee", 'DateTime'>
    readonly updatedAt: FieldRef<"Employee", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Employee findUnique
   */
  export type EmployeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }


  /**
   * Employee findUniqueOrThrow
   */
  export type EmployeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }


  /**
   * Employee findFirst
   */
  export type EmployeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }


  /**
   * Employee findFirstOrThrow
   */
  export type EmployeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }


  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }


  /**
   * Employee create
   */
  export type EmployeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to create a Employee.
     */
    data: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
  }


  /**
   * Employee createMany
   */
  export type EmployeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Employee update
   */
  export type EmployeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to update a Employee.
     */
    data: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
    /**
     * Choose, which Employee to update.
     */
    where: EmployeeWhereUniqueInput
  }


  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
  }


  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The filter to search for the Employee to update in case it exists.
     */
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
     */
    create: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
  }


  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter which Employee to delete.
     */
    where: EmployeeWhereUniqueInput
  }


  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employees to delete
     */
    where?: EmployeeWhereInput
  }


  /**
   * Employee.manager
   */
  export type Employee$managerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
  }


  /**
   * Employee.subordinates
   */
  export type Employee$subordinatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }


  /**
   * Employee.absenceRecords
   */
  export type Employee$absenceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceRecord
     */
    select?: AbsenceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceRecordInclude<ExtArgs> | null
    where?: AbsenceRecordWhereInput
    orderBy?: AbsenceRecordOrderByWithRelationInput | AbsenceRecordOrderByWithRelationInput[]
    cursor?: AbsenceRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AbsenceRecordScalarFieldEnum | AbsenceRecordScalarFieldEnum[]
  }


  /**
   * Employee without action
   */
  export type EmployeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
  }



  /**
   * Model AbsenceType
   */

  export type AggregateAbsenceType = {
    _count: AbsenceTypeCountAggregateOutputType | null
    _avg: AbsenceTypeAvgAggregateOutputType | null
    _sum: AbsenceTypeSumAggregateOutputType | null
    _min: AbsenceTypeMinAggregateOutputType | null
    _max: AbsenceTypeMaxAggregateOutputType | null
  }

  export type AbsenceTypeAvgAggregateOutputType = {
    maxDaysPerYear: number | null
    advanceNoticeDays: number | null
  }

  export type AbsenceTypeSumAggregateOutputType = {
    maxDaysPerYear: number | null
    advanceNoticeDays: number | null
  }

  export type AbsenceTypeMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    name: string | null
    code: string | null
    description: string | null
    isPaid: boolean | null
    requiresApproval: boolean | null
    maxDaysPerYear: number | null
    advanceNoticeDays: number | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AbsenceTypeMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    name: string | null
    code: string | null
    description: string | null
    isPaid: boolean | null
    requiresApproval: boolean | null
    maxDaysPerYear: number | null
    advanceNoticeDays: number | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AbsenceTypeCountAggregateOutputType = {
    id: number
    companyId: number
    name: number
    code: number
    description: number
    isPaid: number
    requiresApproval: number
    maxDaysPerYear: number
    advanceNoticeDays: number
    color: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AbsenceTypeAvgAggregateInputType = {
    maxDaysPerYear?: true
    advanceNoticeDays?: true
  }

  export type AbsenceTypeSumAggregateInputType = {
    maxDaysPerYear?: true
    advanceNoticeDays?: true
  }

  export type AbsenceTypeMinAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    code?: true
    description?: true
    isPaid?: true
    requiresApproval?: true
    maxDaysPerYear?: true
    advanceNoticeDays?: true
    color?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AbsenceTypeMaxAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    code?: true
    description?: true
    isPaid?: true
    requiresApproval?: true
    maxDaysPerYear?: true
    advanceNoticeDays?: true
    color?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AbsenceTypeCountAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    code?: true
    description?: true
    isPaid?: true
    requiresApproval?: true
    maxDaysPerYear?: true
    advanceNoticeDays?: true
    color?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AbsenceTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AbsenceType to aggregate.
     */
    where?: AbsenceTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AbsenceTypes to fetch.
     */
    orderBy?: AbsenceTypeOrderByWithRelationInput | AbsenceTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AbsenceTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AbsenceTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AbsenceTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AbsenceTypes
    **/
    _count?: true | AbsenceTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AbsenceTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AbsenceTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AbsenceTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AbsenceTypeMaxAggregateInputType
  }

  export type GetAbsenceTypeAggregateType<T extends AbsenceTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateAbsenceType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAbsenceType[P]>
      : GetScalarType<T[P], AggregateAbsenceType[P]>
  }




  export type AbsenceTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AbsenceTypeWhereInput
    orderBy?: AbsenceTypeOrderByWithAggregationInput | AbsenceTypeOrderByWithAggregationInput[]
    by: AbsenceTypeScalarFieldEnum[] | AbsenceTypeScalarFieldEnum
    having?: AbsenceTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AbsenceTypeCountAggregateInputType | true
    _avg?: AbsenceTypeAvgAggregateInputType
    _sum?: AbsenceTypeSumAggregateInputType
    _min?: AbsenceTypeMinAggregateInputType
    _max?: AbsenceTypeMaxAggregateInputType
  }

  export type AbsenceTypeGroupByOutputType = {
    id: string
    companyId: string
    name: string
    code: string
    description: string | null
    isPaid: boolean
    requiresApproval: boolean
    maxDaysPerYear: number | null
    advanceNoticeDays: number
    color: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: AbsenceTypeCountAggregateOutputType | null
    _avg: AbsenceTypeAvgAggregateOutputType | null
    _sum: AbsenceTypeSumAggregateOutputType | null
    _min: AbsenceTypeMinAggregateOutputType | null
    _max: AbsenceTypeMaxAggregateOutputType | null
  }

  type GetAbsenceTypeGroupByPayload<T extends AbsenceTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AbsenceTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AbsenceTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AbsenceTypeGroupByOutputType[P]>
            : GetScalarType<T[P], AbsenceTypeGroupByOutputType[P]>
        }
      >
    >


  export type AbsenceTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    isPaid?: boolean
    requiresApproval?: boolean
    maxDaysPerYear?: boolean
    advanceNoticeDays?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    absenceRecords?: boolean | AbsenceType$absenceRecordsArgs<ExtArgs>
    _count?: boolean | AbsenceTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["absenceType"]>

  export type AbsenceTypeSelectScalar = {
    id?: boolean
    companyId?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    isPaid?: boolean
    requiresApproval?: boolean
    maxDaysPerYear?: boolean
    advanceNoticeDays?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AbsenceTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    absenceRecords?: boolean | AbsenceType$absenceRecordsArgs<ExtArgs>
    _count?: boolean | AbsenceTypeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AbsenceTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AbsenceType"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      absenceRecords: Prisma.$AbsenceRecordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      name: string
      code: string
      description: string | null
      isPaid: boolean
      requiresApproval: boolean
      maxDaysPerYear: number | null
      advanceNoticeDays: number
      color: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["absenceType"]>
    composites: {}
  }


  type AbsenceTypeGetPayload<S extends boolean | null | undefined | AbsenceTypeDefaultArgs> = $Result.GetResult<Prisma.$AbsenceTypePayload, S>

  type AbsenceTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AbsenceTypeFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AbsenceTypeCountAggregateInputType | true
    }

  export interface AbsenceTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AbsenceType'], meta: { name: 'AbsenceType' } }
    /**
     * Find zero or one AbsenceType that matches the filter.
     * @param {AbsenceTypeFindUniqueArgs} args - Arguments to find a AbsenceType
     * @example
     * // Get one AbsenceType
     * const absenceType = await prisma.absenceType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AbsenceTypeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AbsenceTypeFindUniqueArgs<ExtArgs>>
    ): Prisma__AbsenceTypeClient<$Result.GetResult<Prisma.$AbsenceTypePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AbsenceType that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AbsenceTypeFindUniqueOrThrowArgs} args - Arguments to find a AbsenceType
     * @example
     * // Get one AbsenceType
     * const absenceType = await prisma.absenceType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AbsenceTypeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AbsenceTypeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AbsenceTypeClient<$Result.GetResult<Prisma.$AbsenceTypePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AbsenceType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceTypeFindFirstArgs} args - Arguments to find a AbsenceType
     * @example
     * // Get one AbsenceType
     * const absenceType = await prisma.absenceType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AbsenceTypeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AbsenceTypeFindFirstArgs<ExtArgs>>
    ): Prisma__AbsenceTypeClient<$Result.GetResult<Prisma.$AbsenceTypePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AbsenceType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceTypeFindFirstOrThrowArgs} args - Arguments to find a AbsenceType
     * @example
     * // Get one AbsenceType
     * const absenceType = await prisma.absenceType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AbsenceTypeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AbsenceTypeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AbsenceTypeClient<$Result.GetResult<Prisma.$AbsenceTypePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AbsenceTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AbsenceTypes
     * const absenceTypes = await prisma.absenceType.findMany()
     * 
     * // Get first 10 AbsenceTypes
     * const absenceTypes = await prisma.absenceType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const absenceTypeWithIdOnly = await prisma.absenceType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AbsenceTypeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AbsenceTypeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AbsenceTypePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AbsenceType.
     * @param {AbsenceTypeCreateArgs} args - Arguments to create a AbsenceType.
     * @example
     * // Create one AbsenceType
     * const AbsenceType = await prisma.absenceType.create({
     *   data: {
     *     // ... data to create a AbsenceType
     *   }
     * })
     * 
    **/
    create<T extends AbsenceTypeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AbsenceTypeCreateArgs<ExtArgs>>
    ): Prisma__AbsenceTypeClient<$Result.GetResult<Prisma.$AbsenceTypePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AbsenceTypes.
     *     @param {AbsenceTypeCreateManyArgs} args - Arguments to create many AbsenceTypes.
     *     @example
     *     // Create many AbsenceTypes
     *     const absenceType = await prisma.absenceType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AbsenceTypeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AbsenceTypeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AbsenceType.
     * @param {AbsenceTypeDeleteArgs} args - Arguments to delete one AbsenceType.
     * @example
     * // Delete one AbsenceType
     * const AbsenceType = await prisma.absenceType.delete({
     *   where: {
     *     // ... filter to delete one AbsenceType
     *   }
     * })
     * 
    **/
    delete<T extends AbsenceTypeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AbsenceTypeDeleteArgs<ExtArgs>>
    ): Prisma__AbsenceTypeClient<$Result.GetResult<Prisma.$AbsenceTypePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AbsenceType.
     * @param {AbsenceTypeUpdateArgs} args - Arguments to update one AbsenceType.
     * @example
     * // Update one AbsenceType
     * const absenceType = await prisma.absenceType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AbsenceTypeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AbsenceTypeUpdateArgs<ExtArgs>>
    ): Prisma__AbsenceTypeClient<$Result.GetResult<Prisma.$AbsenceTypePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AbsenceTypes.
     * @param {AbsenceTypeDeleteManyArgs} args - Arguments to filter AbsenceTypes to delete.
     * @example
     * // Delete a few AbsenceTypes
     * const { count } = await prisma.absenceType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AbsenceTypeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AbsenceTypeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AbsenceTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AbsenceTypes
     * const absenceType = await prisma.absenceType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AbsenceTypeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AbsenceTypeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AbsenceType.
     * @param {AbsenceTypeUpsertArgs} args - Arguments to update or create a AbsenceType.
     * @example
     * // Update or create a AbsenceType
     * const absenceType = await prisma.absenceType.upsert({
     *   create: {
     *     // ... data to create a AbsenceType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AbsenceType we want to update
     *   }
     * })
    **/
    upsert<T extends AbsenceTypeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AbsenceTypeUpsertArgs<ExtArgs>>
    ): Prisma__AbsenceTypeClient<$Result.GetResult<Prisma.$AbsenceTypePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AbsenceTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceTypeCountArgs} args - Arguments to filter AbsenceTypes to count.
     * @example
     * // Count the number of AbsenceTypes
     * const count = await prisma.absenceType.count({
     *   where: {
     *     // ... the filter for the AbsenceTypes we want to count
     *   }
     * })
    **/
    count<T extends AbsenceTypeCountArgs>(
      args?: Subset<T, AbsenceTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AbsenceTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AbsenceType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AbsenceTypeAggregateArgs>(args: Subset<T, AbsenceTypeAggregateArgs>): Prisma.PrismaPromise<GetAbsenceTypeAggregateType<T>>

    /**
     * Group by AbsenceType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AbsenceTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AbsenceTypeGroupByArgs['orderBy'] }
        : { orderBy?: AbsenceTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AbsenceTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAbsenceTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AbsenceType model
   */
  readonly fields: AbsenceTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AbsenceType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AbsenceTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    absenceRecords<T extends AbsenceType$absenceRecordsArgs<ExtArgs> = {}>(args?: Subset<T, AbsenceType$absenceRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AbsenceRecordPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AbsenceType model
   */ 
  interface AbsenceTypeFieldRefs {
    readonly id: FieldRef<"AbsenceType", 'String'>
    readonly companyId: FieldRef<"AbsenceType", 'String'>
    readonly name: FieldRef<"AbsenceType", 'String'>
    readonly code: FieldRef<"AbsenceType", 'String'>
    readonly description: FieldRef<"AbsenceType", 'String'>
    readonly isPaid: FieldRef<"AbsenceType", 'Boolean'>
    readonly requiresApproval: FieldRef<"AbsenceType", 'Boolean'>
    readonly maxDaysPerYear: FieldRef<"AbsenceType", 'Int'>
    readonly advanceNoticeDays: FieldRef<"AbsenceType", 'Int'>
    readonly color: FieldRef<"AbsenceType", 'String'>
    readonly isActive: FieldRef<"AbsenceType", 'Boolean'>
    readonly createdAt: FieldRef<"AbsenceType", 'DateTime'>
    readonly updatedAt: FieldRef<"AbsenceType", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * AbsenceType findUnique
   */
  export type AbsenceTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceType
     */
    select?: AbsenceTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceTypeInclude<ExtArgs> | null
    /**
     * Filter, which AbsenceType to fetch.
     */
    where: AbsenceTypeWhereUniqueInput
  }


  /**
   * AbsenceType findUniqueOrThrow
   */
  export type AbsenceTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceType
     */
    select?: AbsenceTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceTypeInclude<ExtArgs> | null
    /**
     * Filter, which AbsenceType to fetch.
     */
    where: AbsenceTypeWhereUniqueInput
  }


  /**
   * AbsenceType findFirst
   */
  export type AbsenceTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceType
     */
    select?: AbsenceTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceTypeInclude<ExtArgs> | null
    /**
     * Filter, which AbsenceType to fetch.
     */
    where?: AbsenceTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AbsenceTypes to fetch.
     */
    orderBy?: AbsenceTypeOrderByWithRelationInput | AbsenceTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AbsenceTypes.
     */
    cursor?: AbsenceTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AbsenceTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AbsenceTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AbsenceTypes.
     */
    distinct?: AbsenceTypeScalarFieldEnum | AbsenceTypeScalarFieldEnum[]
  }


  /**
   * AbsenceType findFirstOrThrow
   */
  export type AbsenceTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceType
     */
    select?: AbsenceTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceTypeInclude<ExtArgs> | null
    /**
     * Filter, which AbsenceType to fetch.
     */
    where?: AbsenceTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AbsenceTypes to fetch.
     */
    orderBy?: AbsenceTypeOrderByWithRelationInput | AbsenceTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AbsenceTypes.
     */
    cursor?: AbsenceTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AbsenceTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AbsenceTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AbsenceTypes.
     */
    distinct?: AbsenceTypeScalarFieldEnum | AbsenceTypeScalarFieldEnum[]
  }


  /**
   * AbsenceType findMany
   */
  export type AbsenceTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceType
     */
    select?: AbsenceTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceTypeInclude<ExtArgs> | null
    /**
     * Filter, which AbsenceTypes to fetch.
     */
    where?: AbsenceTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AbsenceTypes to fetch.
     */
    orderBy?: AbsenceTypeOrderByWithRelationInput | AbsenceTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AbsenceTypes.
     */
    cursor?: AbsenceTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AbsenceTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AbsenceTypes.
     */
    skip?: number
    distinct?: AbsenceTypeScalarFieldEnum | AbsenceTypeScalarFieldEnum[]
  }


  /**
   * AbsenceType create
   */
  export type AbsenceTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceType
     */
    select?: AbsenceTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a AbsenceType.
     */
    data: XOR<AbsenceTypeCreateInput, AbsenceTypeUncheckedCreateInput>
  }


  /**
   * AbsenceType createMany
   */
  export type AbsenceTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AbsenceTypes.
     */
    data: AbsenceTypeCreateManyInput | AbsenceTypeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * AbsenceType update
   */
  export type AbsenceTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceType
     */
    select?: AbsenceTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a AbsenceType.
     */
    data: XOR<AbsenceTypeUpdateInput, AbsenceTypeUncheckedUpdateInput>
    /**
     * Choose, which AbsenceType to update.
     */
    where: AbsenceTypeWhereUniqueInput
  }


  /**
   * AbsenceType updateMany
   */
  export type AbsenceTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AbsenceTypes.
     */
    data: XOR<AbsenceTypeUpdateManyMutationInput, AbsenceTypeUncheckedUpdateManyInput>
    /**
     * Filter which AbsenceTypes to update
     */
    where?: AbsenceTypeWhereInput
  }


  /**
   * AbsenceType upsert
   */
  export type AbsenceTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceType
     */
    select?: AbsenceTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the AbsenceType to update in case it exists.
     */
    where: AbsenceTypeWhereUniqueInput
    /**
     * In case the AbsenceType found by the `where` argument doesn't exist, create a new AbsenceType with this data.
     */
    create: XOR<AbsenceTypeCreateInput, AbsenceTypeUncheckedCreateInput>
    /**
     * In case the AbsenceType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AbsenceTypeUpdateInput, AbsenceTypeUncheckedUpdateInput>
  }


  /**
   * AbsenceType delete
   */
  export type AbsenceTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceType
     */
    select?: AbsenceTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceTypeInclude<ExtArgs> | null
    /**
     * Filter which AbsenceType to delete.
     */
    where: AbsenceTypeWhereUniqueInput
  }


  /**
   * AbsenceType deleteMany
   */
  export type AbsenceTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AbsenceTypes to delete
     */
    where?: AbsenceTypeWhereInput
  }


  /**
   * AbsenceType.absenceRecords
   */
  export type AbsenceType$absenceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceRecord
     */
    select?: AbsenceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceRecordInclude<ExtArgs> | null
    where?: AbsenceRecordWhereInput
    orderBy?: AbsenceRecordOrderByWithRelationInput | AbsenceRecordOrderByWithRelationInput[]
    cursor?: AbsenceRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AbsenceRecordScalarFieldEnum | AbsenceRecordScalarFieldEnum[]
  }


  /**
   * AbsenceType without action
   */
  export type AbsenceTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceType
     */
    select?: AbsenceTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceTypeInclude<ExtArgs> | null
  }



  /**
   * Model AbsenceRecord
   */

  export type AggregateAbsenceRecord = {
    _count: AbsenceRecordCountAggregateOutputType | null
    _avg: AbsenceRecordAvgAggregateOutputType | null
    _sum: AbsenceRecordSumAggregateOutputType | null
    _min: AbsenceRecordMinAggregateOutputType | null
    _max: AbsenceRecordMaxAggregateOutputType | null
  }

  export type AbsenceRecordAvgAggregateOutputType = {
    totalDays: number | null
    confidenceScore: number | null
  }

  export type AbsenceRecordSumAggregateOutputType = {
    totalDays: number | null
    confidenceScore: number | null
  }

  export type AbsenceRecordMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    employeeId: string | null
    absenceTypeId: string | null
    startDate: Date | null
    endDate: Date | null
    totalDays: number | null
    reason: string | null
    notes: string | null
    status: string | null
    source: string | null
    sourceReference: string | null
    confidenceScore: number | null
    approvedBy: string | null
    approvedAt: Date | null
    rejectionReason: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AbsenceRecordMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    employeeId: string | null
    absenceTypeId: string | null
    startDate: Date | null
    endDate: Date | null
    totalDays: number | null
    reason: string | null
    notes: string | null
    status: string | null
    source: string | null
    sourceReference: string | null
    confidenceScore: number | null
    approvedBy: string | null
    approvedAt: Date | null
    rejectionReason: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AbsenceRecordCountAggregateOutputType = {
    id: number
    companyId: number
    employeeId: number
    absenceTypeId: number
    startDate: number
    endDate: number
    totalDays: number
    reason: number
    notes: number
    status: number
    source: number
    sourceReference: number
    confidenceScore: number
    approvedBy: number
    approvedAt: number
    rejectionReason: number
    createdBy: number
    attachments: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AbsenceRecordAvgAggregateInputType = {
    totalDays?: true
    confidenceScore?: true
  }

  export type AbsenceRecordSumAggregateInputType = {
    totalDays?: true
    confidenceScore?: true
  }

  export type AbsenceRecordMinAggregateInputType = {
    id?: true
    companyId?: true
    employeeId?: true
    absenceTypeId?: true
    startDate?: true
    endDate?: true
    totalDays?: true
    reason?: true
    notes?: true
    status?: true
    source?: true
    sourceReference?: true
    confidenceScore?: true
    approvedBy?: true
    approvedAt?: true
    rejectionReason?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AbsenceRecordMaxAggregateInputType = {
    id?: true
    companyId?: true
    employeeId?: true
    absenceTypeId?: true
    startDate?: true
    endDate?: true
    totalDays?: true
    reason?: true
    notes?: true
    status?: true
    source?: true
    sourceReference?: true
    confidenceScore?: true
    approvedBy?: true
    approvedAt?: true
    rejectionReason?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AbsenceRecordCountAggregateInputType = {
    id?: true
    companyId?: true
    employeeId?: true
    absenceTypeId?: true
    startDate?: true
    endDate?: true
    totalDays?: true
    reason?: true
    notes?: true
    status?: true
    source?: true
    sourceReference?: true
    confidenceScore?: true
    approvedBy?: true
    approvedAt?: true
    rejectionReason?: true
    createdBy?: true
    attachments?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AbsenceRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AbsenceRecord to aggregate.
     */
    where?: AbsenceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AbsenceRecords to fetch.
     */
    orderBy?: AbsenceRecordOrderByWithRelationInput | AbsenceRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AbsenceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AbsenceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AbsenceRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AbsenceRecords
    **/
    _count?: true | AbsenceRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AbsenceRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AbsenceRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AbsenceRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AbsenceRecordMaxAggregateInputType
  }

  export type GetAbsenceRecordAggregateType<T extends AbsenceRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateAbsenceRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAbsenceRecord[P]>
      : GetScalarType<T[P], AggregateAbsenceRecord[P]>
  }




  export type AbsenceRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AbsenceRecordWhereInput
    orderBy?: AbsenceRecordOrderByWithAggregationInput | AbsenceRecordOrderByWithAggregationInput[]
    by: AbsenceRecordScalarFieldEnum[] | AbsenceRecordScalarFieldEnum
    having?: AbsenceRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AbsenceRecordCountAggregateInputType | true
    _avg?: AbsenceRecordAvgAggregateInputType
    _sum?: AbsenceRecordSumAggregateInputType
    _min?: AbsenceRecordMinAggregateInputType
    _max?: AbsenceRecordMaxAggregateInputType
  }

  export type AbsenceRecordGroupByOutputType = {
    id: string
    companyId: string
    employeeId: string
    absenceTypeId: string
    startDate: Date
    endDate: Date
    totalDays: number
    reason: string | null
    notes: string | null
    status: string
    source: string
    sourceReference: string | null
    confidenceScore: number | null
    approvedBy: string | null
    approvedAt: Date | null
    rejectionReason: string | null
    createdBy: string | null
    attachments: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: AbsenceRecordCountAggregateOutputType | null
    _avg: AbsenceRecordAvgAggregateOutputType | null
    _sum: AbsenceRecordSumAggregateOutputType | null
    _min: AbsenceRecordMinAggregateOutputType | null
    _max: AbsenceRecordMaxAggregateOutputType | null
  }

  type GetAbsenceRecordGroupByPayload<T extends AbsenceRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AbsenceRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AbsenceRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AbsenceRecordGroupByOutputType[P]>
            : GetScalarType<T[P], AbsenceRecordGroupByOutputType[P]>
        }
      >
    >


  export type AbsenceRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    employeeId?: boolean
    absenceTypeId?: boolean
    startDate?: boolean
    endDate?: boolean
    totalDays?: boolean
    reason?: boolean
    notes?: boolean
    status?: boolean
    source?: boolean
    sourceReference?: boolean
    confidenceScore?: boolean
    approvedBy?: boolean
    approvedAt?: boolean
    rejectionReason?: boolean
    createdBy?: boolean
    attachments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    absenceType?: boolean | AbsenceTypeDefaultArgs<ExtArgs>
    creator?: boolean | AbsenceRecord$creatorArgs<ExtArgs>
    approver?: boolean | AbsenceRecord$approverArgs<ExtArgs>
  }, ExtArgs["result"]["absenceRecord"]>

  export type AbsenceRecordSelectScalar = {
    id?: boolean
    companyId?: boolean
    employeeId?: boolean
    absenceTypeId?: boolean
    startDate?: boolean
    endDate?: boolean
    totalDays?: boolean
    reason?: boolean
    notes?: boolean
    status?: boolean
    source?: boolean
    sourceReference?: boolean
    confidenceScore?: boolean
    approvedBy?: boolean
    approvedAt?: boolean
    rejectionReason?: boolean
    createdBy?: boolean
    attachments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AbsenceRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    absenceType?: boolean | AbsenceTypeDefaultArgs<ExtArgs>
    creator?: boolean | AbsenceRecord$creatorArgs<ExtArgs>
    approver?: boolean | AbsenceRecord$approverArgs<ExtArgs>
  }


  export type $AbsenceRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AbsenceRecord"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      employee: Prisma.$EmployeePayload<ExtArgs>
      absenceType: Prisma.$AbsenceTypePayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs> | null
      approver: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      employeeId: string
      absenceTypeId: string
      startDate: Date
      endDate: Date
      totalDays: number
      reason: string | null
      notes: string | null
      status: string
      source: string
      sourceReference: string | null
      confidenceScore: number | null
      approvedBy: string | null
      approvedAt: Date | null
      rejectionReason: string | null
      createdBy: string | null
      attachments: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["absenceRecord"]>
    composites: {}
  }


  type AbsenceRecordGetPayload<S extends boolean | null | undefined | AbsenceRecordDefaultArgs> = $Result.GetResult<Prisma.$AbsenceRecordPayload, S>

  type AbsenceRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AbsenceRecordFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AbsenceRecordCountAggregateInputType | true
    }

  export interface AbsenceRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AbsenceRecord'], meta: { name: 'AbsenceRecord' } }
    /**
     * Find zero or one AbsenceRecord that matches the filter.
     * @param {AbsenceRecordFindUniqueArgs} args - Arguments to find a AbsenceRecord
     * @example
     * // Get one AbsenceRecord
     * const absenceRecord = await prisma.absenceRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AbsenceRecordFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AbsenceRecordFindUniqueArgs<ExtArgs>>
    ): Prisma__AbsenceRecordClient<$Result.GetResult<Prisma.$AbsenceRecordPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AbsenceRecord that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AbsenceRecordFindUniqueOrThrowArgs} args - Arguments to find a AbsenceRecord
     * @example
     * // Get one AbsenceRecord
     * const absenceRecord = await prisma.absenceRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AbsenceRecordFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AbsenceRecordFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AbsenceRecordClient<$Result.GetResult<Prisma.$AbsenceRecordPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AbsenceRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceRecordFindFirstArgs} args - Arguments to find a AbsenceRecord
     * @example
     * // Get one AbsenceRecord
     * const absenceRecord = await prisma.absenceRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AbsenceRecordFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AbsenceRecordFindFirstArgs<ExtArgs>>
    ): Prisma__AbsenceRecordClient<$Result.GetResult<Prisma.$AbsenceRecordPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AbsenceRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceRecordFindFirstOrThrowArgs} args - Arguments to find a AbsenceRecord
     * @example
     * // Get one AbsenceRecord
     * const absenceRecord = await prisma.absenceRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AbsenceRecordFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AbsenceRecordFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AbsenceRecordClient<$Result.GetResult<Prisma.$AbsenceRecordPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AbsenceRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceRecordFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AbsenceRecords
     * const absenceRecords = await prisma.absenceRecord.findMany()
     * 
     * // Get first 10 AbsenceRecords
     * const absenceRecords = await prisma.absenceRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const absenceRecordWithIdOnly = await prisma.absenceRecord.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AbsenceRecordFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AbsenceRecordFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AbsenceRecordPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AbsenceRecord.
     * @param {AbsenceRecordCreateArgs} args - Arguments to create a AbsenceRecord.
     * @example
     * // Create one AbsenceRecord
     * const AbsenceRecord = await prisma.absenceRecord.create({
     *   data: {
     *     // ... data to create a AbsenceRecord
     *   }
     * })
     * 
    **/
    create<T extends AbsenceRecordCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AbsenceRecordCreateArgs<ExtArgs>>
    ): Prisma__AbsenceRecordClient<$Result.GetResult<Prisma.$AbsenceRecordPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AbsenceRecords.
     *     @param {AbsenceRecordCreateManyArgs} args - Arguments to create many AbsenceRecords.
     *     @example
     *     // Create many AbsenceRecords
     *     const absenceRecord = await prisma.absenceRecord.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AbsenceRecordCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AbsenceRecordCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AbsenceRecord.
     * @param {AbsenceRecordDeleteArgs} args - Arguments to delete one AbsenceRecord.
     * @example
     * // Delete one AbsenceRecord
     * const AbsenceRecord = await prisma.absenceRecord.delete({
     *   where: {
     *     // ... filter to delete one AbsenceRecord
     *   }
     * })
     * 
    **/
    delete<T extends AbsenceRecordDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AbsenceRecordDeleteArgs<ExtArgs>>
    ): Prisma__AbsenceRecordClient<$Result.GetResult<Prisma.$AbsenceRecordPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AbsenceRecord.
     * @param {AbsenceRecordUpdateArgs} args - Arguments to update one AbsenceRecord.
     * @example
     * // Update one AbsenceRecord
     * const absenceRecord = await prisma.absenceRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AbsenceRecordUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AbsenceRecordUpdateArgs<ExtArgs>>
    ): Prisma__AbsenceRecordClient<$Result.GetResult<Prisma.$AbsenceRecordPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AbsenceRecords.
     * @param {AbsenceRecordDeleteManyArgs} args - Arguments to filter AbsenceRecords to delete.
     * @example
     * // Delete a few AbsenceRecords
     * const { count } = await prisma.absenceRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AbsenceRecordDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AbsenceRecordDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AbsenceRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AbsenceRecords
     * const absenceRecord = await prisma.absenceRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AbsenceRecordUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AbsenceRecordUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AbsenceRecord.
     * @param {AbsenceRecordUpsertArgs} args - Arguments to update or create a AbsenceRecord.
     * @example
     * // Update or create a AbsenceRecord
     * const absenceRecord = await prisma.absenceRecord.upsert({
     *   create: {
     *     // ... data to create a AbsenceRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AbsenceRecord we want to update
     *   }
     * })
    **/
    upsert<T extends AbsenceRecordUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AbsenceRecordUpsertArgs<ExtArgs>>
    ): Prisma__AbsenceRecordClient<$Result.GetResult<Prisma.$AbsenceRecordPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AbsenceRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceRecordCountArgs} args - Arguments to filter AbsenceRecords to count.
     * @example
     * // Count the number of AbsenceRecords
     * const count = await prisma.absenceRecord.count({
     *   where: {
     *     // ... the filter for the AbsenceRecords we want to count
     *   }
     * })
    **/
    count<T extends AbsenceRecordCountArgs>(
      args?: Subset<T, AbsenceRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AbsenceRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AbsenceRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AbsenceRecordAggregateArgs>(args: Subset<T, AbsenceRecordAggregateArgs>): Prisma.PrismaPromise<GetAbsenceRecordAggregateType<T>>

    /**
     * Group by AbsenceRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbsenceRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AbsenceRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AbsenceRecordGroupByArgs['orderBy'] }
        : { orderBy?: AbsenceRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AbsenceRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAbsenceRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AbsenceRecord model
   */
  readonly fields: AbsenceRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AbsenceRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AbsenceRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    absenceType<T extends AbsenceTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AbsenceTypeDefaultArgs<ExtArgs>>): Prisma__AbsenceTypeClient<$Result.GetResult<Prisma.$AbsenceTypePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    creator<T extends AbsenceRecord$creatorArgs<ExtArgs> = {}>(args?: Subset<T, AbsenceRecord$creatorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    approver<T extends AbsenceRecord$approverArgs<ExtArgs> = {}>(args?: Subset<T, AbsenceRecord$approverArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AbsenceRecord model
   */ 
  interface AbsenceRecordFieldRefs {
    readonly id: FieldRef<"AbsenceRecord", 'String'>
    readonly companyId: FieldRef<"AbsenceRecord", 'String'>
    readonly employeeId: FieldRef<"AbsenceRecord", 'String'>
    readonly absenceTypeId: FieldRef<"AbsenceRecord", 'String'>
    readonly startDate: FieldRef<"AbsenceRecord", 'DateTime'>
    readonly endDate: FieldRef<"AbsenceRecord", 'DateTime'>
    readonly totalDays: FieldRef<"AbsenceRecord", 'Int'>
    readonly reason: FieldRef<"AbsenceRecord", 'String'>
    readonly notes: FieldRef<"AbsenceRecord", 'String'>
    readonly status: FieldRef<"AbsenceRecord", 'String'>
    readonly source: FieldRef<"AbsenceRecord", 'String'>
    readonly sourceReference: FieldRef<"AbsenceRecord", 'String'>
    readonly confidenceScore: FieldRef<"AbsenceRecord", 'Float'>
    readonly approvedBy: FieldRef<"AbsenceRecord", 'String'>
    readonly approvedAt: FieldRef<"AbsenceRecord", 'DateTime'>
    readonly rejectionReason: FieldRef<"AbsenceRecord", 'String'>
    readonly createdBy: FieldRef<"AbsenceRecord", 'String'>
    readonly attachments: FieldRef<"AbsenceRecord", 'Json'>
    readonly createdAt: FieldRef<"AbsenceRecord", 'DateTime'>
    readonly updatedAt: FieldRef<"AbsenceRecord", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * AbsenceRecord findUnique
   */
  export type AbsenceRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceRecord
     */
    select?: AbsenceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceRecordInclude<ExtArgs> | null
    /**
     * Filter, which AbsenceRecord to fetch.
     */
    where: AbsenceRecordWhereUniqueInput
  }


  /**
   * AbsenceRecord findUniqueOrThrow
   */
  export type AbsenceRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceRecord
     */
    select?: AbsenceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceRecordInclude<ExtArgs> | null
    /**
     * Filter, which AbsenceRecord to fetch.
     */
    where: AbsenceRecordWhereUniqueInput
  }


  /**
   * AbsenceRecord findFirst
   */
  export type AbsenceRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceRecord
     */
    select?: AbsenceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceRecordInclude<ExtArgs> | null
    /**
     * Filter, which AbsenceRecord to fetch.
     */
    where?: AbsenceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AbsenceRecords to fetch.
     */
    orderBy?: AbsenceRecordOrderByWithRelationInput | AbsenceRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AbsenceRecords.
     */
    cursor?: AbsenceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AbsenceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AbsenceRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AbsenceRecords.
     */
    distinct?: AbsenceRecordScalarFieldEnum | AbsenceRecordScalarFieldEnum[]
  }


  /**
   * AbsenceRecord findFirstOrThrow
   */
  export type AbsenceRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceRecord
     */
    select?: AbsenceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceRecordInclude<ExtArgs> | null
    /**
     * Filter, which AbsenceRecord to fetch.
     */
    where?: AbsenceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AbsenceRecords to fetch.
     */
    orderBy?: AbsenceRecordOrderByWithRelationInput | AbsenceRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AbsenceRecords.
     */
    cursor?: AbsenceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AbsenceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AbsenceRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AbsenceRecords.
     */
    distinct?: AbsenceRecordScalarFieldEnum | AbsenceRecordScalarFieldEnum[]
  }


  /**
   * AbsenceRecord findMany
   */
  export type AbsenceRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceRecord
     */
    select?: AbsenceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceRecordInclude<ExtArgs> | null
    /**
     * Filter, which AbsenceRecords to fetch.
     */
    where?: AbsenceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AbsenceRecords to fetch.
     */
    orderBy?: AbsenceRecordOrderByWithRelationInput | AbsenceRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AbsenceRecords.
     */
    cursor?: AbsenceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AbsenceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AbsenceRecords.
     */
    skip?: number
    distinct?: AbsenceRecordScalarFieldEnum | AbsenceRecordScalarFieldEnum[]
  }


  /**
   * AbsenceRecord create
   */
  export type AbsenceRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceRecord
     */
    select?: AbsenceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a AbsenceRecord.
     */
    data: XOR<AbsenceRecordCreateInput, AbsenceRecordUncheckedCreateInput>
  }


  /**
   * AbsenceRecord createMany
   */
  export type AbsenceRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AbsenceRecords.
     */
    data: AbsenceRecordCreateManyInput | AbsenceRecordCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * AbsenceRecord update
   */
  export type AbsenceRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceRecord
     */
    select?: AbsenceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a AbsenceRecord.
     */
    data: XOR<AbsenceRecordUpdateInput, AbsenceRecordUncheckedUpdateInput>
    /**
     * Choose, which AbsenceRecord to update.
     */
    where: AbsenceRecordWhereUniqueInput
  }


  /**
   * AbsenceRecord updateMany
   */
  export type AbsenceRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AbsenceRecords.
     */
    data: XOR<AbsenceRecordUpdateManyMutationInput, AbsenceRecordUncheckedUpdateManyInput>
    /**
     * Filter which AbsenceRecords to update
     */
    where?: AbsenceRecordWhereInput
  }


  /**
   * AbsenceRecord upsert
   */
  export type AbsenceRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceRecord
     */
    select?: AbsenceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the AbsenceRecord to update in case it exists.
     */
    where: AbsenceRecordWhereUniqueInput
    /**
     * In case the AbsenceRecord found by the `where` argument doesn't exist, create a new AbsenceRecord with this data.
     */
    create: XOR<AbsenceRecordCreateInput, AbsenceRecordUncheckedCreateInput>
    /**
     * In case the AbsenceRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AbsenceRecordUpdateInput, AbsenceRecordUncheckedUpdateInput>
  }


  /**
   * AbsenceRecord delete
   */
  export type AbsenceRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceRecord
     */
    select?: AbsenceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceRecordInclude<ExtArgs> | null
    /**
     * Filter which AbsenceRecord to delete.
     */
    where: AbsenceRecordWhereUniqueInput
  }


  /**
   * AbsenceRecord deleteMany
   */
  export type AbsenceRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AbsenceRecords to delete
     */
    where?: AbsenceRecordWhereInput
  }


  /**
   * AbsenceRecord.creator
   */
  export type AbsenceRecord$creatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * AbsenceRecord.approver
   */
  export type AbsenceRecord$approverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * AbsenceRecord without action
   */
  export type AbsenceRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AbsenceRecord
     */
    select?: AbsenceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AbsenceRecordInclude<ExtArgs> | null
  }



  /**
   * Model EmailIntegration
   */

  export type AggregateEmailIntegration = {
    _count: EmailIntegrationCountAggregateOutputType | null
    _avg: EmailIntegrationAvgAggregateOutputType | null
    _sum: EmailIntegrationSumAggregateOutputType | null
    _min: EmailIntegrationMinAggregateOutputType | null
    _max: EmailIntegrationMaxAggregateOutputType | null
  }

  export type EmailIntegrationAvgAggregateOutputType = {
    syncFrequencyMinutes: number | null
    totalEmailsProcessed: number | null
  }

  export type EmailIntegrationSumAggregateOutputType = {
    syncFrequencyMinutes: number | null
    totalEmailsProcessed: number | null
  }

  export type EmailIntegrationMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    name: string | null
    provider: string | null
    encryptedCredentials: string | null
    isActive: boolean | null
    lastSync: Date | null
    syncStatus: string | null
    errorMessage: string | null
    syncFrequencyMinutes: number | null
    totalEmailsProcessed: number | null
    lastEmailProcessedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailIntegrationMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    name: string | null
    provider: string | null
    encryptedCredentials: string | null
    isActive: boolean | null
    lastSync: Date | null
    syncStatus: string | null
    errorMessage: string | null
    syncFrequencyMinutes: number | null
    totalEmailsProcessed: number | null
    lastEmailProcessedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailIntegrationCountAggregateOutputType = {
    id: number
    companyId: number
    name: number
    provider: number
    configuration: number
    encryptedCredentials: number
    isActive: number
    lastSync: number
    syncStatus: number
    errorMessage: number
    syncFrequencyMinutes: number
    totalEmailsProcessed: number
    lastEmailProcessedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmailIntegrationAvgAggregateInputType = {
    syncFrequencyMinutes?: true
    totalEmailsProcessed?: true
  }

  export type EmailIntegrationSumAggregateInputType = {
    syncFrequencyMinutes?: true
    totalEmailsProcessed?: true
  }

  export type EmailIntegrationMinAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    provider?: true
    encryptedCredentials?: true
    isActive?: true
    lastSync?: true
    syncStatus?: true
    errorMessage?: true
    syncFrequencyMinutes?: true
    totalEmailsProcessed?: true
    lastEmailProcessedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailIntegrationMaxAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    provider?: true
    encryptedCredentials?: true
    isActive?: true
    lastSync?: true
    syncStatus?: true
    errorMessage?: true
    syncFrequencyMinutes?: true
    totalEmailsProcessed?: true
    lastEmailProcessedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailIntegrationCountAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    provider?: true
    configuration?: true
    encryptedCredentials?: true
    isActive?: true
    lastSync?: true
    syncStatus?: true
    errorMessage?: true
    syncFrequencyMinutes?: true
    totalEmailsProcessed?: true
    lastEmailProcessedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmailIntegrationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailIntegration to aggregate.
     */
    where?: EmailIntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailIntegrations to fetch.
     */
    orderBy?: EmailIntegrationOrderByWithRelationInput | EmailIntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailIntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailIntegrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailIntegrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailIntegrations
    **/
    _count?: true | EmailIntegrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailIntegrationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailIntegrationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailIntegrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailIntegrationMaxAggregateInputType
  }

  export type GetEmailIntegrationAggregateType<T extends EmailIntegrationAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailIntegration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailIntegration[P]>
      : GetScalarType<T[P], AggregateEmailIntegration[P]>
  }




  export type EmailIntegrationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailIntegrationWhereInput
    orderBy?: EmailIntegrationOrderByWithAggregationInput | EmailIntegrationOrderByWithAggregationInput[]
    by: EmailIntegrationScalarFieldEnum[] | EmailIntegrationScalarFieldEnum
    having?: EmailIntegrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailIntegrationCountAggregateInputType | true
    _avg?: EmailIntegrationAvgAggregateInputType
    _sum?: EmailIntegrationSumAggregateInputType
    _min?: EmailIntegrationMinAggregateInputType
    _max?: EmailIntegrationMaxAggregateInputType
  }

  export type EmailIntegrationGroupByOutputType = {
    id: string
    companyId: string
    name: string
    provider: string
    configuration: JsonValue
    encryptedCredentials: string
    isActive: boolean
    lastSync: Date | null
    syncStatus: string
    errorMessage: string | null
    syncFrequencyMinutes: number
    totalEmailsProcessed: number
    lastEmailProcessedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: EmailIntegrationCountAggregateOutputType | null
    _avg: EmailIntegrationAvgAggregateOutputType | null
    _sum: EmailIntegrationSumAggregateOutputType | null
    _min: EmailIntegrationMinAggregateOutputType | null
    _max: EmailIntegrationMaxAggregateOutputType | null
  }

  type GetEmailIntegrationGroupByPayload<T extends EmailIntegrationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailIntegrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailIntegrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailIntegrationGroupByOutputType[P]>
            : GetScalarType<T[P], EmailIntegrationGroupByOutputType[P]>
        }
      >
    >


  export type EmailIntegrationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    provider?: boolean
    configuration?: boolean
    encryptedCredentials?: boolean
    isActive?: boolean
    lastSync?: boolean
    syncStatus?: boolean
    errorMessage?: boolean
    syncFrequencyMinutes?: boolean
    totalEmailsProcessed?: boolean
    lastEmailProcessedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailIntegration"]>

  export type EmailIntegrationSelectScalar = {
    id?: boolean
    companyId?: boolean
    name?: boolean
    provider?: boolean
    configuration?: boolean
    encryptedCredentials?: boolean
    isActive?: boolean
    lastSync?: boolean
    syncStatus?: boolean
    errorMessage?: boolean
    syncFrequencyMinutes?: boolean
    totalEmailsProcessed?: boolean
    lastEmailProcessedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmailIntegrationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }


  export type $EmailIntegrationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailIntegration"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      name: string
      provider: string
      configuration: Prisma.JsonValue
      encryptedCredentials: string
      isActive: boolean
      lastSync: Date | null
      syncStatus: string
      errorMessage: string | null
      syncFrequencyMinutes: number
      totalEmailsProcessed: number
      lastEmailProcessedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emailIntegration"]>
    composites: {}
  }


  type EmailIntegrationGetPayload<S extends boolean | null | undefined | EmailIntegrationDefaultArgs> = $Result.GetResult<Prisma.$EmailIntegrationPayload, S>

  type EmailIntegrationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmailIntegrationFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: EmailIntegrationCountAggregateInputType | true
    }

  export interface EmailIntegrationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailIntegration'], meta: { name: 'EmailIntegration' } }
    /**
     * Find zero or one EmailIntegration that matches the filter.
     * @param {EmailIntegrationFindUniqueArgs} args - Arguments to find a EmailIntegration
     * @example
     * // Get one EmailIntegration
     * const emailIntegration = await prisma.emailIntegration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmailIntegrationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EmailIntegrationFindUniqueArgs<ExtArgs>>
    ): Prisma__EmailIntegrationClient<$Result.GetResult<Prisma.$EmailIntegrationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one EmailIntegration that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EmailIntegrationFindUniqueOrThrowArgs} args - Arguments to find a EmailIntegration
     * @example
     * // Get one EmailIntegration
     * const emailIntegration = await prisma.emailIntegration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EmailIntegrationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailIntegrationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EmailIntegrationClient<$Result.GetResult<Prisma.$EmailIntegrationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first EmailIntegration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailIntegrationFindFirstArgs} args - Arguments to find a EmailIntegration
     * @example
     * // Get one EmailIntegration
     * const emailIntegration = await prisma.emailIntegration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmailIntegrationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailIntegrationFindFirstArgs<ExtArgs>>
    ): Prisma__EmailIntegrationClient<$Result.GetResult<Prisma.$EmailIntegrationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first EmailIntegration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailIntegrationFindFirstOrThrowArgs} args - Arguments to find a EmailIntegration
     * @example
     * // Get one EmailIntegration
     * const emailIntegration = await prisma.emailIntegration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EmailIntegrationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailIntegrationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EmailIntegrationClient<$Result.GetResult<Prisma.$EmailIntegrationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more EmailIntegrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailIntegrationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailIntegrations
     * const emailIntegrations = await prisma.emailIntegration.findMany()
     * 
     * // Get first 10 EmailIntegrations
     * const emailIntegrations = await prisma.emailIntegration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailIntegrationWithIdOnly = await prisma.emailIntegration.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EmailIntegrationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailIntegrationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailIntegrationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a EmailIntegration.
     * @param {EmailIntegrationCreateArgs} args - Arguments to create a EmailIntegration.
     * @example
     * // Create one EmailIntegration
     * const EmailIntegration = await prisma.emailIntegration.create({
     *   data: {
     *     // ... data to create a EmailIntegration
     *   }
     * })
     * 
    **/
    create<T extends EmailIntegrationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EmailIntegrationCreateArgs<ExtArgs>>
    ): Prisma__EmailIntegrationClient<$Result.GetResult<Prisma.$EmailIntegrationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many EmailIntegrations.
     *     @param {EmailIntegrationCreateManyArgs} args - Arguments to create many EmailIntegrations.
     *     @example
     *     // Create many EmailIntegrations
     *     const emailIntegration = await prisma.emailIntegration.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EmailIntegrationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailIntegrationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EmailIntegration.
     * @param {EmailIntegrationDeleteArgs} args - Arguments to delete one EmailIntegration.
     * @example
     * // Delete one EmailIntegration
     * const EmailIntegration = await prisma.emailIntegration.delete({
     *   where: {
     *     // ... filter to delete one EmailIntegration
     *   }
     * })
     * 
    **/
    delete<T extends EmailIntegrationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EmailIntegrationDeleteArgs<ExtArgs>>
    ): Prisma__EmailIntegrationClient<$Result.GetResult<Prisma.$EmailIntegrationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one EmailIntegration.
     * @param {EmailIntegrationUpdateArgs} args - Arguments to update one EmailIntegration.
     * @example
     * // Update one EmailIntegration
     * const emailIntegration = await prisma.emailIntegration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmailIntegrationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EmailIntegrationUpdateArgs<ExtArgs>>
    ): Prisma__EmailIntegrationClient<$Result.GetResult<Prisma.$EmailIntegrationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more EmailIntegrations.
     * @param {EmailIntegrationDeleteManyArgs} args - Arguments to filter EmailIntegrations to delete.
     * @example
     * // Delete a few EmailIntegrations
     * const { count } = await prisma.emailIntegration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmailIntegrationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailIntegrationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailIntegrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailIntegrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailIntegrations
     * const emailIntegration = await prisma.emailIntegration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmailIntegrationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EmailIntegrationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmailIntegration.
     * @param {EmailIntegrationUpsertArgs} args - Arguments to update or create a EmailIntegration.
     * @example
     * // Update or create a EmailIntegration
     * const emailIntegration = await prisma.emailIntegration.upsert({
     *   create: {
     *     // ... data to create a EmailIntegration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailIntegration we want to update
     *   }
     * })
    **/
    upsert<T extends EmailIntegrationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EmailIntegrationUpsertArgs<ExtArgs>>
    ): Prisma__EmailIntegrationClient<$Result.GetResult<Prisma.$EmailIntegrationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of EmailIntegrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailIntegrationCountArgs} args - Arguments to filter EmailIntegrations to count.
     * @example
     * // Count the number of EmailIntegrations
     * const count = await prisma.emailIntegration.count({
     *   where: {
     *     // ... the filter for the EmailIntegrations we want to count
     *   }
     * })
    **/
    count<T extends EmailIntegrationCountArgs>(
      args?: Subset<T, EmailIntegrationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailIntegrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailIntegration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailIntegrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailIntegrationAggregateArgs>(args: Subset<T, EmailIntegrationAggregateArgs>): Prisma.PrismaPromise<GetEmailIntegrationAggregateType<T>>

    /**
     * Group by EmailIntegration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailIntegrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailIntegrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailIntegrationGroupByArgs['orderBy'] }
        : { orderBy?: EmailIntegrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailIntegrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailIntegrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailIntegration model
   */
  readonly fields: EmailIntegrationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailIntegration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailIntegrationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the EmailIntegration model
   */ 
  interface EmailIntegrationFieldRefs {
    readonly id: FieldRef<"EmailIntegration", 'String'>
    readonly companyId: FieldRef<"EmailIntegration", 'String'>
    readonly name: FieldRef<"EmailIntegration", 'String'>
    readonly provider: FieldRef<"EmailIntegration", 'String'>
    readonly configuration: FieldRef<"EmailIntegration", 'Json'>
    readonly encryptedCredentials: FieldRef<"EmailIntegration", 'String'>
    readonly isActive: FieldRef<"EmailIntegration", 'Boolean'>
    readonly lastSync: FieldRef<"EmailIntegration", 'DateTime'>
    readonly syncStatus: FieldRef<"EmailIntegration", 'String'>
    readonly errorMessage: FieldRef<"EmailIntegration", 'String'>
    readonly syncFrequencyMinutes: FieldRef<"EmailIntegration", 'Int'>
    readonly totalEmailsProcessed: FieldRef<"EmailIntegration", 'Int'>
    readonly lastEmailProcessedAt: FieldRef<"EmailIntegration", 'DateTime'>
    readonly createdAt: FieldRef<"EmailIntegration", 'DateTime'>
    readonly updatedAt: FieldRef<"EmailIntegration", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * EmailIntegration findUnique
   */
  export type EmailIntegrationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailIntegration
     */
    select?: EmailIntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailIntegrationInclude<ExtArgs> | null
    /**
     * Filter, which EmailIntegration to fetch.
     */
    where: EmailIntegrationWhereUniqueInput
  }


  /**
   * EmailIntegration findUniqueOrThrow
   */
  export type EmailIntegrationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailIntegration
     */
    select?: EmailIntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailIntegrationInclude<ExtArgs> | null
    /**
     * Filter, which EmailIntegration to fetch.
     */
    where: EmailIntegrationWhereUniqueInput
  }


  /**
   * EmailIntegration findFirst
   */
  export type EmailIntegrationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailIntegration
     */
    select?: EmailIntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailIntegrationInclude<ExtArgs> | null
    /**
     * Filter, which EmailIntegration to fetch.
     */
    where?: EmailIntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailIntegrations to fetch.
     */
    orderBy?: EmailIntegrationOrderByWithRelationInput | EmailIntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailIntegrations.
     */
    cursor?: EmailIntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailIntegrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailIntegrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailIntegrations.
     */
    distinct?: EmailIntegrationScalarFieldEnum | EmailIntegrationScalarFieldEnum[]
  }


  /**
   * EmailIntegration findFirstOrThrow
   */
  export type EmailIntegrationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailIntegration
     */
    select?: EmailIntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailIntegrationInclude<ExtArgs> | null
    /**
     * Filter, which EmailIntegration to fetch.
     */
    where?: EmailIntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailIntegrations to fetch.
     */
    orderBy?: EmailIntegrationOrderByWithRelationInput | EmailIntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailIntegrations.
     */
    cursor?: EmailIntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailIntegrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailIntegrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailIntegrations.
     */
    distinct?: EmailIntegrationScalarFieldEnum | EmailIntegrationScalarFieldEnum[]
  }


  /**
   * EmailIntegration findMany
   */
  export type EmailIntegrationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailIntegration
     */
    select?: EmailIntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailIntegrationInclude<ExtArgs> | null
    /**
     * Filter, which EmailIntegrations to fetch.
     */
    where?: EmailIntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailIntegrations to fetch.
     */
    orderBy?: EmailIntegrationOrderByWithRelationInput | EmailIntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailIntegrations.
     */
    cursor?: EmailIntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailIntegrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailIntegrations.
     */
    skip?: number
    distinct?: EmailIntegrationScalarFieldEnum | EmailIntegrationScalarFieldEnum[]
  }


  /**
   * EmailIntegration create
   */
  export type EmailIntegrationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailIntegration
     */
    select?: EmailIntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailIntegrationInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailIntegration.
     */
    data: XOR<EmailIntegrationCreateInput, EmailIntegrationUncheckedCreateInput>
  }


  /**
   * EmailIntegration createMany
   */
  export type EmailIntegrationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailIntegrations.
     */
    data: EmailIntegrationCreateManyInput | EmailIntegrationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * EmailIntegration update
   */
  export type EmailIntegrationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailIntegration
     */
    select?: EmailIntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailIntegrationInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailIntegration.
     */
    data: XOR<EmailIntegrationUpdateInput, EmailIntegrationUncheckedUpdateInput>
    /**
     * Choose, which EmailIntegration to update.
     */
    where: EmailIntegrationWhereUniqueInput
  }


  /**
   * EmailIntegration updateMany
   */
  export type EmailIntegrationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailIntegrations.
     */
    data: XOR<EmailIntegrationUpdateManyMutationInput, EmailIntegrationUncheckedUpdateManyInput>
    /**
     * Filter which EmailIntegrations to update
     */
    where?: EmailIntegrationWhereInput
  }


  /**
   * EmailIntegration upsert
   */
  export type EmailIntegrationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailIntegration
     */
    select?: EmailIntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailIntegrationInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailIntegration to update in case it exists.
     */
    where: EmailIntegrationWhereUniqueInput
    /**
     * In case the EmailIntegration found by the `where` argument doesn't exist, create a new EmailIntegration with this data.
     */
    create: XOR<EmailIntegrationCreateInput, EmailIntegrationUncheckedCreateInput>
    /**
     * In case the EmailIntegration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailIntegrationUpdateInput, EmailIntegrationUncheckedUpdateInput>
  }


  /**
   * EmailIntegration delete
   */
  export type EmailIntegrationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailIntegration
     */
    select?: EmailIntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailIntegrationInclude<ExtArgs> | null
    /**
     * Filter which EmailIntegration to delete.
     */
    where: EmailIntegrationWhereUniqueInput
  }


  /**
   * EmailIntegration deleteMany
   */
  export type EmailIntegrationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailIntegrations to delete
     */
    where?: EmailIntegrationWhereInput
  }


  /**
   * EmailIntegration without action
   */
  export type EmailIntegrationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailIntegration
     */
    select?: EmailIntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailIntegrationInclude<ExtArgs> | null
  }



  /**
   * Model AIProcessingLog
   */

  export type AggregateAIProcessingLog = {
    _count: AIProcessingLogCountAggregateOutputType | null
    _avg: AIProcessingLogAvgAggregateOutputType | null
    _sum: AIProcessingLogSumAggregateOutputType | null
    _min: AIProcessingLogMinAggregateOutputType | null
    _max: AIProcessingLogMaxAggregateOutputType | null
  }

  export type AIProcessingLogAvgAggregateOutputType = {
    confidenceScore: number | null
    processingTimeMs: number | null
    costUsd: Decimal | null
    tokensUsed: number | null
  }

  export type AIProcessingLogSumAggregateOutputType = {
    confidenceScore: number | null
    processingTimeMs: number | null
    costUsd: Decimal | null
    tokensUsed: number | null
  }

  export type AIProcessingLogMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    processingType: string | null
    provider: string | null
    confidenceScore: number | null
    status: string | null
    errorMessage: string | null
    processingTimeMs: number | null
    costUsd: Decimal | null
    tokensUsed: number | null
    relatedRecordId: string | null
    createdAt: Date | null
  }

  export type AIProcessingLogMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    processingType: string | null
    provider: string | null
    confidenceScore: number | null
    status: string | null
    errorMessage: string | null
    processingTimeMs: number | null
    costUsd: Decimal | null
    tokensUsed: number | null
    relatedRecordId: string | null
    createdAt: Date | null
  }

  export type AIProcessingLogCountAggregateOutputType = {
    id: number
    companyId: number
    processingType: number
    provider: number
    inputData: number
    aiResponse: number
    confidenceScore: number
    status: number
    errorMessage: number
    processingTimeMs: number
    costUsd: number
    tokensUsed: number
    relatedRecordId: number
    createdAt: number
    _all: number
  }


  export type AIProcessingLogAvgAggregateInputType = {
    confidenceScore?: true
    processingTimeMs?: true
    costUsd?: true
    tokensUsed?: true
  }

  export type AIProcessingLogSumAggregateInputType = {
    confidenceScore?: true
    processingTimeMs?: true
    costUsd?: true
    tokensUsed?: true
  }

  export type AIProcessingLogMinAggregateInputType = {
    id?: true
    companyId?: true
    processingType?: true
    provider?: true
    confidenceScore?: true
    status?: true
    errorMessage?: true
    processingTimeMs?: true
    costUsd?: true
    tokensUsed?: true
    relatedRecordId?: true
    createdAt?: true
  }

  export type AIProcessingLogMaxAggregateInputType = {
    id?: true
    companyId?: true
    processingType?: true
    provider?: true
    confidenceScore?: true
    status?: true
    errorMessage?: true
    processingTimeMs?: true
    costUsd?: true
    tokensUsed?: true
    relatedRecordId?: true
    createdAt?: true
  }

  export type AIProcessingLogCountAggregateInputType = {
    id?: true
    companyId?: true
    processingType?: true
    provider?: true
    inputData?: true
    aiResponse?: true
    confidenceScore?: true
    status?: true
    errorMessage?: true
    processingTimeMs?: true
    costUsd?: true
    tokensUsed?: true
    relatedRecordId?: true
    createdAt?: true
    _all?: true
  }

  export type AIProcessingLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIProcessingLog to aggregate.
     */
    where?: AIProcessingLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIProcessingLogs to fetch.
     */
    orderBy?: AIProcessingLogOrderByWithRelationInput | AIProcessingLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AIProcessingLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIProcessingLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIProcessingLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AIProcessingLogs
    **/
    _count?: true | AIProcessingLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AIProcessingLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AIProcessingLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AIProcessingLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AIProcessingLogMaxAggregateInputType
  }

  export type GetAIProcessingLogAggregateType<T extends AIProcessingLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAIProcessingLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAIProcessingLog[P]>
      : GetScalarType<T[P], AggregateAIProcessingLog[P]>
  }




  export type AIProcessingLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AIProcessingLogWhereInput
    orderBy?: AIProcessingLogOrderByWithAggregationInput | AIProcessingLogOrderByWithAggregationInput[]
    by: AIProcessingLogScalarFieldEnum[] | AIProcessingLogScalarFieldEnum
    having?: AIProcessingLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AIProcessingLogCountAggregateInputType | true
    _avg?: AIProcessingLogAvgAggregateInputType
    _sum?: AIProcessingLogSumAggregateInputType
    _min?: AIProcessingLogMinAggregateInputType
    _max?: AIProcessingLogMaxAggregateInputType
  }

  export type AIProcessingLogGroupByOutputType = {
    id: string
    companyId: string
    processingType: string
    provider: string
    inputData: JsonValue | null
    aiResponse: JsonValue | null
    confidenceScore: number | null
    status: string
    errorMessage: string | null
    processingTimeMs: number | null
    costUsd: Decimal | null
    tokensUsed: number | null
    relatedRecordId: string | null
    createdAt: Date
    _count: AIProcessingLogCountAggregateOutputType | null
    _avg: AIProcessingLogAvgAggregateOutputType | null
    _sum: AIProcessingLogSumAggregateOutputType | null
    _min: AIProcessingLogMinAggregateOutputType | null
    _max: AIProcessingLogMaxAggregateOutputType | null
  }

  type GetAIProcessingLogGroupByPayload<T extends AIProcessingLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AIProcessingLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AIProcessingLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AIProcessingLogGroupByOutputType[P]>
            : GetScalarType<T[P], AIProcessingLogGroupByOutputType[P]>
        }
      >
    >


  export type AIProcessingLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    processingType?: boolean
    provider?: boolean
    inputData?: boolean
    aiResponse?: boolean
    confidenceScore?: boolean
    status?: boolean
    errorMessage?: boolean
    processingTimeMs?: boolean
    costUsd?: boolean
    tokensUsed?: boolean
    relatedRecordId?: boolean
    createdAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aIProcessingLog"]>

  export type AIProcessingLogSelectScalar = {
    id?: boolean
    companyId?: boolean
    processingType?: boolean
    provider?: boolean
    inputData?: boolean
    aiResponse?: boolean
    confidenceScore?: boolean
    status?: boolean
    errorMessage?: boolean
    processingTimeMs?: boolean
    costUsd?: boolean
    tokensUsed?: boolean
    relatedRecordId?: boolean
    createdAt?: boolean
  }

  export type AIProcessingLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }


  export type $AIProcessingLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AIProcessingLog"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      processingType: string
      provider: string
      inputData: Prisma.JsonValue | null
      aiResponse: Prisma.JsonValue | null
      confidenceScore: number | null
      status: string
      errorMessage: string | null
      processingTimeMs: number | null
      costUsd: Prisma.Decimal | null
      tokensUsed: number | null
      relatedRecordId: string | null
      createdAt: Date
    }, ExtArgs["result"]["aIProcessingLog"]>
    composites: {}
  }


  type AIProcessingLogGetPayload<S extends boolean | null | undefined | AIProcessingLogDefaultArgs> = $Result.GetResult<Prisma.$AIProcessingLogPayload, S>

  type AIProcessingLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AIProcessingLogFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AIProcessingLogCountAggregateInputType | true
    }

  export interface AIProcessingLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AIProcessingLog'], meta: { name: 'AIProcessingLog' } }
    /**
     * Find zero or one AIProcessingLog that matches the filter.
     * @param {AIProcessingLogFindUniqueArgs} args - Arguments to find a AIProcessingLog
     * @example
     * // Get one AIProcessingLog
     * const aIProcessingLog = await prisma.aIProcessingLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AIProcessingLogFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AIProcessingLogFindUniqueArgs<ExtArgs>>
    ): Prisma__AIProcessingLogClient<$Result.GetResult<Prisma.$AIProcessingLogPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AIProcessingLog that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AIProcessingLogFindUniqueOrThrowArgs} args - Arguments to find a AIProcessingLog
     * @example
     * // Get one AIProcessingLog
     * const aIProcessingLog = await prisma.aIProcessingLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AIProcessingLogFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AIProcessingLogFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AIProcessingLogClient<$Result.GetResult<Prisma.$AIProcessingLogPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AIProcessingLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIProcessingLogFindFirstArgs} args - Arguments to find a AIProcessingLog
     * @example
     * // Get one AIProcessingLog
     * const aIProcessingLog = await prisma.aIProcessingLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AIProcessingLogFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AIProcessingLogFindFirstArgs<ExtArgs>>
    ): Prisma__AIProcessingLogClient<$Result.GetResult<Prisma.$AIProcessingLogPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AIProcessingLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIProcessingLogFindFirstOrThrowArgs} args - Arguments to find a AIProcessingLog
     * @example
     * // Get one AIProcessingLog
     * const aIProcessingLog = await prisma.aIProcessingLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AIProcessingLogFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AIProcessingLogFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AIProcessingLogClient<$Result.GetResult<Prisma.$AIProcessingLogPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AIProcessingLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIProcessingLogFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AIProcessingLogs
     * const aIProcessingLogs = await prisma.aIProcessingLog.findMany()
     * 
     * // Get first 10 AIProcessingLogs
     * const aIProcessingLogs = await prisma.aIProcessingLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aIProcessingLogWithIdOnly = await prisma.aIProcessingLog.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AIProcessingLogFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AIProcessingLogFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIProcessingLogPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AIProcessingLog.
     * @param {AIProcessingLogCreateArgs} args - Arguments to create a AIProcessingLog.
     * @example
     * // Create one AIProcessingLog
     * const AIProcessingLog = await prisma.aIProcessingLog.create({
     *   data: {
     *     // ... data to create a AIProcessingLog
     *   }
     * })
     * 
    **/
    create<T extends AIProcessingLogCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AIProcessingLogCreateArgs<ExtArgs>>
    ): Prisma__AIProcessingLogClient<$Result.GetResult<Prisma.$AIProcessingLogPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AIProcessingLogs.
     *     @param {AIProcessingLogCreateManyArgs} args - Arguments to create many AIProcessingLogs.
     *     @example
     *     // Create many AIProcessingLogs
     *     const aIProcessingLog = await prisma.aIProcessingLog.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AIProcessingLogCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AIProcessingLogCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AIProcessingLog.
     * @param {AIProcessingLogDeleteArgs} args - Arguments to delete one AIProcessingLog.
     * @example
     * // Delete one AIProcessingLog
     * const AIProcessingLog = await prisma.aIProcessingLog.delete({
     *   where: {
     *     // ... filter to delete one AIProcessingLog
     *   }
     * })
     * 
    **/
    delete<T extends AIProcessingLogDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AIProcessingLogDeleteArgs<ExtArgs>>
    ): Prisma__AIProcessingLogClient<$Result.GetResult<Prisma.$AIProcessingLogPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AIProcessingLog.
     * @param {AIProcessingLogUpdateArgs} args - Arguments to update one AIProcessingLog.
     * @example
     * // Update one AIProcessingLog
     * const aIProcessingLog = await prisma.aIProcessingLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AIProcessingLogUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AIProcessingLogUpdateArgs<ExtArgs>>
    ): Prisma__AIProcessingLogClient<$Result.GetResult<Prisma.$AIProcessingLogPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AIProcessingLogs.
     * @param {AIProcessingLogDeleteManyArgs} args - Arguments to filter AIProcessingLogs to delete.
     * @example
     * // Delete a few AIProcessingLogs
     * const { count } = await prisma.aIProcessingLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AIProcessingLogDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AIProcessingLogDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AIProcessingLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIProcessingLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AIProcessingLogs
     * const aIProcessingLog = await prisma.aIProcessingLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AIProcessingLogUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AIProcessingLogUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AIProcessingLog.
     * @param {AIProcessingLogUpsertArgs} args - Arguments to update or create a AIProcessingLog.
     * @example
     * // Update or create a AIProcessingLog
     * const aIProcessingLog = await prisma.aIProcessingLog.upsert({
     *   create: {
     *     // ... data to create a AIProcessingLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AIProcessingLog we want to update
     *   }
     * })
    **/
    upsert<T extends AIProcessingLogUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AIProcessingLogUpsertArgs<ExtArgs>>
    ): Prisma__AIProcessingLogClient<$Result.GetResult<Prisma.$AIProcessingLogPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AIProcessingLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIProcessingLogCountArgs} args - Arguments to filter AIProcessingLogs to count.
     * @example
     * // Count the number of AIProcessingLogs
     * const count = await prisma.aIProcessingLog.count({
     *   where: {
     *     // ... the filter for the AIProcessingLogs we want to count
     *   }
     * })
    **/
    count<T extends AIProcessingLogCountArgs>(
      args?: Subset<T, AIProcessingLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AIProcessingLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AIProcessingLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIProcessingLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AIProcessingLogAggregateArgs>(args: Subset<T, AIProcessingLogAggregateArgs>): Prisma.PrismaPromise<GetAIProcessingLogAggregateType<T>>

    /**
     * Group by AIProcessingLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIProcessingLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AIProcessingLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AIProcessingLogGroupByArgs['orderBy'] }
        : { orderBy?: AIProcessingLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AIProcessingLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAIProcessingLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AIProcessingLog model
   */
  readonly fields: AIProcessingLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AIProcessingLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AIProcessingLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AIProcessingLog model
   */ 
  interface AIProcessingLogFieldRefs {
    readonly id: FieldRef<"AIProcessingLog", 'String'>
    readonly companyId: FieldRef<"AIProcessingLog", 'String'>
    readonly processingType: FieldRef<"AIProcessingLog", 'String'>
    readonly provider: FieldRef<"AIProcessingLog", 'String'>
    readonly inputData: FieldRef<"AIProcessingLog", 'Json'>
    readonly aiResponse: FieldRef<"AIProcessingLog", 'Json'>
    readonly confidenceScore: FieldRef<"AIProcessingLog", 'Float'>
    readonly status: FieldRef<"AIProcessingLog", 'String'>
    readonly errorMessage: FieldRef<"AIProcessingLog", 'String'>
    readonly processingTimeMs: FieldRef<"AIProcessingLog", 'Int'>
    readonly costUsd: FieldRef<"AIProcessingLog", 'Decimal'>
    readonly tokensUsed: FieldRef<"AIProcessingLog", 'Int'>
    readonly relatedRecordId: FieldRef<"AIProcessingLog", 'String'>
    readonly createdAt: FieldRef<"AIProcessingLog", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * AIProcessingLog findUnique
   */
  export type AIProcessingLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProcessingLog
     */
    select?: AIProcessingLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProcessingLogInclude<ExtArgs> | null
    /**
     * Filter, which AIProcessingLog to fetch.
     */
    where: AIProcessingLogWhereUniqueInput
  }


  /**
   * AIProcessingLog findUniqueOrThrow
   */
  export type AIProcessingLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProcessingLog
     */
    select?: AIProcessingLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProcessingLogInclude<ExtArgs> | null
    /**
     * Filter, which AIProcessingLog to fetch.
     */
    where: AIProcessingLogWhereUniqueInput
  }


  /**
   * AIProcessingLog findFirst
   */
  export type AIProcessingLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProcessingLog
     */
    select?: AIProcessingLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProcessingLogInclude<ExtArgs> | null
    /**
     * Filter, which AIProcessingLog to fetch.
     */
    where?: AIProcessingLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIProcessingLogs to fetch.
     */
    orderBy?: AIProcessingLogOrderByWithRelationInput | AIProcessingLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIProcessingLogs.
     */
    cursor?: AIProcessingLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIProcessingLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIProcessingLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIProcessingLogs.
     */
    distinct?: AIProcessingLogScalarFieldEnum | AIProcessingLogScalarFieldEnum[]
  }


  /**
   * AIProcessingLog findFirstOrThrow
   */
  export type AIProcessingLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProcessingLog
     */
    select?: AIProcessingLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProcessingLogInclude<ExtArgs> | null
    /**
     * Filter, which AIProcessingLog to fetch.
     */
    where?: AIProcessingLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIProcessingLogs to fetch.
     */
    orderBy?: AIProcessingLogOrderByWithRelationInput | AIProcessingLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIProcessingLogs.
     */
    cursor?: AIProcessingLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIProcessingLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIProcessingLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIProcessingLogs.
     */
    distinct?: AIProcessingLogScalarFieldEnum | AIProcessingLogScalarFieldEnum[]
  }


  /**
   * AIProcessingLog findMany
   */
  export type AIProcessingLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProcessingLog
     */
    select?: AIProcessingLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProcessingLogInclude<ExtArgs> | null
    /**
     * Filter, which AIProcessingLogs to fetch.
     */
    where?: AIProcessingLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIProcessingLogs to fetch.
     */
    orderBy?: AIProcessingLogOrderByWithRelationInput | AIProcessingLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AIProcessingLogs.
     */
    cursor?: AIProcessingLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIProcessingLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIProcessingLogs.
     */
    skip?: number
    distinct?: AIProcessingLogScalarFieldEnum | AIProcessingLogScalarFieldEnum[]
  }


  /**
   * AIProcessingLog create
   */
  export type AIProcessingLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProcessingLog
     */
    select?: AIProcessingLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProcessingLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AIProcessingLog.
     */
    data: XOR<AIProcessingLogCreateInput, AIProcessingLogUncheckedCreateInput>
  }


  /**
   * AIProcessingLog createMany
   */
  export type AIProcessingLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AIProcessingLogs.
     */
    data: AIProcessingLogCreateManyInput | AIProcessingLogCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * AIProcessingLog update
   */
  export type AIProcessingLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProcessingLog
     */
    select?: AIProcessingLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProcessingLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AIProcessingLog.
     */
    data: XOR<AIProcessingLogUpdateInput, AIProcessingLogUncheckedUpdateInput>
    /**
     * Choose, which AIProcessingLog to update.
     */
    where: AIProcessingLogWhereUniqueInput
  }


  /**
   * AIProcessingLog updateMany
   */
  export type AIProcessingLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AIProcessingLogs.
     */
    data: XOR<AIProcessingLogUpdateManyMutationInput, AIProcessingLogUncheckedUpdateManyInput>
    /**
     * Filter which AIProcessingLogs to update
     */
    where?: AIProcessingLogWhereInput
  }


  /**
   * AIProcessingLog upsert
   */
  export type AIProcessingLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProcessingLog
     */
    select?: AIProcessingLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProcessingLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AIProcessingLog to update in case it exists.
     */
    where: AIProcessingLogWhereUniqueInput
    /**
     * In case the AIProcessingLog found by the `where` argument doesn't exist, create a new AIProcessingLog with this data.
     */
    create: XOR<AIProcessingLogCreateInput, AIProcessingLogUncheckedCreateInput>
    /**
     * In case the AIProcessingLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AIProcessingLogUpdateInput, AIProcessingLogUncheckedUpdateInput>
  }


  /**
   * AIProcessingLog delete
   */
  export type AIProcessingLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProcessingLog
     */
    select?: AIProcessingLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProcessingLogInclude<ExtArgs> | null
    /**
     * Filter which AIProcessingLog to delete.
     */
    where: AIProcessingLogWhereUniqueInput
  }


  /**
   * AIProcessingLog deleteMany
   */
  export type AIProcessingLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIProcessingLogs to delete
     */
    where?: AIProcessingLogWhereInput
  }


  /**
   * AIProcessingLog without action
   */
  export type AIProcessingLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProcessingLog
     */
    select?: AIProcessingLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProcessingLogInclude<ExtArgs> | null
  }



  /**
   * Model Subscription
   */

  export type AggregateSubscription = {
    _count: SubscriptionCountAggregateOutputType | null
    _avg: SubscriptionAvgAggregateOutputType | null
    _sum: SubscriptionSumAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  export type SubscriptionAvgAggregateOutputType = {
    planPrice: Decimal | null
  }

  export type SubscriptionSumAggregateOutputType = {
    planPrice: Decimal | null
  }

  export type SubscriptionMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    stripeSubscriptionId: string | null
    status: string | null
    currentPeriodStart: Date | null
    currentPeriodEnd: Date | null
    planName: string | null
    planPrice: Decimal | null
    planInterval: string | null
    cancelAtPeriodEnd: boolean | null
    cancelledAt: Date | null
    trialStart: Date | null
    trialEnd: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    stripeSubscriptionId: string | null
    status: string | null
    currentPeriodStart: Date | null
    currentPeriodEnd: Date | null
    planName: string | null
    planPrice: Decimal | null
    planInterval: string | null
    cancelAtPeriodEnd: boolean | null
    cancelledAt: Date | null
    trialStart: Date | null
    trialEnd: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionCountAggregateOutputType = {
    id: number
    companyId: number
    stripeSubscriptionId: number
    status: number
    currentPeriodStart: number
    currentPeriodEnd: number
    planName: number
    planPrice: number
    planInterval: number
    cancelAtPeriodEnd: number
    cancelledAt: number
    trialStart: number
    trialEnd: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubscriptionAvgAggregateInputType = {
    planPrice?: true
  }

  export type SubscriptionSumAggregateInputType = {
    planPrice?: true
  }

  export type SubscriptionMinAggregateInputType = {
    id?: true
    companyId?: true
    stripeSubscriptionId?: true
    status?: true
    currentPeriodStart?: true
    currentPeriodEnd?: true
    planName?: true
    planPrice?: true
    planInterval?: true
    cancelAtPeriodEnd?: true
    cancelledAt?: true
    trialStart?: true
    trialEnd?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionMaxAggregateInputType = {
    id?: true
    companyId?: true
    stripeSubscriptionId?: true
    status?: true
    currentPeriodStart?: true
    currentPeriodEnd?: true
    planName?: true
    planPrice?: true
    planInterval?: true
    cancelAtPeriodEnd?: true
    cancelledAt?: true
    trialStart?: true
    trialEnd?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionCountAggregateInputType = {
    id?: true
    companyId?: true
    stripeSubscriptionId?: true
    status?: true
    currentPeriodStart?: true
    currentPeriodEnd?: true
    planName?: true
    planPrice?: true
    planInterval?: true
    cancelAtPeriodEnd?: true
    cancelledAt?: true
    trialStart?: true
    trialEnd?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscription to aggregate.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subscriptions
    **/
    _count?: true | SubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubscriptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubscriptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionMaxAggregateInputType
  }

  export type GetSubscriptionAggregateType<T extends SubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscription[P]>
      : GetScalarType<T[P], AggregateSubscription[P]>
  }




  export type SubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithAggregationInput | SubscriptionOrderByWithAggregationInput[]
    by: SubscriptionScalarFieldEnum[] | SubscriptionScalarFieldEnum
    having?: SubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionCountAggregateInputType | true
    _avg?: SubscriptionAvgAggregateInputType
    _sum?: SubscriptionSumAggregateInputType
    _min?: SubscriptionMinAggregateInputType
    _max?: SubscriptionMaxAggregateInputType
  }

  export type SubscriptionGroupByOutputType = {
    id: string
    companyId: string
    stripeSubscriptionId: string
    status: string
    currentPeriodStart: Date
    currentPeriodEnd: Date
    planName: string
    planPrice: Decimal
    planInterval: string
    cancelAtPeriodEnd: boolean
    cancelledAt: Date | null
    trialStart: Date | null
    trialEnd: Date | null
    createdAt: Date
    updatedAt: Date
    _count: SubscriptionCountAggregateOutputType | null
    _avg: SubscriptionAvgAggregateOutputType | null
    _sum: SubscriptionSumAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  type GetSubscriptionGroupByPayload<T extends SubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    stripeSubscriptionId?: boolean
    status?: boolean
    currentPeriodStart?: boolean
    currentPeriodEnd?: boolean
    planName?: boolean
    planPrice?: boolean
    planInterval?: boolean
    cancelAtPeriodEnd?: boolean
    cancelledAt?: boolean
    trialStart?: boolean
    trialEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectScalar = {
    id?: boolean
    companyId?: boolean
    stripeSubscriptionId?: boolean
    status?: boolean
    currentPeriodStart?: boolean
    currentPeriodEnd?: boolean
    planName?: boolean
    planPrice?: boolean
    planInterval?: boolean
    cancelAtPeriodEnd?: boolean
    cancelledAt?: boolean
    trialStart?: boolean
    trialEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }


  export type $SubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subscription"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      stripeSubscriptionId: string
      status: string
      currentPeriodStart: Date
      currentPeriodEnd: Date
      planName: string
      planPrice: Prisma.Decimal
      planInterval: string
      cancelAtPeriodEnd: boolean
      cancelledAt: Date | null
      trialStart: Date | null
      trialEnd: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subscription"]>
    composites: {}
  }


  type SubscriptionGetPayload<S extends boolean | null | undefined | SubscriptionDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPayload, S>

  type SubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubscriptionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SubscriptionCountAggregateInputType | true
    }

  export interface SubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subscription'], meta: { name: 'Subscription' } }
    /**
     * Find zero or one Subscription that matches the filter.
     * @param {SubscriptionFindUniqueArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubscriptionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionFindUniqueArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Subscription that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SubscriptionFindUniqueOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SubscriptionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Subscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubscriptionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionFindFirstArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Subscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SubscriptionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Subscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subscriptions
     * const subscriptions = await prisma.subscription.findMany()
     * 
     * // Get first 10 Subscriptions
     * const subscriptions = await prisma.subscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SubscriptionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Subscription.
     * @param {SubscriptionCreateArgs} args - Arguments to create a Subscription.
     * @example
     * // Create one Subscription
     * const Subscription = await prisma.subscription.create({
     *   data: {
     *     // ... data to create a Subscription
     *   }
     * })
     * 
    **/
    create<T extends SubscriptionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionCreateArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Subscriptions.
     *     @param {SubscriptionCreateManyArgs} args - Arguments to create many Subscriptions.
     *     @example
     *     // Create many Subscriptions
     *     const subscription = await prisma.subscription.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SubscriptionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Subscription.
     * @param {SubscriptionDeleteArgs} args - Arguments to delete one Subscription.
     * @example
     * // Delete one Subscription
     * const Subscription = await prisma.subscription.delete({
     *   where: {
     *     // ... filter to delete one Subscription
     *   }
     * })
     * 
    **/
    delete<T extends SubscriptionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionDeleteArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Subscription.
     * @param {SubscriptionUpdateArgs} args - Arguments to update one Subscription.
     * @example
     * // Update one Subscription
     * const subscription = await prisma.subscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubscriptionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionUpdateArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Subscriptions.
     * @param {SubscriptionDeleteManyArgs} args - Arguments to filter Subscriptions to delete.
     * @example
     * // Delete a few Subscriptions
     * const { count } = await prisma.subscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubscriptionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriptionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubscriptionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subscription.
     * @param {SubscriptionUpsertArgs} args - Arguments to update or create a Subscription.
     * @example
     * // Update or create a Subscription
     * const subscription = await prisma.subscription.upsert({
     *   create: {
     *     // ... data to create a Subscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subscription we want to update
     *   }
     * })
    **/
    upsert<T extends SubscriptionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriptionUpsertArgs<ExtArgs>>
    ): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionCountArgs} args - Arguments to filter Subscriptions to count.
     * @example
     * // Count the number of Subscriptions
     * const count = await prisma.subscription.count({
     *   where: {
     *     // ... the filter for the Subscriptions we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionCountArgs>(
      args?: Subset<T, SubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionAggregateArgs>(args: Subset<T, SubscriptionAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionAggregateType<T>>

    /**
     * Group by Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subscription model
   */
  readonly fields: SubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Subscription model
   */ 
  interface SubscriptionFieldRefs {
    readonly id: FieldRef<"Subscription", 'String'>
    readonly companyId: FieldRef<"Subscription", 'String'>
    readonly stripeSubscriptionId: FieldRef<"Subscription", 'String'>
    readonly status: FieldRef<"Subscription", 'String'>
    readonly currentPeriodStart: FieldRef<"Subscription", 'DateTime'>
    readonly currentPeriodEnd: FieldRef<"Subscription", 'DateTime'>
    readonly planName: FieldRef<"Subscription", 'String'>
    readonly planPrice: FieldRef<"Subscription", 'Decimal'>
    readonly planInterval: FieldRef<"Subscription", 'String'>
    readonly cancelAtPeriodEnd: FieldRef<"Subscription", 'Boolean'>
    readonly cancelledAt: FieldRef<"Subscription", 'DateTime'>
    readonly trialStart: FieldRef<"Subscription", 'DateTime'>
    readonly trialEnd: FieldRef<"Subscription", 'DateTime'>
    readonly createdAt: FieldRef<"Subscription", 'DateTime'>
    readonly updatedAt: FieldRef<"Subscription", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Subscription findUnique
   */
  export type SubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }


  /**
   * Subscription findUniqueOrThrow
   */
  export type SubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }


  /**
   * Subscription findFirst
   */
  export type SubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }


  /**
   * Subscription findFirstOrThrow
   */
  export type SubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }


  /**
   * Subscription findMany
   */
  export type SubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscriptions to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }


  /**
   * Subscription create
   */
  export type SubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Subscription.
     */
    data: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
  }


  /**
   * Subscription createMany
   */
  export type SubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Subscription update
   */
  export type SubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Subscription.
     */
    data: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
    /**
     * Choose, which Subscription to update.
     */
    where: SubscriptionWhereUniqueInput
  }


  /**
   * Subscription updateMany
   */
  export type SubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
  }


  /**
   * Subscription upsert
   */
  export type SubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Subscription to update in case it exists.
     */
    where: SubscriptionWhereUniqueInput
    /**
     * In case the Subscription found by the `where` argument doesn't exist, create a new Subscription with this data.
     */
    create: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
    /**
     * In case the Subscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
  }


  /**
   * Subscription delete
   */
  export type SubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter which Subscription to delete.
     */
    where: SubscriptionWhereUniqueInput
  }


  /**
   * Subscription deleteMany
   */
  export type SubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscriptions to delete
     */
    where?: SubscriptionWhereInput
  }


  /**
   * Subscription without action
   */
  export type SubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriptionInclude<ExtArgs> | null
  }



  /**
   * Model UsageMetrics
   */

  export type AggregateUsageMetrics = {
    _count: UsageMetricsCountAggregateOutputType | null
    _avg: UsageMetricsAvgAggregateOutputType | null
    _sum: UsageMetricsSumAggregateOutputType | null
    _min: UsageMetricsMinAggregateOutputType | null
    _max: UsageMetricsMaxAggregateOutputType | null
  }

  export type UsageMetricsAvgAggregateOutputType = {
    metricValue: number | null
  }

  export type UsageMetricsSumAggregateOutputType = {
    metricValue: number | null
  }

  export type UsageMetricsMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    metricType: string | null
    metricValue: number | null
    periodStart: Date | null
    periodEnd: Date | null
    createdAt: Date | null
  }

  export type UsageMetricsMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    metricType: string | null
    metricValue: number | null
    periodStart: Date | null
    periodEnd: Date | null
    createdAt: Date | null
  }

  export type UsageMetricsCountAggregateOutputType = {
    id: number
    companyId: number
    metricType: number
    metricValue: number
    periodStart: number
    periodEnd: number
    createdAt: number
    _all: number
  }


  export type UsageMetricsAvgAggregateInputType = {
    metricValue?: true
  }

  export type UsageMetricsSumAggregateInputType = {
    metricValue?: true
  }

  export type UsageMetricsMinAggregateInputType = {
    id?: true
    companyId?: true
    metricType?: true
    metricValue?: true
    periodStart?: true
    periodEnd?: true
    createdAt?: true
  }

  export type UsageMetricsMaxAggregateInputType = {
    id?: true
    companyId?: true
    metricType?: true
    metricValue?: true
    periodStart?: true
    periodEnd?: true
    createdAt?: true
  }

  export type UsageMetricsCountAggregateInputType = {
    id?: true
    companyId?: true
    metricType?: true
    metricValue?: true
    periodStart?: true
    periodEnd?: true
    createdAt?: true
    _all?: true
  }

  export type UsageMetricsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsageMetrics to aggregate.
     */
    where?: UsageMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageMetrics to fetch.
     */
    orderBy?: UsageMetricsOrderByWithRelationInput | UsageMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsageMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UsageMetrics
    **/
    _count?: true | UsageMetricsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsageMetricsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsageMetricsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsageMetricsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsageMetricsMaxAggregateInputType
  }

  export type GetUsageMetricsAggregateType<T extends UsageMetricsAggregateArgs> = {
        [P in keyof T & keyof AggregateUsageMetrics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsageMetrics[P]>
      : GetScalarType<T[P], AggregateUsageMetrics[P]>
  }




  export type UsageMetricsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsageMetricsWhereInput
    orderBy?: UsageMetricsOrderByWithAggregationInput | UsageMetricsOrderByWithAggregationInput[]
    by: UsageMetricsScalarFieldEnum[] | UsageMetricsScalarFieldEnum
    having?: UsageMetricsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsageMetricsCountAggregateInputType | true
    _avg?: UsageMetricsAvgAggregateInputType
    _sum?: UsageMetricsSumAggregateInputType
    _min?: UsageMetricsMinAggregateInputType
    _max?: UsageMetricsMaxAggregateInputType
  }

  export type UsageMetricsGroupByOutputType = {
    id: string
    companyId: string
    metricType: string
    metricValue: number
    periodStart: Date
    periodEnd: Date
    createdAt: Date
    _count: UsageMetricsCountAggregateOutputType | null
    _avg: UsageMetricsAvgAggregateOutputType | null
    _sum: UsageMetricsSumAggregateOutputType | null
    _min: UsageMetricsMinAggregateOutputType | null
    _max: UsageMetricsMaxAggregateOutputType | null
  }

  type GetUsageMetricsGroupByPayload<T extends UsageMetricsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsageMetricsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsageMetricsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsageMetricsGroupByOutputType[P]>
            : GetScalarType<T[P], UsageMetricsGroupByOutputType[P]>
        }
      >
    >


  export type UsageMetricsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    metricType?: boolean
    metricValue?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    createdAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usageMetrics"]>

  export type UsageMetricsSelectScalar = {
    id?: boolean
    companyId?: boolean
    metricType?: boolean
    metricValue?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    createdAt?: boolean
  }

  export type UsageMetricsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }


  export type $UsageMetricsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UsageMetrics"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      metricType: string
      metricValue: number
      periodStart: Date
      periodEnd: Date
      createdAt: Date
    }, ExtArgs["result"]["usageMetrics"]>
    composites: {}
  }


  type UsageMetricsGetPayload<S extends boolean | null | undefined | UsageMetricsDefaultArgs> = $Result.GetResult<Prisma.$UsageMetricsPayload, S>

  type UsageMetricsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsageMetricsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UsageMetricsCountAggregateInputType | true
    }

  export interface UsageMetricsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UsageMetrics'], meta: { name: 'UsageMetrics' } }
    /**
     * Find zero or one UsageMetrics that matches the filter.
     * @param {UsageMetricsFindUniqueArgs} args - Arguments to find a UsageMetrics
     * @example
     * // Get one UsageMetrics
     * const usageMetrics = await prisma.usageMetrics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsageMetricsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsageMetricsFindUniqueArgs<ExtArgs>>
    ): Prisma__UsageMetricsClient<$Result.GetResult<Prisma.$UsageMetricsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UsageMetrics that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsageMetricsFindUniqueOrThrowArgs} args - Arguments to find a UsageMetrics
     * @example
     * // Get one UsageMetrics
     * const usageMetrics = await prisma.usageMetrics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsageMetricsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsageMetricsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsageMetricsClient<$Result.GetResult<Prisma.$UsageMetricsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UsageMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageMetricsFindFirstArgs} args - Arguments to find a UsageMetrics
     * @example
     * // Get one UsageMetrics
     * const usageMetrics = await prisma.usageMetrics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsageMetricsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsageMetricsFindFirstArgs<ExtArgs>>
    ): Prisma__UsageMetricsClient<$Result.GetResult<Prisma.$UsageMetricsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UsageMetrics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageMetricsFindFirstOrThrowArgs} args - Arguments to find a UsageMetrics
     * @example
     * // Get one UsageMetrics
     * const usageMetrics = await prisma.usageMetrics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsageMetricsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsageMetricsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsageMetricsClient<$Result.GetResult<Prisma.$UsageMetricsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UsageMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageMetricsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsageMetrics
     * const usageMetrics = await prisma.usageMetrics.findMany()
     * 
     * // Get first 10 UsageMetrics
     * const usageMetrics = await prisma.usageMetrics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usageMetricsWithIdOnly = await prisma.usageMetrics.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsageMetricsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsageMetricsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageMetricsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UsageMetrics.
     * @param {UsageMetricsCreateArgs} args - Arguments to create a UsageMetrics.
     * @example
     * // Create one UsageMetrics
     * const UsageMetrics = await prisma.usageMetrics.create({
     *   data: {
     *     // ... data to create a UsageMetrics
     *   }
     * })
     * 
    **/
    create<T extends UsageMetricsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsageMetricsCreateArgs<ExtArgs>>
    ): Prisma__UsageMetricsClient<$Result.GetResult<Prisma.$UsageMetricsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UsageMetrics.
     *     @param {UsageMetricsCreateManyArgs} args - Arguments to create many UsageMetrics.
     *     @example
     *     // Create many UsageMetrics
     *     const usageMetrics = await prisma.usageMetrics.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsageMetricsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsageMetricsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UsageMetrics.
     * @param {UsageMetricsDeleteArgs} args - Arguments to delete one UsageMetrics.
     * @example
     * // Delete one UsageMetrics
     * const UsageMetrics = await prisma.usageMetrics.delete({
     *   where: {
     *     // ... filter to delete one UsageMetrics
     *   }
     * })
     * 
    **/
    delete<T extends UsageMetricsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsageMetricsDeleteArgs<ExtArgs>>
    ): Prisma__UsageMetricsClient<$Result.GetResult<Prisma.$UsageMetricsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UsageMetrics.
     * @param {UsageMetricsUpdateArgs} args - Arguments to update one UsageMetrics.
     * @example
     * // Update one UsageMetrics
     * const usageMetrics = await prisma.usageMetrics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsageMetricsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsageMetricsUpdateArgs<ExtArgs>>
    ): Prisma__UsageMetricsClient<$Result.GetResult<Prisma.$UsageMetricsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UsageMetrics.
     * @param {UsageMetricsDeleteManyArgs} args - Arguments to filter UsageMetrics to delete.
     * @example
     * // Delete a few UsageMetrics
     * const { count } = await prisma.usageMetrics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsageMetricsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsageMetricsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsageMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageMetricsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsageMetrics
     * const usageMetrics = await prisma.usageMetrics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsageMetricsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsageMetricsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UsageMetrics.
     * @param {UsageMetricsUpsertArgs} args - Arguments to update or create a UsageMetrics.
     * @example
     * // Update or create a UsageMetrics
     * const usageMetrics = await prisma.usageMetrics.upsert({
     *   create: {
     *     // ... data to create a UsageMetrics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsageMetrics we want to update
     *   }
     * })
    **/
    upsert<T extends UsageMetricsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsageMetricsUpsertArgs<ExtArgs>>
    ): Prisma__UsageMetricsClient<$Result.GetResult<Prisma.$UsageMetricsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UsageMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageMetricsCountArgs} args - Arguments to filter UsageMetrics to count.
     * @example
     * // Count the number of UsageMetrics
     * const count = await prisma.usageMetrics.count({
     *   where: {
     *     // ... the filter for the UsageMetrics we want to count
     *   }
     * })
    **/
    count<T extends UsageMetricsCountArgs>(
      args?: Subset<T, UsageMetricsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsageMetricsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsageMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageMetricsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsageMetricsAggregateArgs>(args: Subset<T, UsageMetricsAggregateArgs>): Prisma.PrismaPromise<GetUsageMetricsAggregateType<T>>

    /**
     * Group by UsageMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageMetricsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsageMetricsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsageMetricsGroupByArgs['orderBy'] }
        : { orderBy?: UsageMetricsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsageMetricsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsageMetricsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UsageMetrics model
   */
  readonly fields: UsageMetricsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UsageMetrics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsageMetricsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UsageMetrics model
   */ 
  interface UsageMetricsFieldRefs {
    readonly id: FieldRef<"UsageMetrics", 'String'>
    readonly companyId: FieldRef<"UsageMetrics", 'String'>
    readonly metricType: FieldRef<"UsageMetrics", 'String'>
    readonly metricValue: FieldRef<"UsageMetrics", 'Int'>
    readonly periodStart: FieldRef<"UsageMetrics", 'DateTime'>
    readonly periodEnd: FieldRef<"UsageMetrics", 'DateTime'>
    readonly createdAt: FieldRef<"UsageMetrics", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * UsageMetrics findUnique
   */
  export type UsageMetricsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageMetrics
     */
    select?: UsageMetricsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsageMetricsInclude<ExtArgs> | null
    /**
     * Filter, which UsageMetrics to fetch.
     */
    where: UsageMetricsWhereUniqueInput
  }


  /**
   * UsageMetrics findUniqueOrThrow
   */
  export type UsageMetricsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageMetrics
     */
    select?: UsageMetricsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsageMetricsInclude<ExtArgs> | null
    /**
     * Filter, which UsageMetrics to fetch.
     */
    where: UsageMetricsWhereUniqueInput
  }


  /**
   * UsageMetrics findFirst
   */
  export type UsageMetricsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageMetrics
     */
    select?: UsageMetricsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsageMetricsInclude<ExtArgs> | null
    /**
     * Filter, which UsageMetrics to fetch.
     */
    where?: UsageMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageMetrics to fetch.
     */
    orderBy?: UsageMetricsOrderByWithRelationInput | UsageMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsageMetrics.
     */
    cursor?: UsageMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsageMetrics.
     */
    distinct?: UsageMetricsScalarFieldEnum | UsageMetricsScalarFieldEnum[]
  }


  /**
   * UsageMetrics findFirstOrThrow
   */
  export type UsageMetricsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageMetrics
     */
    select?: UsageMetricsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsageMetricsInclude<ExtArgs> | null
    /**
     * Filter, which UsageMetrics to fetch.
     */
    where?: UsageMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageMetrics to fetch.
     */
    orderBy?: UsageMetricsOrderByWithRelationInput | UsageMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsageMetrics.
     */
    cursor?: UsageMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsageMetrics.
     */
    distinct?: UsageMetricsScalarFieldEnum | UsageMetricsScalarFieldEnum[]
  }


  /**
   * UsageMetrics findMany
   */
  export type UsageMetricsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageMetrics
     */
    select?: UsageMetricsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsageMetricsInclude<ExtArgs> | null
    /**
     * Filter, which UsageMetrics to fetch.
     */
    where?: UsageMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageMetrics to fetch.
     */
    orderBy?: UsageMetricsOrderByWithRelationInput | UsageMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UsageMetrics.
     */
    cursor?: UsageMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageMetrics.
     */
    skip?: number
    distinct?: UsageMetricsScalarFieldEnum | UsageMetricsScalarFieldEnum[]
  }


  /**
   * UsageMetrics create
   */
  export type UsageMetricsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageMetrics
     */
    select?: UsageMetricsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsageMetricsInclude<ExtArgs> | null
    /**
     * The data needed to create a UsageMetrics.
     */
    data: XOR<UsageMetricsCreateInput, UsageMetricsUncheckedCreateInput>
  }


  /**
   * UsageMetrics createMany
   */
  export type UsageMetricsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UsageMetrics.
     */
    data: UsageMetricsCreateManyInput | UsageMetricsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * UsageMetrics update
   */
  export type UsageMetricsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageMetrics
     */
    select?: UsageMetricsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsageMetricsInclude<ExtArgs> | null
    /**
     * The data needed to update a UsageMetrics.
     */
    data: XOR<UsageMetricsUpdateInput, UsageMetricsUncheckedUpdateInput>
    /**
     * Choose, which UsageMetrics to update.
     */
    where: UsageMetricsWhereUniqueInput
  }


  /**
   * UsageMetrics updateMany
   */
  export type UsageMetricsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UsageMetrics.
     */
    data: XOR<UsageMetricsUpdateManyMutationInput, UsageMetricsUncheckedUpdateManyInput>
    /**
     * Filter which UsageMetrics to update
     */
    where?: UsageMetricsWhereInput
  }


  /**
   * UsageMetrics upsert
   */
  export type UsageMetricsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageMetrics
     */
    select?: UsageMetricsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsageMetricsInclude<ExtArgs> | null
    /**
     * The filter to search for the UsageMetrics to update in case it exists.
     */
    where: UsageMetricsWhereUniqueInput
    /**
     * In case the UsageMetrics found by the `where` argument doesn't exist, create a new UsageMetrics with this data.
     */
    create: XOR<UsageMetricsCreateInput, UsageMetricsUncheckedCreateInput>
    /**
     * In case the UsageMetrics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsageMetricsUpdateInput, UsageMetricsUncheckedUpdateInput>
  }


  /**
   * UsageMetrics delete
   */
  export type UsageMetricsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageMetrics
     */
    select?: UsageMetricsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsageMetricsInclude<ExtArgs> | null
    /**
     * Filter which UsageMetrics to delete.
     */
    where: UsageMetricsWhereUniqueInput
  }


  /**
   * UsageMetrics deleteMany
   */
  export type UsageMetricsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsageMetrics to delete
     */
    where?: UsageMetricsWhereInput
  }


  /**
   * UsageMetrics without action
   */
  export type UsageMetricsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageMetrics
     */
    select?: UsageMetricsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsageMetricsInclude<ExtArgs> | null
  }



  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    tableName: string | null
    recordId: string | null
    action: string | null
    changedBy: string | null
    changedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    tableName: string | null
    recordId: string | null
    action: string | null
    changedBy: string | null
    changedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    companyId: number
    tableName: number
    recordId: number
    action: number
    oldValues: number
    newValues: number
    changedBy: number
    changedAt: number
    ipAddress: number
    userAgent: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    companyId?: true
    tableName?: true
    recordId?: true
    action?: true
    changedBy?: true
    changedAt?: true
    ipAddress?: true
    userAgent?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    companyId?: true
    tableName?: true
    recordId?: true
    action?: true
    changedBy?: true
    changedAt?: true
    ipAddress?: true
    userAgent?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    companyId?: true
    tableName?: true
    recordId?: true
    action?: true
    oldValues?: true
    newValues?: true
    changedBy?: true
    changedAt?: true
    ipAddress?: true
    userAgent?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    companyId: string
    tableName: string
    recordId: string
    action: string
    oldValues: JsonValue | null
    newValues: JsonValue | null
    changedBy: string | null
    changedAt: Date
    ipAddress: string | null
    userAgent: string | null
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    tableName?: boolean
    recordId?: boolean
    action?: boolean
    oldValues?: boolean
    newValues?: boolean
    changedBy?: boolean
    changedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    companyId?: boolean
    tableName?: boolean
    recordId?: boolean
    action?: boolean
    oldValues?: boolean
    newValues?: boolean
    changedBy?: boolean
    changedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
  }

  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }


  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      tableName: string
      recordId: string
      action: string
      oldValues: Prisma.JsonValue | null
      newValues: Prisma.JsonValue | null
      changedBy: string | null
      changedAt: Date
      ipAddress: string | null
      userAgent: string | null
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }


  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AuditLogFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>
    ): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AuditLogFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>
    ): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AuditLogFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
    **/
    create<T extends AuditLogCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>
    ): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AuditLogs.
     *     @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     *     @example
     *     // Create many AuditLogs
     *     const auditLog = await prisma.auditLog.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AuditLogCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
    **/
    delete<T extends AuditLogDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>
    ): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AuditLogUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>
    ): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AuditLogDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AuditLogUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
    **/
    upsert<T extends AuditLogUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>
    ): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly companyId: FieldRef<"AuditLog", 'String'>
    readonly tableName: FieldRef<"AuditLog", 'String'>
    readonly recordId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly oldValues: FieldRef<"AuditLog", 'Json'>
    readonly newValues: FieldRef<"AuditLog", 'Json'>
    readonly changedBy: FieldRef<"AuditLog", 'String'>
    readonly changedAt: FieldRef<"AuditLog", 'DateTime'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
  }
    

  // Custom InputTypes

  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }


  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }


  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }


  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }


  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }


  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }


  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }


  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }


  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }


  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }


  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }


  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditLogInclude<ExtArgs> | null
  }



  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    userId: string | null
    type: string | null
    title: string | null
    message: string | null
    isRead: boolean | null
    readAt: Date | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    userId: string | null
    type: string | null
    title: string | null
    message: string | null
    isRead: boolean | null
    readAt: Date | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    companyId: number
    userId: number
    type: number
    title: number
    message: number
    data: number
    isRead: number
    readAt: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    companyId?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    readAt?: true
    expiresAt?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    companyId?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    readAt?: true
    expiresAt?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    companyId?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    data?: true
    isRead?: true
    readAt?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    companyId: string
    userId: string | null
    type: string
    title: string
    message: string
    data: JsonValue
    isRead: boolean
    readAt: Date | null
    expiresAt: Date | null
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    data?: boolean
    isRead?: boolean
    readAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user?: boolean | Notification$userArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    companyId?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    data?: boolean
    isRead?: boolean
    readAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user?: boolean | Notification$userArgs<ExtArgs>
  }


  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      userId: string | null
      type: string
      title: string
      message: string
      data: Prisma.JsonValue
      isRead: boolean
      readAt: Date | null
      expiresAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }


  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
    **/
    create<T extends NotificationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Notifications.
     *     @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notification = await prisma.notification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
    **/
    delete<T extends NotificationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends Notification$userArgs<ExtArgs> = {}>(args?: Subset<T, Notification$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly companyId: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly data: FieldRef<"Notification", 'Json'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly readAt: FieldRef<"Notification", 'DateTime'>
    readonly expiresAt: FieldRef<"Notification", 'DateTime'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }


  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }


  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification.user
   */
  export type Notification$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    industry: 'industry',
    sizeRange: 'sizeRange',
    emailDomain: 'emailDomain',
    logoUrl: 'logoUrl',
    timezone: 'timezone',
    subscriptionStatus: 'subscriptionStatus',
    subscriptionTier: 'subscriptionTier',
    stripeCustomerId: 'stripeCustomerId',
    trialEndsAt: 'trialEndsAt',
    settings: 'settings',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    email: 'email',
    firstName: 'firstName',
    lastName: 'lastName',
    role: 'role',
    phone: 'phone',
    passwordHash: 'passwordHash',
    avatarUrl: 'avatarUrl',
    isActive: 'isActive',
    emailVerified: 'emailVerified',
    emailVerificationToken: 'emailVerificationToken',
    passwordResetToken: 'passwordResetToken',
    passwordResetExpires: 'passwordResetExpires',
    lastLogin: 'lastLogin',
    preferences: 'preferences',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const EmployeeScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    employeeId: 'employeeId',
    email: 'email',
    firstName: 'firstName',
    lastName: 'lastName',
    department: 'department',
    position: 'position',
    hireDate: 'hireDate',
    terminationDate: 'terminationDate',
    status: 'status',
    managerId: 'managerId',
    employmentType: 'employmentType',
    workLocation: 'workLocation',
    salaryCurrency: 'salaryCurrency',
    salaryAmount: 'salaryAmount',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const AbsenceTypeScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    name: 'name',
    code: 'code',
    description: 'description',
    isPaid: 'isPaid',
    requiresApproval: 'requiresApproval',
    maxDaysPerYear: 'maxDaysPerYear',
    advanceNoticeDays: 'advanceNoticeDays',
    color: 'color',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AbsenceTypeScalarFieldEnum = (typeof AbsenceTypeScalarFieldEnum)[keyof typeof AbsenceTypeScalarFieldEnum]


  export const AbsenceRecordScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    employeeId: 'employeeId',
    absenceTypeId: 'absenceTypeId',
    startDate: 'startDate',
    endDate: 'endDate',
    totalDays: 'totalDays',
    reason: 'reason',
    notes: 'notes',
    status: 'status',
    source: 'source',
    sourceReference: 'sourceReference',
    confidenceScore: 'confidenceScore',
    approvedBy: 'approvedBy',
    approvedAt: 'approvedAt',
    rejectionReason: 'rejectionReason',
    createdBy: 'createdBy',
    attachments: 'attachments',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AbsenceRecordScalarFieldEnum = (typeof AbsenceRecordScalarFieldEnum)[keyof typeof AbsenceRecordScalarFieldEnum]


  export const EmailIntegrationScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    name: 'name',
    provider: 'provider',
    configuration: 'configuration',
    encryptedCredentials: 'encryptedCredentials',
    isActive: 'isActive',
    lastSync: 'lastSync',
    syncStatus: 'syncStatus',
    errorMessage: 'errorMessage',
    syncFrequencyMinutes: 'syncFrequencyMinutes',
    totalEmailsProcessed: 'totalEmailsProcessed',
    lastEmailProcessedAt: 'lastEmailProcessedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmailIntegrationScalarFieldEnum = (typeof EmailIntegrationScalarFieldEnum)[keyof typeof EmailIntegrationScalarFieldEnum]


  export const AIProcessingLogScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    processingType: 'processingType',
    provider: 'provider',
    inputData: 'inputData',
    aiResponse: 'aiResponse',
    confidenceScore: 'confidenceScore',
    status: 'status',
    errorMessage: 'errorMessage',
    processingTimeMs: 'processingTimeMs',
    costUsd: 'costUsd',
    tokensUsed: 'tokensUsed',
    relatedRecordId: 'relatedRecordId',
    createdAt: 'createdAt'
  };

  export type AIProcessingLogScalarFieldEnum = (typeof AIProcessingLogScalarFieldEnum)[keyof typeof AIProcessingLogScalarFieldEnum]


  export const SubscriptionScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    stripeSubscriptionId: 'stripeSubscriptionId',
    status: 'status',
    currentPeriodStart: 'currentPeriodStart',
    currentPeriodEnd: 'currentPeriodEnd',
    planName: 'planName',
    planPrice: 'planPrice',
    planInterval: 'planInterval',
    cancelAtPeriodEnd: 'cancelAtPeriodEnd',
    cancelledAt: 'cancelledAt',
    trialStart: 'trialStart',
    trialEnd: 'trialEnd',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubscriptionScalarFieldEnum = (typeof SubscriptionScalarFieldEnum)[keyof typeof SubscriptionScalarFieldEnum]


  export const UsageMetricsScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    metricType: 'metricType',
    metricValue: 'metricValue',
    periodStart: 'periodStart',
    periodEnd: 'periodEnd',
    createdAt: 'createdAt'
  };

  export type UsageMetricsScalarFieldEnum = (typeof UsageMetricsScalarFieldEnum)[keyof typeof UsageMetricsScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    tableName: 'tableName',
    recordId: 'recordId',
    action: 'action',
    oldValues: 'oldValues',
    newValues: 'newValues',
    changedBy: 'changedBy',
    changedAt: 'changedAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    userId: 'userId',
    type: 'type',
    title: 'title',
    message: 'message',
    data: 'data',
    isRead: 'isRead',
    readAt: 'readAt',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: StringFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    slug?: StringFilter<"Company"> | string
    industry?: StringNullableFilter<"Company"> | string | null
    sizeRange?: StringNullableFilter<"Company"> | string | null
    emailDomain?: StringNullableFilter<"Company"> | string | null
    logoUrl?: StringNullableFilter<"Company"> | string | null
    timezone?: StringFilter<"Company"> | string
    subscriptionStatus?: StringFilter<"Company"> | string
    subscriptionTier?: StringNullableFilter<"Company"> | string | null
    stripeCustomerId?: StringNullableFilter<"Company"> | string | null
    trialEndsAt?: DateTimeNullableFilter<"Company"> | Date | string | null
    settings?: JsonFilter<"Company">
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    users?: UserListRelationFilter
    employees?: EmployeeListRelationFilter
    absenceTypes?: AbsenceTypeListRelationFilter
    absenceRecords?: AbsenceRecordListRelationFilter
    emailIntegrations?: EmailIntegrationListRelationFilter
    aiProcessingLogs?: AIProcessingLogListRelationFilter
    subscriptions?: SubscriptionListRelationFilter
    usageMetrics?: UsageMetricsListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    notifications?: NotificationListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    industry?: SortOrderInput | SortOrder
    sizeRange?: SortOrderInput | SortOrder
    emailDomain?: SortOrderInput | SortOrder
    logoUrl?: SortOrderInput | SortOrder
    timezone?: SortOrder
    subscriptionStatus?: SortOrder
    subscriptionTier?: SortOrderInput | SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    trialEndsAt?: SortOrderInput | SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
    employees?: EmployeeOrderByRelationAggregateInput
    absenceTypes?: AbsenceTypeOrderByRelationAggregateInput
    absenceRecords?: AbsenceRecordOrderByRelationAggregateInput
    emailIntegrations?: EmailIntegrationOrderByRelationAggregateInput
    aiProcessingLogs?: AIProcessingLogOrderByRelationAggregateInput
    subscriptions?: SubscriptionOrderByRelationAggregateInput
    usageMetrics?: UsageMetricsOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    name?: StringFilter<"Company"> | string
    industry?: StringNullableFilter<"Company"> | string | null
    sizeRange?: StringNullableFilter<"Company"> | string | null
    emailDomain?: StringNullableFilter<"Company"> | string | null
    logoUrl?: StringNullableFilter<"Company"> | string | null
    timezone?: StringFilter<"Company"> | string
    subscriptionStatus?: StringFilter<"Company"> | string
    subscriptionTier?: StringNullableFilter<"Company"> | string | null
    stripeCustomerId?: StringNullableFilter<"Company"> | string | null
    trialEndsAt?: DateTimeNullableFilter<"Company"> | Date | string | null
    settings?: JsonFilter<"Company">
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    users?: UserListRelationFilter
    employees?: EmployeeListRelationFilter
    absenceTypes?: AbsenceTypeListRelationFilter
    absenceRecords?: AbsenceRecordListRelationFilter
    emailIntegrations?: EmailIntegrationListRelationFilter
    aiProcessingLogs?: AIProcessingLogListRelationFilter
    subscriptions?: SubscriptionListRelationFilter
    usageMetrics?: UsageMetricsListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    notifications?: NotificationListRelationFilter
  }, "id" | "slug">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    industry?: SortOrderInput | SortOrder
    sizeRange?: SortOrderInput | SortOrder
    emailDomain?: SortOrderInput | SortOrder
    logoUrl?: SortOrderInput | SortOrder
    timezone?: SortOrder
    subscriptionStatus?: SortOrder
    subscriptionTier?: SortOrderInput | SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    trialEndsAt?: SortOrderInput | SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Company"> | string
    name?: StringWithAggregatesFilter<"Company"> | string
    slug?: StringWithAggregatesFilter<"Company"> | string
    industry?: StringNullableWithAggregatesFilter<"Company"> | string | null
    sizeRange?: StringNullableWithAggregatesFilter<"Company"> | string | null
    emailDomain?: StringNullableWithAggregatesFilter<"Company"> | string | null
    logoUrl?: StringNullableWithAggregatesFilter<"Company"> | string | null
    timezone?: StringWithAggregatesFilter<"Company"> | string
    subscriptionStatus?: StringWithAggregatesFilter<"Company"> | string
    subscriptionTier?: StringNullableWithAggregatesFilter<"Company"> | string | null
    stripeCustomerId?: StringNullableWithAggregatesFilter<"Company"> | string | null
    trialEndsAt?: DateTimeNullableWithAggregatesFilter<"Company"> | Date | string | null
    settings?: JsonWithAggregatesFilter<"Company">
    createdAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    companyId?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    passwordHash?: StringFilter<"User"> | string
    avatarUrl?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    emailVerified?: BoolFilter<"User"> | boolean
    emailVerificationToken?: StringNullableFilter<"User"> | string | null
    passwordResetToken?: StringNullableFilter<"User"> | string | null
    passwordResetExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    preferences?: JsonFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    createdAbsenceRecords?: AbsenceRecordListRelationFilter
    approvedAbsenceRecords?: AbsenceRecordListRelationFilter
    notifications?: NotificationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    phone?: SortOrderInput | SortOrder
    passwordHash?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    emailVerified?: SortOrder
    emailVerificationToken?: SortOrderInput | SortOrder
    passwordResetToken?: SortOrderInput | SortOrder
    passwordResetExpires?: SortOrderInput | SortOrder
    lastLogin?: SortOrderInput | SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    createdAbsenceRecords?: AbsenceRecordOrderByRelationAggregateInput
    approvedAbsenceRecords?: AbsenceRecordOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    companyId?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    passwordHash?: StringFilter<"User"> | string
    avatarUrl?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    emailVerified?: BoolFilter<"User"> | boolean
    emailVerificationToken?: StringNullableFilter<"User"> | string | null
    passwordResetToken?: StringNullableFilter<"User"> | string | null
    passwordResetExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    preferences?: JsonFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    createdAbsenceRecords?: AbsenceRecordListRelationFilter
    approvedAbsenceRecords?: AbsenceRecordListRelationFilter
    notifications?: NotificationListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    phone?: SortOrderInput | SortOrder
    passwordHash?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    emailVerified?: SortOrder
    emailVerificationToken?: SortOrderInput | SortOrder
    passwordResetToken?: SortOrderInput | SortOrder
    passwordResetExpires?: SortOrderInput | SortOrder
    lastLogin?: SortOrderInput | SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    companyId?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    emailVerificationToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    passwordResetToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    passwordResetExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    preferences?: JsonWithAggregatesFilter<"User">
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type EmployeeWhereInput = {
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    id?: StringFilter<"Employee"> | string
    companyId?: StringFilter<"Employee"> | string
    employeeId?: StringNullableFilter<"Employee"> | string | null
    email?: StringNullableFilter<"Employee"> | string | null
    firstName?: StringFilter<"Employee"> | string
    lastName?: StringFilter<"Employee"> | string
    department?: StringNullableFilter<"Employee"> | string | null
    position?: StringNullableFilter<"Employee"> | string | null
    hireDate?: DateTimeNullableFilter<"Employee"> | Date | string | null
    terminationDate?: DateTimeNullableFilter<"Employee"> | Date | string | null
    status?: StringFilter<"Employee"> | string
    managerId?: StringNullableFilter<"Employee"> | string | null
    employmentType?: StringNullableFilter<"Employee"> | string | null
    workLocation?: StringNullableFilter<"Employee"> | string | null
    salaryCurrency?: StringFilter<"Employee"> | string
    salaryAmount?: DecimalNullableFilter<"Employee"> | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonFilter<"Employee">
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    manager?: XOR<EmployeeNullableRelationFilter, EmployeeWhereInput> | null
    subordinates?: EmployeeListRelationFilter
    absenceRecords?: AbsenceRecordListRelationFilter
  }

  export type EmployeeOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    employeeId?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    department?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    hireDate?: SortOrderInput | SortOrder
    terminationDate?: SortOrderInput | SortOrder
    status?: SortOrder
    managerId?: SortOrderInput | SortOrder
    employmentType?: SortOrderInput | SortOrder
    workLocation?: SortOrderInput | SortOrder
    salaryCurrency?: SortOrder
    salaryAmount?: SortOrderInput | SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    manager?: EmployeeOrderByWithRelationInput
    subordinates?: EmployeeOrderByRelationAggregateInput
    absenceRecords?: AbsenceRecordOrderByRelationAggregateInput
  }

  export type EmployeeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    companyId_employeeId?: EmployeeCompanyIdEmployeeIdCompoundUniqueInput
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    companyId?: StringFilter<"Employee"> | string
    employeeId?: StringNullableFilter<"Employee"> | string | null
    email?: StringNullableFilter<"Employee"> | string | null
    firstName?: StringFilter<"Employee"> | string
    lastName?: StringFilter<"Employee"> | string
    department?: StringNullableFilter<"Employee"> | string | null
    position?: StringNullableFilter<"Employee"> | string | null
    hireDate?: DateTimeNullableFilter<"Employee"> | Date | string | null
    terminationDate?: DateTimeNullableFilter<"Employee"> | Date | string | null
    status?: StringFilter<"Employee"> | string
    managerId?: StringNullableFilter<"Employee"> | string | null
    employmentType?: StringNullableFilter<"Employee"> | string | null
    workLocation?: StringNullableFilter<"Employee"> | string | null
    salaryCurrency?: StringFilter<"Employee"> | string
    salaryAmount?: DecimalNullableFilter<"Employee"> | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonFilter<"Employee">
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    manager?: XOR<EmployeeNullableRelationFilter, EmployeeWhereInput> | null
    subordinates?: EmployeeListRelationFilter
    absenceRecords?: AbsenceRecordListRelationFilter
  }, "id" | "companyId_employeeId">

  export type EmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    employeeId?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    department?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    hireDate?: SortOrderInput | SortOrder
    terminationDate?: SortOrderInput | SortOrder
    status?: SortOrder
    managerId?: SortOrderInput | SortOrder
    employmentType?: SortOrderInput | SortOrder
    workLocation?: SortOrderInput | SortOrder
    salaryCurrency?: SortOrder
    salaryAmount?: SortOrderInput | SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmployeeCountOrderByAggregateInput
    _avg?: EmployeeAvgOrderByAggregateInput
    _max?: EmployeeMaxOrderByAggregateInput
    _min?: EmployeeMinOrderByAggregateInput
    _sum?: EmployeeSumOrderByAggregateInput
  }

  export type EmployeeScalarWhereWithAggregatesInput = {
    AND?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    OR?: EmployeeScalarWhereWithAggregatesInput[]
    NOT?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Employee"> | string
    companyId?: StringWithAggregatesFilter<"Employee"> | string
    employeeId?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    email?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    firstName?: StringWithAggregatesFilter<"Employee"> | string
    lastName?: StringWithAggregatesFilter<"Employee"> | string
    department?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    position?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    hireDate?: DateTimeNullableWithAggregatesFilter<"Employee"> | Date | string | null
    terminationDate?: DateTimeNullableWithAggregatesFilter<"Employee"> | Date | string | null
    status?: StringWithAggregatesFilter<"Employee"> | string
    managerId?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    employmentType?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    workLocation?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    salaryCurrency?: StringWithAggregatesFilter<"Employee"> | string
    salaryAmount?: DecimalNullableWithAggregatesFilter<"Employee"> | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonWithAggregatesFilter<"Employee">
    createdAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
  }

  export type AbsenceTypeWhereInput = {
    AND?: AbsenceTypeWhereInput | AbsenceTypeWhereInput[]
    OR?: AbsenceTypeWhereInput[]
    NOT?: AbsenceTypeWhereInput | AbsenceTypeWhereInput[]
    id?: StringFilter<"AbsenceType"> | string
    companyId?: StringFilter<"AbsenceType"> | string
    name?: StringFilter<"AbsenceType"> | string
    code?: StringFilter<"AbsenceType"> | string
    description?: StringNullableFilter<"AbsenceType"> | string | null
    isPaid?: BoolFilter<"AbsenceType"> | boolean
    requiresApproval?: BoolFilter<"AbsenceType"> | boolean
    maxDaysPerYear?: IntNullableFilter<"AbsenceType"> | number | null
    advanceNoticeDays?: IntFilter<"AbsenceType"> | number
    color?: StringFilter<"AbsenceType"> | string
    isActive?: BoolFilter<"AbsenceType"> | boolean
    createdAt?: DateTimeFilter<"AbsenceType"> | Date | string
    updatedAt?: DateTimeFilter<"AbsenceType"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    absenceRecords?: AbsenceRecordListRelationFilter
  }

  export type AbsenceTypeOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    isPaid?: SortOrder
    requiresApproval?: SortOrder
    maxDaysPerYear?: SortOrderInput | SortOrder
    advanceNoticeDays?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    absenceRecords?: AbsenceRecordOrderByRelationAggregateInput
  }

  export type AbsenceTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    companyId_code?: AbsenceTypeCompanyIdCodeCompoundUniqueInput
    AND?: AbsenceTypeWhereInput | AbsenceTypeWhereInput[]
    OR?: AbsenceTypeWhereInput[]
    NOT?: AbsenceTypeWhereInput | AbsenceTypeWhereInput[]
    companyId?: StringFilter<"AbsenceType"> | string
    name?: StringFilter<"AbsenceType"> | string
    code?: StringFilter<"AbsenceType"> | string
    description?: StringNullableFilter<"AbsenceType"> | string | null
    isPaid?: BoolFilter<"AbsenceType"> | boolean
    requiresApproval?: BoolFilter<"AbsenceType"> | boolean
    maxDaysPerYear?: IntNullableFilter<"AbsenceType"> | number | null
    advanceNoticeDays?: IntFilter<"AbsenceType"> | number
    color?: StringFilter<"AbsenceType"> | string
    isActive?: BoolFilter<"AbsenceType"> | boolean
    createdAt?: DateTimeFilter<"AbsenceType"> | Date | string
    updatedAt?: DateTimeFilter<"AbsenceType"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    absenceRecords?: AbsenceRecordListRelationFilter
  }, "id" | "companyId_code">

  export type AbsenceTypeOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    isPaid?: SortOrder
    requiresApproval?: SortOrder
    maxDaysPerYear?: SortOrderInput | SortOrder
    advanceNoticeDays?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AbsenceTypeCountOrderByAggregateInput
    _avg?: AbsenceTypeAvgOrderByAggregateInput
    _max?: AbsenceTypeMaxOrderByAggregateInput
    _min?: AbsenceTypeMinOrderByAggregateInput
    _sum?: AbsenceTypeSumOrderByAggregateInput
  }

  export type AbsenceTypeScalarWhereWithAggregatesInput = {
    AND?: AbsenceTypeScalarWhereWithAggregatesInput | AbsenceTypeScalarWhereWithAggregatesInput[]
    OR?: AbsenceTypeScalarWhereWithAggregatesInput[]
    NOT?: AbsenceTypeScalarWhereWithAggregatesInput | AbsenceTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AbsenceType"> | string
    companyId?: StringWithAggregatesFilter<"AbsenceType"> | string
    name?: StringWithAggregatesFilter<"AbsenceType"> | string
    code?: StringWithAggregatesFilter<"AbsenceType"> | string
    description?: StringNullableWithAggregatesFilter<"AbsenceType"> | string | null
    isPaid?: BoolWithAggregatesFilter<"AbsenceType"> | boolean
    requiresApproval?: BoolWithAggregatesFilter<"AbsenceType"> | boolean
    maxDaysPerYear?: IntNullableWithAggregatesFilter<"AbsenceType"> | number | null
    advanceNoticeDays?: IntWithAggregatesFilter<"AbsenceType"> | number
    color?: StringWithAggregatesFilter<"AbsenceType"> | string
    isActive?: BoolWithAggregatesFilter<"AbsenceType"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"AbsenceType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AbsenceType"> | Date | string
  }

  export type AbsenceRecordWhereInput = {
    AND?: AbsenceRecordWhereInput | AbsenceRecordWhereInput[]
    OR?: AbsenceRecordWhereInput[]
    NOT?: AbsenceRecordWhereInput | AbsenceRecordWhereInput[]
    id?: StringFilter<"AbsenceRecord"> | string
    companyId?: StringFilter<"AbsenceRecord"> | string
    employeeId?: StringFilter<"AbsenceRecord"> | string
    absenceTypeId?: StringFilter<"AbsenceRecord"> | string
    startDate?: DateTimeFilter<"AbsenceRecord"> | Date | string
    endDate?: DateTimeFilter<"AbsenceRecord"> | Date | string
    totalDays?: IntFilter<"AbsenceRecord"> | number
    reason?: StringNullableFilter<"AbsenceRecord"> | string | null
    notes?: StringNullableFilter<"AbsenceRecord"> | string | null
    status?: StringFilter<"AbsenceRecord"> | string
    source?: StringFilter<"AbsenceRecord"> | string
    sourceReference?: StringNullableFilter<"AbsenceRecord"> | string | null
    confidenceScore?: FloatNullableFilter<"AbsenceRecord"> | number | null
    approvedBy?: StringNullableFilter<"AbsenceRecord"> | string | null
    approvedAt?: DateTimeNullableFilter<"AbsenceRecord"> | Date | string | null
    rejectionReason?: StringNullableFilter<"AbsenceRecord"> | string | null
    createdBy?: StringNullableFilter<"AbsenceRecord"> | string | null
    attachments?: JsonFilter<"AbsenceRecord">
    createdAt?: DateTimeFilter<"AbsenceRecord"> | Date | string
    updatedAt?: DateTimeFilter<"AbsenceRecord"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    absenceType?: XOR<AbsenceTypeRelationFilter, AbsenceTypeWhereInput>
    creator?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    approver?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type AbsenceRecordOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    employeeId?: SortOrder
    absenceTypeId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalDays?: SortOrder
    reason?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    source?: SortOrder
    sourceReference?: SortOrderInput | SortOrder
    confidenceScore?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    approvedAt?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    attachments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    employee?: EmployeeOrderByWithRelationInput
    absenceType?: AbsenceTypeOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    approver?: UserOrderByWithRelationInput
  }

  export type AbsenceRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AbsenceRecordWhereInput | AbsenceRecordWhereInput[]
    OR?: AbsenceRecordWhereInput[]
    NOT?: AbsenceRecordWhereInput | AbsenceRecordWhereInput[]
    companyId?: StringFilter<"AbsenceRecord"> | string
    employeeId?: StringFilter<"AbsenceRecord"> | string
    absenceTypeId?: StringFilter<"AbsenceRecord"> | string
    startDate?: DateTimeFilter<"AbsenceRecord"> | Date | string
    endDate?: DateTimeFilter<"AbsenceRecord"> | Date | string
    totalDays?: IntFilter<"AbsenceRecord"> | number
    reason?: StringNullableFilter<"AbsenceRecord"> | string | null
    notes?: StringNullableFilter<"AbsenceRecord"> | string | null
    status?: StringFilter<"AbsenceRecord"> | string
    source?: StringFilter<"AbsenceRecord"> | string
    sourceReference?: StringNullableFilter<"AbsenceRecord"> | string | null
    confidenceScore?: FloatNullableFilter<"AbsenceRecord"> | number | null
    approvedBy?: StringNullableFilter<"AbsenceRecord"> | string | null
    approvedAt?: DateTimeNullableFilter<"AbsenceRecord"> | Date | string | null
    rejectionReason?: StringNullableFilter<"AbsenceRecord"> | string | null
    createdBy?: StringNullableFilter<"AbsenceRecord"> | string | null
    attachments?: JsonFilter<"AbsenceRecord">
    createdAt?: DateTimeFilter<"AbsenceRecord"> | Date | string
    updatedAt?: DateTimeFilter<"AbsenceRecord"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    absenceType?: XOR<AbsenceTypeRelationFilter, AbsenceTypeWhereInput>
    creator?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    approver?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type AbsenceRecordOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    employeeId?: SortOrder
    absenceTypeId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalDays?: SortOrder
    reason?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    source?: SortOrder
    sourceReference?: SortOrderInput | SortOrder
    confidenceScore?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    approvedAt?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    attachments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AbsenceRecordCountOrderByAggregateInput
    _avg?: AbsenceRecordAvgOrderByAggregateInput
    _max?: AbsenceRecordMaxOrderByAggregateInput
    _min?: AbsenceRecordMinOrderByAggregateInput
    _sum?: AbsenceRecordSumOrderByAggregateInput
  }

  export type AbsenceRecordScalarWhereWithAggregatesInput = {
    AND?: AbsenceRecordScalarWhereWithAggregatesInput | AbsenceRecordScalarWhereWithAggregatesInput[]
    OR?: AbsenceRecordScalarWhereWithAggregatesInput[]
    NOT?: AbsenceRecordScalarWhereWithAggregatesInput | AbsenceRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AbsenceRecord"> | string
    companyId?: StringWithAggregatesFilter<"AbsenceRecord"> | string
    employeeId?: StringWithAggregatesFilter<"AbsenceRecord"> | string
    absenceTypeId?: StringWithAggregatesFilter<"AbsenceRecord"> | string
    startDate?: DateTimeWithAggregatesFilter<"AbsenceRecord"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"AbsenceRecord"> | Date | string
    totalDays?: IntWithAggregatesFilter<"AbsenceRecord"> | number
    reason?: StringNullableWithAggregatesFilter<"AbsenceRecord"> | string | null
    notes?: StringNullableWithAggregatesFilter<"AbsenceRecord"> | string | null
    status?: StringWithAggregatesFilter<"AbsenceRecord"> | string
    source?: StringWithAggregatesFilter<"AbsenceRecord"> | string
    sourceReference?: StringNullableWithAggregatesFilter<"AbsenceRecord"> | string | null
    confidenceScore?: FloatNullableWithAggregatesFilter<"AbsenceRecord"> | number | null
    approvedBy?: StringNullableWithAggregatesFilter<"AbsenceRecord"> | string | null
    approvedAt?: DateTimeNullableWithAggregatesFilter<"AbsenceRecord"> | Date | string | null
    rejectionReason?: StringNullableWithAggregatesFilter<"AbsenceRecord"> | string | null
    createdBy?: StringNullableWithAggregatesFilter<"AbsenceRecord"> | string | null
    attachments?: JsonWithAggregatesFilter<"AbsenceRecord">
    createdAt?: DateTimeWithAggregatesFilter<"AbsenceRecord"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AbsenceRecord"> | Date | string
  }

  export type EmailIntegrationWhereInput = {
    AND?: EmailIntegrationWhereInput | EmailIntegrationWhereInput[]
    OR?: EmailIntegrationWhereInput[]
    NOT?: EmailIntegrationWhereInput | EmailIntegrationWhereInput[]
    id?: StringFilter<"EmailIntegration"> | string
    companyId?: StringFilter<"EmailIntegration"> | string
    name?: StringFilter<"EmailIntegration"> | string
    provider?: StringFilter<"EmailIntegration"> | string
    configuration?: JsonFilter<"EmailIntegration">
    encryptedCredentials?: StringFilter<"EmailIntegration"> | string
    isActive?: BoolFilter<"EmailIntegration"> | boolean
    lastSync?: DateTimeNullableFilter<"EmailIntegration"> | Date | string | null
    syncStatus?: StringFilter<"EmailIntegration"> | string
    errorMessage?: StringNullableFilter<"EmailIntegration"> | string | null
    syncFrequencyMinutes?: IntFilter<"EmailIntegration"> | number
    totalEmailsProcessed?: IntFilter<"EmailIntegration"> | number
    lastEmailProcessedAt?: DateTimeNullableFilter<"EmailIntegration"> | Date | string | null
    createdAt?: DateTimeFilter<"EmailIntegration"> | Date | string
    updatedAt?: DateTimeFilter<"EmailIntegration"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }

  export type EmailIntegrationOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    configuration?: SortOrder
    encryptedCredentials?: SortOrder
    isActive?: SortOrder
    lastSync?: SortOrderInput | SortOrder
    syncStatus?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    syncFrequencyMinutes?: SortOrder
    totalEmailsProcessed?: SortOrder
    lastEmailProcessedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
  }

  export type EmailIntegrationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmailIntegrationWhereInput | EmailIntegrationWhereInput[]
    OR?: EmailIntegrationWhereInput[]
    NOT?: EmailIntegrationWhereInput | EmailIntegrationWhereInput[]
    companyId?: StringFilter<"EmailIntegration"> | string
    name?: StringFilter<"EmailIntegration"> | string
    provider?: StringFilter<"EmailIntegration"> | string
    configuration?: JsonFilter<"EmailIntegration">
    encryptedCredentials?: StringFilter<"EmailIntegration"> | string
    isActive?: BoolFilter<"EmailIntegration"> | boolean
    lastSync?: DateTimeNullableFilter<"EmailIntegration"> | Date | string | null
    syncStatus?: StringFilter<"EmailIntegration"> | string
    errorMessage?: StringNullableFilter<"EmailIntegration"> | string | null
    syncFrequencyMinutes?: IntFilter<"EmailIntegration"> | number
    totalEmailsProcessed?: IntFilter<"EmailIntegration"> | number
    lastEmailProcessedAt?: DateTimeNullableFilter<"EmailIntegration"> | Date | string | null
    createdAt?: DateTimeFilter<"EmailIntegration"> | Date | string
    updatedAt?: DateTimeFilter<"EmailIntegration"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }, "id">

  export type EmailIntegrationOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    configuration?: SortOrder
    encryptedCredentials?: SortOrder
    isActive?: SortOrder
    lastSync?: SortOrderInput | SortOrder
    syncStatus?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    syncFrequencyMinutes?: SortOrder
    totalEmailsProcessed?: SortOrder
    lastEmailProcessedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmailIntegrationCountOrderByAggregateInput
    _avg?: EmailIntegrationAvgOrderByAggregateInput
    _max?: EmailIntegrationMaxOrderByAggregateInput
    _min?: EmailIntegrationMinOrderByAggregateInput
    _sum?: EmailIntegrationSumOrderByAggregateInput
  }

  export type EmailIntegrationScalarWhereWithAggregatesInput = {
    AND?: EmailIntegrationScalarWhereWithAggregatesInput | EmailIntegrationScalarWhereWithAggregatesInput[]
    OR?: EmailIntegrationScalarWhereWithAggregatesInput[]
    NOT?: EmailIntegrationScalarWhereWithAggregatesInput | EmailIntegrationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailIntegration"> | string
    companyId?: StringWithAggregatesFilter<"EmailIntegration"> | string
    name?: StringWithAggregatesFilter<"EmailIntegration"> | string
    provider?: StringWithAggregatesFilter<"EmailIntegration"> | string
    configuration?: JsonWithAggregatesFilter<"EmailIntegration">
    encryptedCredentials?: StringWithAggregatesFilter<"EmailIntegration"> | string
    isActive?: BoolWithAggregatesFilter<"EmailIntegration"> | boolean
    lastSync?: DateTimeNullableWithAggregatesFilter<"EmailIntegration"> | Date | string | null
    syncStatus?: StringWithAggregatesFilter<"EmailIntegration"> | string
    errorMessage?: StringNullableWithAggregatesFilter<"EmailIntegration"> | string | null
    syncFrequencyMinutes?: IntWithAggregatesFilter<"EmailIntegration"> | number
    totalEmailsProcessed?: IntWithAggregatesFilter<"EmailIntegration"> | number
    lastEmailProcessedAt?: DateTimeNullableWithAggregatesFilter<"EmailIntegration"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"EmailIntegration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmailIntegration"> | Date | string
  }

  export type AIProcessingLogWhereInput = {
    AND?: AIProcessingLogWhereInput | AIProcessingLogWhereInput[]
    OR?: AIProcessingLogWhereInput[]
    NOT?: AIProcessingLogWhereInput | AIProcessingLogWhereInput[]
    id?: StringFilter<"AIProcessingLog"> | string
    companyId?: StringFilter<"AIProcessingLog"> | string
    processingType?: StringFilter<"AIProcessingLog"> | string
    provider?: StringFilter<"AIProcessingLog"> | string
    inputData?: JsonNullableFilter<"AIProcessingLog">
    aiResponse?: JsonNullableFilter<"AIProcessingLog">
    confidenceScore?: FloatNullableFilter<"AIProcessingLog"> | number | null
    status?: StringFilter<"AIProcessingLog"> | string
    errorMessage?: StringNullableFilter<"AIProcessingLog"> | string | null
    processingTimeMs?: IntNullableFilter<"AIProcessingLog"> | number | null
    costUsd?: DecimalNullableFilter<"AIProcessingLog"> | Decimal | DecimalJsLike | number | string | null
    tokensUsed?: IntNullableFilter<"AIProcessingLog"> | number | null
    relatedRecordId?: StringNullableFilter<"AIProcessingLog"> | string | null
    createdAt?: DateTimeFilter<"AIProcessingLog"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }

  export type AIProcessingLogOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    processingType?: SortOrder
    provider?: SortOrder
    inputData?: SortOrderInput | SortOrder
    aiResponse?: SortOrderInput | SortOrder
    confidenceScore?: SortOrderInput | SortOrder
    status?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    processingTimeMs?: SortOrderInput | SortOrder
    costUsd?: SortOrderInput | SortOrder
    tokensUsed?: SortOrderInput | SortOrder
    relatedRecordId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
  }

  export type AIProcessingLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AIProcessingLogWhereInput | AIProcessingLogWhereInput[]
    OR?: AIProcessingLogWhereInput[]
    NOT?: AIProcessingLogWhereInput | AIProcessingLogWhereInput[]
    companyId?: StringFilter<"AIProcessingLog"> | string
    processingType?: StringFilter<"AIProcessingLog"> | string
    provider?: StringFilter<"AIProcessingLog"> | string
    inputData?: JsonNullableFilter<"AIProcessingLog">
    aiResponse?: JsonNullableFilter<"AIProcessingLog">
    confidenceScore?: FloatNullableFilter<"AIProcessingLog"> | number | null
    status?: StringFilter<"AIProcessingLog"> | string
    errorMessage?: StringNullableFilter<"AIProcessingLog"> | string | null
    processingTimeMs?: IntNullableFilter<"AIProcessingLog"> | number | null
    costUsd?: DecimalNullableFilter<"AIProcessingLog"> | Decimal | DecimalJsLike | number | string | null
    tokensUsed?: IntNullableFilter<"AIProcessingLog"> | number | null
    relatedRecordId?: StringNullableFilter<"AIProcessingLog"> | string | null
    createdAt?: DateTimeFilter<"AIProcessingLog"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }, "id">

  export type AIProcessingLogOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    processingType?: SortOrder
    provider?: SortOrder
    inputData?: SortOrderInput | SortOrder
    aiResponse?: SortOrderInput | SortOrder
    confidenceScore?: SortOrderInput | SortOrder
    status?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    processingTimeMs?: SortOrderInput | SortOrder
    costUsd?: SortOrderInput | SortOrder
    tokensUsed?: SortOrderInput | SortOrder
    relatedRecordId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AIProcessingLogCountOrderByAggregateInput
    _avg?: AIProcessingLogAvgOrderByAggregateInput
    _max?: AIProcessingLogMaxOrderByAggregateInput
    _min?: AIProcessingLogMinOrderByAggregateInput
    _sum?: AIProcessingLogSumOrderByAggregateInput
  }

  export type AIProcessingLogScalarWhereWithAggregatesInput = {
    AND?: AIProcessingLogScalarWhereWithAggregatesInput | AIProcessingLogScalarWhereWithAggregatesInput[]
    OR?: AIProcessingLogScalarWhereWithAggregatesInput[]
    NOT?: AIProcessingLogScalarWhereWithAggregatesInput | AIProcessingLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AIProcessingLog"> | string
    companyId?: StringWithAggregatesFilter<"AIProcessingLog"> | string
    processingType?: StringWithAggregatesFilter<"AIProcessingLog"> | string
    provider?: StringWithAggregatesFilter<"AIProcessingLog"> | string
    inputData?: JsonNullableWithAggregatesFilter<"AIProcessingLog">
    aiResponse?: JsonNullableWithAggregatesFilter<"AIProcessingLog">
    confidenceScore?: FloatNullableWithAggregatesFilter<"AIProcessingLog"> | number | null
    status?: StringWithAggregatesFilter<"AIProcessingLog"> | string
    errorMessage?: StringNullableWithAggregatesFilter<"AIProcessingLog"> | string | null
    processingTimeMs?: IntNullableWithAggregatesFilter<"AIProcessingLog"> | number | null
    costUsd?: DecimalNullableWithAggregatesFilter<"AIProcessingLog"> | Decimal | DecimalJsLike | number | string | null
    tokensUsed?: IntNullableWithAggregatesFilter<"AIProcessingLog"> | number | null
    relatedRecordId?: StringNullableWithAggregatesFilter<"AIProcessingLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AIProcessingLog"> | Date | string
  }

  export type SubscriptionWhereInput = {
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    id?: StringFilter<"Subscription"> | string
    companyId?: StringFilter<"Subscription"> | string
    stripeSubscriptionId?: StringFilter<"Subscription"> | string
    status?: StringFilter<"Subscription"> | string
    currentPeriodStart?: DateTimeFilter<"Subscription"> | Date | string
    currentPeriodEnd?: DateTimeFilter<"Subscription"> | Date | string
    planName?: StringFilter<"Subscription"> | string
    planPrice?: DecimalFilter<"Subscription"> | Decimal | DecimalJsLike | number | string
    planInterval?: StringFilter<"Subscription"> | string
    cancelAtPeriodEnd?: BoolFilter<"Subscription"> | boolean
    cancelledAt?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    trialStart?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    trialEnd?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }

  export type SubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    stripeSubscriptionId?: SortOrder
    status?: SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    planName?: SortOrder
    planPrice?: SortOrder
    planInterval?: SortOrder
    cancelAtPeriodEnd?: SortOrder
    cancelledAt?: SortOrderInput | SortOrder
    trialStart?: SortOrderInput | SortOrder
    trialEnd?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
  }

  export type SubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    stripeSubscriptionId?: string
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    companyId?: StringFilter<"Subscription"> | string
    status?: StringFilter<"Subscription"> | string
    currentPeriodStart?: DateTimeFilter<"Subscription"> | Date | string
    currentPeriodEnd?: DateTimeFilter<"Subscription"> | Date | string
    planName?: StringFilter<"Subscription"> | string
    planPrice?: DecimalFilter<"Subscription"> | Decimal | DecimalJsLike | number | string
    planInterval?: StringFilter<"Subscription"> | string
    cancelAtPeriodEnd?: BoolFilter<"Subscription"> | boolean
    cancelledAt?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    trialStart?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    trialEnd?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }, "id" | "stripeSubscriptionId">

  export type SubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    stripeSubscriptionId?: SortOrder
    status?: SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    planName?: SortOrder
    planPrice?: SortOrder
    planInterval?: SortOrder
    cancelAtPeriodEnd?: SortOrder
    cancelledAt?: SortOrderInput | SortOrder
    trialStart?: SortOrderInput | SortOrder
    trialEnd?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubscriptionCountOrderByAggregateInput
    _avg?: SubscriptionAvgOrderByAggregateInput
    _max?: SubscriptionMaxOrderByAggregateInput
    _min?: SubscriptionMinOrderByAggregateInput
    _sum?: SubscriptionSumOrderByAggregateInput
  }

  export type SubscriptionScalarWhereWithAggregatesInput = {
    AND?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    OR?: SubscriptionScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Subscription"> | string
    companyId?: StringWithAggregatesFilter<"Subscription"> | string
    stripeSubscriptionId?: StringWithAggregatesFilter<"Subscription"> | string
    status?: StringWithAggregatesFilter<"Subscription"> | string
    currentPeriodStart?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    currentPeriodEnd?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    planName?: StringWithAggregatesFilter<"Subscription"> | string
    planPrice?: DecimalWithAggregatesFilter<"Subscription"> | Decimal | DecimalJsLike | number | string
    planInterval?: StringWithAggregatesFilter<"Subscription"> | string
    cancelAtPeriodEnd?: BoolWithAggregatesFilter<"Subscription"> | boolean
    cancelledAt?: DateTimeNullableWithAggregatesFilter<"Subscription"> | Date | string | null
    trialStart?: DateTimeNullableWithAggregatesFilter<"Subscription"> | Date | string | null
    trialEnd?: DateTimeNullableWithAggregatesFilter<"Subscription"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
  }

  export type UsageMetricsWhereInput = {
    AND?: UsageMetricsWhereInput | UsageMetricsWhereInput[]
    OR?: UsageMetricsWhereInput[]
    NOT?: UsageMetricsWhereInput | UsageMetricsWhereInput[]
    id?: StringFilter<"UsageMetrics"> | string
    companyId?: StringFilter<"UsageMetrics"> | string
    metricType?: StringFilter<"UsageMetrics"> | string
    metricValue?: IntFilter<"UsageMetrics"> | number
    periodStart?: DateTimeFilter<"UsageMetrics"> | Date | string
    periodEnd?: DateTimeFilter<"UsageMetrics"> | Date | string
    createdAt?: DateTimeFilter<"UsageMetrics"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }

  export type UsageMetricsOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    metricType?: SortOrder
    metricValue?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    createdAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
  }

  export type UsageMetricsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UsageMetricsWhereInput | UsageMetricsWhereInput[]
    OR?: UsageMetricsWhereInput[]
    NOT?: UsageMetricsWhereInput | UsageMetricsWhereInput[]
    companyId?: StringFilter<"UsageMetrics"> | string
    metricType?: StringFilter<"UsageMetrics"> | string
    metricValue?: IntFilter<"UsageMetrics"> | number
    periodStart?: DateTimeFilter<"UsageMetrics"> | Date | string
    periodEnd?: DateTimeFilter<"UsageMetrics"> | Date | string
    createdAt?: DateTimeFilter<"UsageMetrics"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }, "id">

  export type UsageMetricsOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    metricType?: SortOrder
    metricValue?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    createdAt?: SortOrder
    _count?: UsageMetricsCountOrderByAggregateInput
    _avg?: UsageMetricsAvgOrderByAggregateInput
    _max?: UsageMetricsMaxOrderByAggregateInput
    _min?: UsageMetricsMinOrderByAggregateInput
    _sum?: UsageMetricsSumOrderByAggregateInput
  }

  export type UsageMetricsScalarWhereWithAggregatesInput = {
    AND?: UsageMetricsScalarWhereWithAggregatesInput | UsageMetricsScalarWhereWithAggregatesInput[]
    OR?: UsageMetricsScalarWhereWithAggregatesInput[]
    NOT?: UsageMetricsScalarWhereWithAggregatesInput | UsageMetricsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UsageMetrics"> | string
    companyId?: StringWithAggregatesFilter<"UsageMetrics"> | string
    metricType?: StringWithAggregatesFilter<"UsageMetrics"> | string
    metricValue?: IntWithAggregatesFilter<"UsageMetrics"> | number
    periodStart?: DateTimeWithAggregatesFilter<"UsageMetrics"> | Date | string
    periodEnd?: DateTimeWithAggregatesFilter<"UsageMetrics"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"UsageMetrics"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    companyId?: StringFilter<"AuditLog"> | string
    tableName?: StringFilter<"AuditLog"> | string
    recordId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    changedBy?: StringNullableFilter<"AuditLog"> | string | null
    changedAt?: DateTimeFilter<"AuditLog"> | Date | string
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    action?: SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    changedBy?: SortOrderInput | SortOrder
    changedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    company?: CompanyOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    companyId?: StringFilter<"AuditLog"> | string
    tableName?: StringFilter<"AuditLog"> | string
    recordId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    changedBy?: StringNullableFilter<"AuditLog"> | string | null
    changedAt?: DateTimeFilter<"AuditLog"> | Date | string
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    action?: SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    changedBy?: SortOrderInput | SortOrder
    changedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    companyId?: StringWithAggregatesFilter<"AuditLog"> | string
    tableName?: StringWithAggregatesFilter<"AuditLog"> | string
    recordId?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    oldValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    newValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    changedBy?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    changedAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    companyId?: StringFilter<"Notification"> | string
    userId?: StringNullableFilter<"Notification"> | string | null
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    data?: JsonFilter<"Notification">
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    userId?: SortOrderInput | SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    data?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    companyId?: StringFilter<"Notification"> | string
    userId?: StringNullableFilter<"Notification"> | string | null
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    data?: JsonFilter<"Notification">
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    userId?: SortOrderInput | SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    data?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    companyId?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    type?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    data?: JsonWithAggregatesFilter<"Notification">
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    readAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type CompanyCreateInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutCompanyInput
    employees?: EmployeeCreateNestedManyWithoutCompanyInput
    absenceTypes?: AbsenceTypeCreateNestedManyWithoutCompanyInput
    absenceRecords?: AbsenceRecordCreateNestedManyWithoutCompanyInput
    emailIntegrations?: EmailIntegrationCreateNestedManyWithoutCompanyInput
    aiProcessingLogs?: AIProcessingLogCreateNestedManyWithoutCompanyInput
    subscriptions?: SubscriptionCreateNestedManyWithoutCompanyInput
    usageMetrics?: UsageMetricsCreateNestedManyWithoutCompanyInput
    auditLogs?: AuditLogCreateNestedManyWithoutCompanyInput
    notifications?: NotificationCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
    absenceTypes?: AbsenceTypeUncheckedCreateNestedManyWithoutCompanyInput
    absenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutCompanyInput
    emailIntegrations?: EmailIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    aiProcessingLogs?: AIProcessingLogUncheckedCreateNestedManyWithoutCompanyInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    usageMetrics?: UsageMetricsUncheckedCreateNestedManyWithoutCompanyInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutCompanyInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUpdateManyWithoutCompanyNestedInput
    absenceTypes?: AbsenceTypeUpdateManyWithoutCompanyNestedInput
    absenceRecords?: AbsenceRecordUpdateManyWithoutCompanyNestedInput
    emailIntegrations?: EmailIntegrationUpdateManyWithoutCompanyNestedInput
    aiProcessingLogs?: AIProcessingLogUpdateManyWithoutCompanyNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutCompanyNestedInput
    usageMetrics?: UsageMetricsUpdateManyWithoutCompanyNestedInput
    auditLogs?: AuditLogUpdateManyWithoutCompanyNestedInput
    notifications?: NotificationUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    absenceTypes?: AbsenceTypeUncheckedUpdateManyWithoutCompanyNestedInput
    absenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutCompanyNestedInput
    emailIntegrations?: EmailIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    aiProcessingLogs?: AIProcessingLogUncheckedUpdateManyWithoutCompanyNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    usageMetrics?: UsageMetricsUncheckedUpdateManyWithoutCompanyNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutCompanyNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role?: string
    phone?: string | null
    passwordHash: string
    avatarUrl?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutUsersInput
    createdAbsenceRecords?: AbsenceRecordCreateNestedManyWithoutCreatorInput
    approvedAbsenceRecords?: AbsenceRecordCreateNestedManyWithoutApproverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    companyId: string
    email: string
    firstName: string
    lastName: string
    role?: string
    phone?: string | null
    passwordHash: string
    avatarUrl?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdAbsenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutCreatorInput
    approvedAbsenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutApproverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutUsersNestedInput
    createdAbsenceRecords?: AbsenceRecordUpdateManyWithoutCreatorNestedInput
    approvedAbsenceRecords?: AbsenceRecordUpdateManyWithoutApproverNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAbsenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutCreatorNestedInput
    approvedAbsenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutApproverNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    companyId: string
    email: string
    firstName: string
    lastName: string
    role?: string
    phone?: string | null
    passwordHash: string
    avatarUrl?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCreateInput = {
    id?: string
    employeeId?: string | null
    email?: string | null
    firstName: string
    lastName: string
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    terminationDate?: Date | string | null
    status?: string
    employmentType?: string | null
    workLocation?: string | null
    salaryCurrency?: string
    salaryAmount?: Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutEmployeesInput
    manager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutManagerInput
    absenceRecords?: AbsenceRecordCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateInput = {
    id?: string
    companyId: string
    employeeId?: string | null
    email?: string | null
    firstName: string
    lastName: string
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    terminationDate?: Date | string | null
    status?: string
    managerId?: string | null
    employmentType?: string | null
    workLocation?: string | null
    salaryCurrency?: string
    salaryAmount?: Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutManagerInput
    absenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    workLocation?: NullableStringFieldUpdateOperationsInput | string | null
    salaryCurrency?: StringFieldUpdateOperationsInput | string
    salaryAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutEmployeesNestedInput
    manager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutManagerNestedInput
    absenceRecords?: AbsenceRecordUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    workLocation?: NullableStringFieldUpdateOperationsInput | string | null
    salaryCurrency?: StringFieldUpdateOperationsInput | string
    salaryAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subordinates?: EmployeeUncheckedUpdateManyWithoutManagerNestedInput
    absenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateManyInput = {
    id?: string
    companyId: string
    employeeId?: string | null
    email?: string | null
    firstName: string
    lastName: string
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    terminationDate?: Date | string | null
    status?: string
    managerId?: string | null
    employmentType?: string | null
    workLocation?: string | null
    salaryCurrency?: string
    salaryAmount?: Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    workLocation?: NullableStringFieldUpdateOperationsInput | string | null
    salaryCurrency?: StringFieldUpdateOperationsInput | string
    salaryAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    workLocation?: NullableStringFieldUpdateOperationsInput | string | null
    salaryCurrency?: StringFieldUpdateOperationsInput | string
    salaryAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceTypeCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isPaid?: boolean
    requiresApproval?: boolean
    maxDaysPerYear?: number | null
    advanceNoticeDays?: number
    color?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutAbsenceTypesInput
    absenceRecords?: AbsenceRecordCreateNestedManyWithoutAbsenceTypeInput
  }

  export type AbsenceTypeUncheckedCreateInput = {
    id?: string
    companyId: string
    name: string
    code: string
    description?: string | null
    isPaid?: boolean
    requiresApproval?: boolean
    maxDaysPerYear?: number | null
    advanceNoticeDays?: number
    color?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    absenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutAbsenceTypeInput
  }

  export type AbsenceTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    maxDaysPerYear?: NullableIntFieldUpdateOperationsInput | number | null
    advanceNoticeDays?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutAbsenceTypesNestedInput
    absenceRecords?: AbsenceRecordUpdateManyWithoutAbsenceTypeNestedInput
  }

  export type AbsenceTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    maxDaysPerYear?: NullableIntFieldUpdateOperationsInput | number | null
    advanceNoticeDays?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    absenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutAbsenceTypeNestedInput
  }

  export type AbsenceTypeCreateManyInput = {
    id?: string
    companyId: string
    name: string
    code: string
    description?: string | null
    isPaid?: boolean
    requiresApproval?: boolean
    maxDaysPerYear?: number | null
    advanceNoticeDays?: number
    color?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    maxDaysPerYear?: NullableIntFieldUpdateOperationsInput | number | null
    advanceNoticeDays?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    maxDaysPerYear?: NullableIntFieldUpdateOperationsInput | number | null
    advanceNoticeDays?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceRecordCreateInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    notes?: string | null
    status?: string
    source?: string
    sourceReference?: string | null
    confidenceScore?: number | null
    approvedAt?: Date | string | null
    rejectionReason?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutAbsenceRecordsInput
    employee: EmployeeCreateNestedOneWithoutAbsenceRecordsInput
    absenceType: AbsenceTypeCreateNestedOneWithoutAbsenceRecordsInput
    creator?: UserCreateNestedOneWithoutCreatedAbsenceRecordsInput
    approver?: UserCreateNestedOneWithoutApprovedAbsenceRecordsInput
  }

  export type AbsenceRecordUncheckedCreateInput = {
    id?: string
    companyId: string
    employeeId: string
    absenceTypeId: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    notes?: string | null
    status?: string
    source?: string
    sourceReference?: string | null
    confidenceScore?: number | null
    approvedBy?: string | null
    approvedAt?: Date | string | null
    rejectionReason?: string | null
    createdBy?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutAbsenceRecordsNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutAbsenceRecordsNestedInput
    absenceType?: AbsenceTypeUpdateOneRequiredWithoutAbsenceRecordsNestedInput
    creator?: UserUpdateOneWithoutCreatedAbsenceRecordsNestedInput
    approver?: UserUpdateOneWithoutApprovedAbsenceRecordsNestedInput
  }

  export type AbsenceRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    absenceTypeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceRecordCreateManyInput = {
    id?: string
    companyId: string
    employeeId: string
    absenceTypeId: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    notes?: string | null
    status?: string
    source?: string
    sourceReference?: string | null
    confidenceScore?: number | null
    approvedBy?: string | null
    approvedAt?: Date | string | null
    rejectionReason?: string | null
    createdBy?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    absenceTypeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailIntegrationCreateInput = {
    id?: string
    name: string
    provider: string
    configuration?: JsonNullValueInput | InputJsonValue
    encryptedCredentials: string
    isActive?: boolean
    lastSync?: Date | string | null
    syncStatus?: string
    errorMessage?: string | null
    syncFrequencyMinutes?: number
    totalEmailsProcessed?: number
    lastEmailProcessedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutEmailIntegrationsInput
  }

  export type EmailIntegrationUncheckedCreateInput = {
    id?: string
    companyId: string
    name: string
    provider: string
    configuration?: JsonNullValueInput | InputJsonValue
    encryptedCredentials: string
    isActive?: boolean
    lastSync?: Date | string | null
    syncStatus?: string
    errorMessage?: string | null
    syncFrequencyMinutes?: number
    totalEmailsProcessed?: number
    lastEmailProcessedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailIntegrationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    configuration?: JsonNullValueInput | InputJsonValue
    encryptedCredentials?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncStatus?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    syncFrequencyMinutes?: IntFieldUpdateOperationsInput | number
    totalEmailsProcessed?: IntFieldUpdateOperationsInput | number
    lastEmailProcessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutEmailIntegrationsNestedInput
  }

  export type EmailIntegrationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    configuration?: JsonNullValueInput | InputJsonValue
    encryptedCredentials?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncStatus?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    syncFrequencyMinutes?: IntFieldUpdateOperationsInput | number
    totalEmailsProcessed?: IntFieldUpdateOperationsInput | number
    lastEmailProcessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailIntegrationCreateManyInput = {
    id?: string
    companyId: string
    name: string
    provider: string
    configuration?: JsonNullValueInput | InputJsonValue
    encryptedCredentials: string
    isActive?: boolean
    lastSync?: Date | string | null
    syncStatus?: string
    errorMessage?: string | null
    syncFrequencyMinutes?: number
    totalEmailsProcessed?: number
    lastEmailProcessedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailIntegrationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    configuration?: JsonNullValueInput | InputJsonValue
    encryptedCredentials?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncStatus?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    syncFrequencyMinutes?: IntFieldUpdateOperationsInput | number
    totalEmailsProcessed?: IntFieldUpdateOperationsInput | number
    lastEmailProcessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailIntegrationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    configuration?: JsonNullValueInput | InputJsonValue
    encryptedCredentials?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncStatus?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    syncFrequencyMinutes?: IntFieldUpdateOperationsInput | number
    totalEmailsProcessed?: IntFieldUpdateOperationsInput | number
    lastEmailProcessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIProcessingLogCreateInput = {
    id?: string
    processingType: string
    provider: string
    inputData?: NullableJsonNullValueInput | InputJsonValue
    aiResponse?: NullableJsonNullValueInput | InputJsonValue
    confidenceScore?: number | null
    status?: string
    errorMessage?: string | null
    processingTimeMs?: number | null
    costUsd?: Decimal | DecimalJsLike | number | string | null
    tokensUsed?: number | null
    relatedRecordId?: string | null
    createdAt?: Date | string
    company: CompanyCreateNestedOneWithoutAiProcessingLogsInput
  }

  export type AIProcessingLogUncheckedCreateInput = {
    id?: string
    companyId: string
    processingType: string
    provider: string
    inputData?: NullableJsonNullValueInput | InputJsonValue
    aiResponse?: NullableJsonNullValueInput | InputJsonValue
    confidenceScore?: number | null
    status?: string
    errorMessage?: string | null
    processingTimeMs?: number | null
    costUsd?: Decimal | DecimalJsLike | number | string | null
    tokensUsed?: number | null
    relatedRecordId?: string | null
    createdAt?: Date | string
  }

  export type AIProcessingLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    processingType?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    inputData?: NullableJsonNullValueInput | InputJsonValue
    aiResponse?: NullableJsonNullValueInput | InputJsonValue
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    processingTimeMs?: NullableIntFieldUpdateOperationsInput | number | null
    costUsd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tokensUsed?: NullableIntFieldUpdateOperationsInput | number | null
    relatedRecordId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutAiProcessingLogsNestedInput
  }

  export type AIProcessingLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    processingType?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    inputData?: NullableJsonNullValueInput | InputJsonValue
    aiResponse?: NullableJsonNullValueInput | InputJsonValue
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    processingTimeMs?: NullableIntFieldUpdateOperationsInput | number | null
    costUsd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tokensUsed?: NullableIntFieldUpdateOperationsInput | number | null
    relatedRecordId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIProcessingLogCreateManyInput = {
    id?: string
    companyId: string
    processingType: string
    provider: string
    inputData?: NullableJsonNullValueInput | InputJsonValue
    aiResponse?: NullableJsonNullValueInput | InputJsonValue
    confidenceScore?: number | null
    status?: string
    errorMessage?: string | null
    processingTimeMs?: number | null
    costUsd?: Decimal | DecimalJsLike | number | string | null
    tokensUsed?: number | null
    relatedRecordId?: string | null
    createdAt?: Date | string
  }

  export type AIProcessingLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    processingType?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    inputData?: NullableJsonNullValueInput | InputJsonValue
    aiResponse?: NullableJsonNullValueInput | InputJsonValue
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    processingTimeMs?: NullableIntFieldUpdateOperationsInput | number | null
    costUsd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tokensUsed?: NullableIntFieldUpdateOperationsInput | number | null
    relatedRecordId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIProcessingLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    processingType?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    inputData?: NullableJsonNullValueInput | InputJsonValue
    aiResponse?: NullableJsonNullValueInput | InputJsonValue
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    processingTimeMs?: NullableIntFieldUpdateOperationsInput | number | null
    costUsd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tokensUsed?: NullableIntFieldUpdateOperationsInput | number | null
    relatedRecordId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionCreateInput = {
    id?: string
    stripeSubscriptionId: string
    status: string
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    planName: string
    planPrice: Decimal | DecimalJsLike | number | string
    planInterval: string
    cancelAtPeriodEnd?: boolean
    cancelledAt?: Date | string | null
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutSubscriptionsInput
  }

  export type SubscriptionUncheckedCreateInput = {
    id?: string
    companyId: string
    stripeSubscriptionId: string
    status: string
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    planName: string
    planPrice: Decimal | DecimalJsLike | number | string
    planInterval: string
    cancelAtPeriodEnd?: boolean
    cancelledAt?: Date | string | null
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    planName?: StringFieldUpdateOperationsInput | string
    planPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planInterval?: StringFieldUpdateOperationsInput | string
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutSubscriptionsNestedInput
  }

  export type SubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    planName?: StringFieldUpdateOperationsInput | string
    planPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planInterval?: StringFieldUpdateOperationsInput | string
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionCreateManyInput = {
    id?: string
    companyId: string
    stripeSubscriptionId: string
    status: string
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    planName: string
    planPrice: Decimal | DecimalJsLike | number | string
    planInterval: string
    cancelAtPeriodEnd?: boolean
    cancelledAt?: Date | string | null
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    planName?: StringFieldUpdateOperationsInput | string
    planPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planInterval?: StringFieldUpdateOperationsInput | string
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    planName?: StringFieldUpdateOperationsInput | string
    planPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planInterval?: StringFieldUpdateOperationsInput | string
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageMetricsCreateInput = {
    id?: string
    metricType: string
    metricValue: number
    periodStart: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
    company: CompanyCreateNestedOneWithoutUsageMetricsInput
  }

  export type UsageMetricsUncheckedCreateInput = {
    id?: string
    companyId: string
    metricType: string
    metricValue: number
    periodStart: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
  }

  export type UsageMetricsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricType?: StringFieldUpdateOperationsInput | string
    metricValue?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutUsageMetricsNestedInput
  }

  export type UsageMetricsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    metricType?: StringFieldUpdateOperationsInput | string
    metricValue?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageMetricsCreateManyInput = {
    id?: string
    companyId: string
    metricType: string
    metricValue: number
    periodStart: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
  }

  export type UsageMetricsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricType?: StringFieldUpdateOperationsInput | string
    metricValue?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageMetricsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    metricType?: StringFieldUpdateOperationsInput | string
    metricValue?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    tableName: string
    recordId: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: string | null
    changedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    company: CompanyCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    companyId: string
    tableName: string
    recordId: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: string | null
    changedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    company?: CompanyUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogCreateManyInput = {
    id?: string
    companyId: string
    tableName: string
    recordId: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: string | null
    changedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationCreateInput = {
    id?: string
    type: string
    title: string
    message: string
    data?: JsonNullValueInput | InputJsonValue
    isRead?: boolean
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    company: CompanyCreateNestedOneWithoutNotificationsInput
    user?: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    companyId: string
    userId?: string | null
    type: string
    title: string
    message: string
    data?: JsonNullValueInput | InputJsonValue
    isRead?: boolean
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutNotificationsNestedInput
    user?: UserUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    companyId: string
    userId?: string | null
    type: string
    title: string
    message: string
    data?: JsonNullValueInput | InputJsonValue
    isRead?: boolean
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type EmployeeListRelationFilter = {
    every?: EmployeeWhereInput
    some?: EmployeeWhereInput
    none?: EmployeeWhereInput
  }

  export type AbsenceTypeListRelationFilter = {
    every?: AbsenceTypeWhereInput
    some?: AbsenceTypeWhereInput
    none?: AbsenceTypeWhereInput
  }

  export type AbsenceRecordListRelationFilter = {
    every?: AbsenceRecordWhereInput
    some?: AbsenceRecordWhereInput
    none?: AbsenceRecordWhereInput
  }

  export type EmailIntegrationListRelationFilter = {
    every?: EmailIntegrationWhereInput
    some?: EmailIntegrationWhereInput
    none?: EmailIntegrationWhereInput
  }

  export type AIProcessingLogListRelationFilter = {
    every?: AIProcessingLogWhereInput
    some?: AIProcessingLogWhereInput
    none?: AIProcessingLogWhereInput
  }

  export type SubscriptionListRelationFilter = {
    every?: SubscriptionWhereInput
    some?: SubscriptionWhereInput
    none?: SubscriptionWhereInput
  }

  export type UsageMetricsListRelationFilter = {
    every?: UsageMetricsWhereInput
    some?: UsageMetricsWhereInput
    none?: UsageMetricsWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AbsenceTypeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AbsenceRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailIntegrationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AIProcessingLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsageMetricsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    industry?: SortOrder
    sizeRange?: SortOrder
    emailDomain?: SortOrder
    logoUrl?: SortOrder
    timezone?: SortOrder
    subscriptionStatus?: SortOrder
    subscriptionTier?: SortOrder
    stripeCustomerId?: SortOrder
    trialEndsAt?: SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    industry?: SortOrder
    sizeRange?: SortOrder
    emailDomain?: SortOrder
    logoUrl?: SortOrder
    timezone?: SortOrder
    subscriptionStatus?: SortOrder
    subscriptionTier?: SortOrder
    stripeCustomerId?: SortOrder
    trialEndsAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    industry?: SortOrder
    sizeRange?: SortOrder
    emailDomain?: SortOrder
    logoUrl?: SortOrder
    timezone?: SortOrder
    subscriptionStatus?: SortOrder
    subscriptionTier?: SortOrder
    stripeCustomerId?: SortOrder
    trialEndsAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CompanyRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    phone?: SortOrder
    passwordHash?: SortOrder
    avatarUrl?: SortOrder
    isActive?: SortOrder
    emailVerified?: SortOrder
    emailVerificationToken?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetExpires?: SortOrder
    lastLogin?: SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    phone?: SortOrder
    passwordHash?: SortOrder
    avatarUrl?: SortOrder
    isActive?: SortOrder
    emailVerified?: SortOrder
    emailVerificationToken?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetExpires?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    phone?: SortOrder
    passwordHash?: SortOrder
    avatarUrl?: SortOrder
    isActive?: SortOrder
    emailVerified?: SortOrder
    emailVerificationToken?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetExpires?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type EmployeeNullableRelationFilter = {
    is?: EmployeeWhereInput | null
    isNot?: EmployeeWhereInput | null
  }

  export type EmployeeCompanyIdEmployeeIdCompoundUniqueInput = {
    companyId: string
    employeeId: string
  }

  export type EmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    employeeId?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    department?: SortOrder
    position?: SortOrder
    hireDate?: SortOrder
    terminationDate?: SortOrder
    status?: SortOrder
    managerId?: SortOrder
    employmentType?: SortOrder
    workLocation?: SortOrder
    salaryCurrency?: SortOrder
    salaryAmount?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeAvgOrderByAggregateInput = {
    salaryAmount?: SortOrder
  }

  export type EmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    employeeId?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    department?: SortOrder
    position?: SortOrder
    hireDate?: SortOrder
    terminationDate?: SortOrder
    status?: SortOrder
    managerId?: SortOrder
    employmentType?: SortOrder
    workLocation?: SortOrder
    salaryCurrency?: SortOrder
    salaryAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    employeeId?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    department?: SortOrder
    position?: SortOrder
    hireDate?: SortOrder
    terminationDate?: SortOrder
    status?: SortOrder
    managerId?: SortOrder
    employmentType?: SortOrder
    workLocation?: SortOrder
    salaryCurrency?: SortOrder
    salaryAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeSumOrderByAggregateInput = {
    salaryAmount?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type AbsenceTypeCompanyIdCodeCompoundUniqueInput = {
    companyId: string
    code: string
  }

  export type AbsenceTypeCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    isPaid?: SortOrder
    requiresApproval?: SortOrder
    maxDaysPerYear?: SortOrder
    advanceNoticeDays?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AbsenceTypeAvgOrderByAggregateInput = {
    maxDaysPerYear?: SortOrder
    advanceNoticeDays?: SortOrder
  }

  export type AbsenceTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    isPaid?: SortOrder
    requiresApproval?: SortOrder
    maxDaysPerYear?: SortOrder
    advanceNoticeDays?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AbsenceTypeMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    isPaid?: SortOrder
    requiresApproval?: SortOrder
    maxDaysPerYear?: SortOrder
    advanceNoticeDays?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AbsenceTypeSumOrderByAggregateInput = {
    maxDaysPerYear?: SortOrder
    advanceNoticeDays?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type EmployeeRelationFilter = {
    is?: EmployeeWhereInput
    isNot?: EmployeeWhereInput
  }

  export type AbsenceTypeRelationFilter = {
    is?: AbsenceTypeWhereInput
    isNot?: AbsenceTypeWhereInput
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AbsenceRecordCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    employeeId?: SortOrder
    absenceTypeId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalDays?: SortOrder
    reason?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    source?: SortOrder
    sourceReference?: SortOrder
    confidenceScore?: SortOrder
    approvedBy?: SortOrder
    approvedAt?: SortOrder
    rejectionReason?: SortOrder
    createdBy?: SortOrder
    attachments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AbsenceRecordAvgOrderByAggregateInput = {
    totalDays?: SortOrder
    confidenceScore?: SortOrder
  }

  export type AbsenceRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    employeeId?: SortOrder
    absenceTypeId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalDays?: SortOrder
    reason?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    source?: SortOrder
    sourceReference?: SortOrder
    confidenceScore?: SortOrder
    approvedBy?: SortOrder
    approvedAt?: SortOrder
    rejectionReason?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AbsenceRecordMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    employeeId?: SortOrder
    absenceTypeId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalDays?: SortOrder
    reason?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    source?: SortOrder
    sourceReference?: SortOrder
    confidenceScore?: SortOrder
    approvedBy?: SortOrder
    approvedAt?: SortOrder
    rejectionReason?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AbsenceRecordSumOrderByAggregateInput = {
    totalDays?: SortOrder
    confidenceScore?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EmailIntegrationCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    configuration?: SortOrder
    encryptedCredentials?: SortOrder
    isActive?: SortOrder
    lastSync?: SortOrder
    syncStatus?: SortOrder
    errorMessage?: SortOrder
    syncFrequencyMinutes?: SortOrder
    totalEmailsProcessed?: SortOrder
    lastEmailProcessedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailIntegrationAvgOrderByAggregateInput = {
    syncFrequencyMinutes?: SortOrder
    totalEmailsProcessed?: SortOrder
  }

  export type EmailIntegrationMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    encryptedCredentials?: SortOrder
    isActive?: SortOrder
    lastSync?: SortOrder
    syncStatus?: SortOrder
    errorMessage?: SortOrder
    syncFrequencyMinutes?: SortOrder
    totalEmailsProcessed?: SortOrder
    lastEmailProcessedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailIntegrationMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    encryptedCredentials?: SortOrder
    isActive?: SortOrder
    lastSync?: SortOrder
    syncStatus?: SortOrder
    errorMessage?: SortOrder
    syncFrequencyMinutes?: SortOrder
    totalEmailsProcessed?: SortOrder
    lastEmailProcessedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailIntegrationSumOrderByAggregateInput = {
    syncFrequencyMinutes?: SortOrder
    totalEmailsProcessed?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AIProcessingLogCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    processingType?: SortOrder
    provider?: SortOrder
    inputData?: SortOrder
    aiResponse?: SortOrder
    confidenceScore?: SortOrder
    status?: SortOrder
    errorMessage?: SortOrder
    processingTimeMs?: SortOrder
    costUsd?: SortOrder
    tokensUsed?: SortOrder
    relatedRecordId?: SortOrder
    createdAt?: SortOrder
  }

  export type AIProcessingLogAvgOrderByAggregateInput = {
    confidenceScore?: SortOrder
    processingTimeMs?: SortOrder
    costUsd?: SortOrder
    tokensUsed?: SortOrder
  }

  export type AIProcessingLogMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    processingType?: SortOrder
    provider?: SortOrder
    confidenceScore?: SortOrder
    status?: SortOrder
    errorMessage?: SortOrder
    processingTimeMs?: SortOrder
    costUsd?: SortOrder
    tokensUsed?: SortOrder
    relatedRecordId?: SortOrder
    createdAt?: SortOrder
  }

  export type AIProcessingLogMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    processingType?: SortOrder
    provider?: SortOrder
    confidenceScore?: SortOrder
    status?: SortOrder
    errorMessage?: SortOrder
    processingTimeMs?: SortOrder
    costUsd?: SortOrder
    tokensUsed?: SortOrder
    relatedRecordId?: SortOrder
    createdAt?: SortOrder
  }

  export type AIProcessingLogSumOrderByAggregateInput = {
    confidenceScore?: SortOrder
    processingTimeMs?: SortOrder
    costUsd?: SortOrder
    tokensUsed?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type SubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    stripeSubscriptionId?: SortOrder
    status?: SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    planName?: SortOrder
    planPrice?: SortOrder
    planInterval?: SortOrder
    cancelAtPeriodEnd?: SortOrder
    cancelledAt?: SortOrder
    trialStart?: SortOrder
    trialEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionAvgOrderByAggregateInput = {
    planPrice?: SortOrder
  }

  export type SubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    stripeSubscriptionId?: SortOrder
    status?: SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    planName?: SortOrder
    planPrice?: SortOrder
    planInterval?: SortOrder
    cancelAtPeriodEnd?: SortOrder
    cancelledAt?: SortOrder
    trialStart?: SortOrder
    trialEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    stripeSubscriptionId?: SortOrder
    status?: SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    planName?: SortOrder
    planPrice?: SortOrder
    planInterval?: SortOrder
    cancelAtPeriodEnd?: SortOrder
    cancelledAt?: SortOrder
    trialStart?: SortOrder
    trialEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionSumOrderByAggregateInput = {
    planPrice?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type UsageMetricsCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    metricType?: SortOrder
    metricValue?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    createdAt?: SortOrder
  }

  export type UsageMetricsAvgOrderByAggregateInput = {
    metricValue?: SortOrder
  }

  export type UsageMetricsMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    metricType?: SortOrder
    metricValue?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    createdAt?: SortOrder
  }

  export type UsageMetricsMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    metricType?: SortOrder
    metricValue?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    createdAt?: SortOrder
  }

  export type UsageMetricsSumOrderByAggregateInput = {
    metricValue?: SortOrder
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    action?: SortOrder
    oldValues?: SortOrder
    newValues?: SortOrder
    changedBy?: SortOrder
    changedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    action?: SortOrder
    changedBy?: SortOrder
    changedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    action?: SortOrder
    changedBy?: SortOrder
    changedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    data?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type EmployeeCreateNestedManyWithoutCompanyInput = {
    create?: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput> | EmployeeCreateWithoutCompanyInput[] | EmployeeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCompanyInput | EmployeeCreateOrConnectWithoutCompanyInput[]
    createMany?: EmployeeCreateManyCompanyInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type AbsenceTypeCreateNestedManyWithoutCompanyInput = {
    create?: XOR<AbsenceTypeCreateWithoutCompanyInput, AbsenceTypeUncheckedCreateWithoutCompanyInput> | AbsenceTypeCreateWithoutCompanyInput[] | AbsenceTypeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AbsenceTypeCreateOrConnectWithoutCompanyInput | AbsenceTypeCreateOrConnectWithoutCompanyInput[]
    createMany?: AbsenceTypeCreateManyCompanyInputEnvelope
    connect?: AbsenceTypeWhereUniqueInput | AbsenceTypeWhereUniqueInput[]
  }

  export type AbsenceRecordCreateNestedManyWithoutCompanyInput = {
    create?: XOR<AbsenceRecordCreateWithoutCompanyInput, AbsenceRecordUncheckedCreateWithoutCompanyInput> | AbsenceRecordCreateWithoutCompanyInput[] | AbsenceRecordUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AbsenceRecordCreateOrConnectWithoutCompanyInput | AbsenceRecordCreateOrConnectWithoutCompanyInput[]
    createMany?: AbsenceRecordCreateManyCompanyInputEnvelope
    connect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
  }

  export type EmailIntegrationCreateNestedManyWithoutCompanyInput = {
    create?: XOR<EmailIntegrationCreateWithoutCompanyInput, EmailIntegrationUncheckedCreateWithoutCompanyInput> | EmailIntegrationCreateWithoutCompanyInput[] | EmailIntegrationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmailIntegrationCreateOrConnectWithoutCompanyInput | EmailIntegrationCreateOrConnectWithoutCompanyInput[]
    createMany?: EmailIntegrationCreateManyCompanyInputEnvelope
    connect?: EmailIntegrationWhereUniqueInput | EmailIntegrationWhereUniqueInput[]
  }

  export type AIProcessingLogCreateNestedManyWithoutCompanyInput = {
    create?: XOR<AIProcessingLogCreateWithoutCompanyInput, AIProcessingLogUncheckedCreateWithoutCompanyInput> | AIProcessingLogCreateWithoutCompanyInput[] | AIProcessingLogUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AIProcessingLogCreateOrConnectWithoutCompanyInput | AIProcessingLogCreateOrConnectWithoutCompanyInput[]
    createMany?: AIProcessingLogCreateManyCompanyInputEnvelope
    connect?: AIProcessingLogWhereUniqueInput | AIProcessingLogWhereUniqueInput[]
  }

  export type SubscriptionCreateNestedManyWithoutCompanyInput = {
    create?: XOR<SubscriptionCreateWithoutCompanyInput, SubscriptionUncheckedCreateWithoutCompanyInput> | SubscriptionCreateWithoutCompanyInput[] | SubscriptionUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutCompanyInput | SubscriptionCreateOrConnectWithoutCompanyInput[]
    createMany?: SubscriptionCreateManyCompanyInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type UsageMetricsCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UsageMetricsCreateWithoutCompanyInput, UsageMetricsUncheckedCreateWithoutCompanyInput> | UsageMetricsCreateWithoutCompanyInput[] | UsageMetricsUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UsageMetricsCreateOrConnectWithoutCompanyInput | UsageMetricsCreateOrConnectWithoutCompanyInput[]
    createMany?: UsageMetricsCreateManyCompanyInputEnvelope
    connect?: UsageMetricsWhereUniqueInput | UsageMetricsWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutCompanyInput = {
    create?: XOR<AuditLogCreateWithoutCompanyInput, AuditLogUncheckedCreateWithoutCompanyInput> | AuditLogCreateWithoutCompanyInput[] | AuditLogUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutCompanyInput | AuditLogCreateOrConnectWithoutCompanyInput[]
    createMany?: AuditLogCreateManyCompanyInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutCompanyInput = {
    create?: XOR<NotificationCreateWithoutCompanyInput, NotificationUncheckedCreateWithoutCompanyInput> | NotificationCreateWithoutCompanyInput[] | NotificationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCompanyInput | NotificationCreateOrConnectWithoutCompanyInput[]
    createMany?: NotificationCreateManyCompanyInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput> | EmployeeCreateWithoutCompanyInput[] | EmployeeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCompanyInput | EmployeeCreateOrConnectWithoutCompanyInput[]
    createMany?: EmployeeCreateManyCompanyInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type AbsenceTypeUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<AbsenceTypeCreateWithoutCompanyInput, AbsenceTypeUncheckedCreateWithoutCompanyInput> | AbsenceTypeCreateWithoutCompanyInput[] | AbsenceTypeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AbsenceTypeCreateOrConnectWithoutCompanyInput | AbsenceTypeCreateOrConnectWithoutCompanyInput[]
    createMany?: AbsenceTypeCreateManyCompanyInputEnvelope
    connect?: AbsenceTypeWhereUniqueInput | AbsenceTypeWhereUniqueInput[]
  }

  export type AbsenceRecordUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<AbsenceRecordCreateWithoutCompanyInput, AbsenceRecordUncheckedCreateWithoutCompanyInput> | AbsenceRecordCreateWithoutCompanyInput[] | AbsenceRecordUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AbsenceRecordCreateOrConnectWithoutCompanyInput | AbsenceRecordCreateOrConnectWithoutCompanyInput[]
    createMany?: AbsenceRecordCreateManyCompanyInputEnvelope
    connect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
  }

  export type EmailIntegrationUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<EmailIntegrationCreateWithoutCompanyInput, EmailIntegrationUncheckedCreateWithoutCompanyInput> | EmailIntegrationCreateWithoutCompanyInput[] | EmailIntegrationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmailIntegrationCreateOrConnectWithoutCompanyInput | EmailIntegrationCreateOrConnectWithoutCompanyInput[]
    createMany?: EmailIntegrationCreateManyCompanyInputEnvelope
    connect?: EmailIntegrationWhereUniqueInput | EmailIntegrationWhereUniqueInput[]
  }

  export type AIProcessingLogUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<AIProcessingLogCreateWithoutCompanyInput, AIProcessingLogUncheckedCreateWithoutCompanyInput> | AIProcessingLogCreateWithoutCompanyInput[] | AIProcessingLogUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AIProcessingLogCreateOrConnectWithoutCompanyInput | AIProcessingLogCreateOrConnectWithoutCompanyInput[]
    createMany?: AIProcessingLogCreateManyCompanyInputEnvelope
    connect?: AIProcessingLogWhereUniqueInput | AIProcessingLogWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<SubscriptionCreateWithoutCompanyInput, SubscriptionUncheckedCreateWithoutCompanyInput> | SubscriptionCreateWithoutCompanyInput[] | SubscriptionUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutCompanyInput | SubscriptionCreateOrConnectWithoutCompanyInput[]
    createMany?: SubscriptionCreateManyCompanyInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type UsageMetricsUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UsageMetricsCreateWithoutCompanyInput, UsageMetricsUncheckedCreateWithoutCompanyInput> | UsageMetricsCreateWithoutCompanyInput[] | UsageMetricsUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UsageMetricsCreateOrConnectWithoutCompanyInput | UsageMetricsCreateOrConnectWithoutCompanyInput[]
    createMany?: UsageMetricsCreateManyCompanyInputEnvelope
    connect?: UsageMetricsWhereUniqueInput | UsageMetricsWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<AuditLogCreateWithoutCompanyInput, AuditLogUncheckedCreateWithoutCompanyInput> | AuditLogCreateWithoutCompanyInput[] | AuditLogUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutCompanyInput | AuditLogCreateOrConnectWithoutCompanyInput[]
    createMany?: AuditLogCreateManyCompanyInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<NotificationCreateWithoutCompanyInput, NotificationUncheckedCreateWithoutCompanyInput> | NotificationCreateWithoutCompanyInput[] | NotificationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCompanyInput | NotificationCreateOrConnectWithoutCompanyInput[]
    createMany?: NotificationCreateManyCompanyInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCompanyInput | UserUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCompanyInput | UserUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCompanyInput | UserUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type EmployeeUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput> | EmployeeCreateWithoutCompanyInput[] | EmployeeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCompanyInput | EmployeeCreateOrConnectWithoutCompanyInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutCompanyInput | EmployeeUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: EmployeeCreateManyCompanyInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutCompanyInput | EmployeeUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutCompanyInput | EmployeeUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type AbsenceTypeUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<AbsenceTypeCreateWithoutCompanyInput, AbsenceTypeUncheckedCreateWithoutCompanyInput> | AbsenceTypeCreateWithoutCompanyInput[] | AbsenceTypeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AbsenceTypeCreateOrConnectWithoutCompanyInput | AbsenceTypeCreateOrConnectWithoutCompanyInput[]
    upsert?: AbsenceTypeUpsertWithWhereUniqueWithoutCompanyInput | AbsenceTypeUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: AbsenceTypeCreateManyCompanyInputEnvelope
    set?: AbsenceTypeWhereUniqueInput | AbsenceTypeWhereUniqueInput[]
    disconnect?: AbsenceTypeWhereUniqueInput | AbsenceTypeWhereUniqueInput[]
    delete?: AbsenceTypeWhereUniqueInput | AbsenceTypeWhereUniqueInput[]
    connect?: AbsenceTypeWhereUniqueInput | AbsenceTypeWhereUniqueInput[]
    update?: AbsenceTypeUpdateWithWhereUniqueWithoutCompanyInput | AbsenceTypeUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: AbsenceTypeUpdateManyWithWhereWithoutCompanyInput | AbsenceTypeUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: AbsenceTypeScalarWhereInput | AbsenceTypeScalarWhereInput[]
  }

  export type AbsenceRecordUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<AbsenceRecordCreateWithoutCompanyInput, AbsenceRecordUncheckedCreateWithoutCompanyInput> | AbsenceRecordCreateWithoutCompanyInput[] | AbsenceRecordUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AbsenceRecordCreateOrConnectWithoutCompanyInput | AbsenceRecordCreateOrConnectWithoutCompanyInput[]
    upsert?: AbsenceRecordUpsertWithWhereUniqueWithoutCompanyInput | AbsenceRecordUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: AbsenceRecordCreateManyCompanyInputEnvelope
    set?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    disconnect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    delete?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    connect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    update?: AbsenceRecordUpdateWithWhereUniqueWithoutCompanyInput | AbsenceRecordUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: AbsenceRecordUpdateManyWithWhereWithoutCompanyInput | AbsenceRecordUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: AbsenceRecordScalarWhereInput | AbsenceRecordScalarWhereInput[]
  }

  export type EmailIntegrationUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<EmailIntegrationCreateWithoutCompanyInput, EmailIntegrationUncheckedCreateWithoutCompanyInput> | EmailIntegrationCreateWithoutCompanyInput[] | EmailIntegrationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmailIntegrationCreateOrConnectWithoutCompanyInput | EmailIntegrationCreateOrConnectWithoutCompanyInput[]
    upsert?: EmailIntegrationUpsertWithWhereUniqueWithoutCompanyInput | EmailIntegrationUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: EmailIntegrationCreateManyCompanyInputEnvelope
    set?: EmailIntegrationWhereUniqueInput | EmailIntegrationWhereUniqueInput[]
    disconnect?: EmailIntegrationWhereUniqueInput | EmailIntegrationWhereUniqueInput[]
    delete?: EmailIntegrationWhereUniqueInput | EmailIntegrationWhereUniqueInput[]
    connect?: EmailIntegrationWhereUniqueInput | EmailIntegrationWhereUniqueInput[]
    update?: EmailIntegrationUpdateWithWhereUniqueWithoutCompanyInput | EmailIntegrationUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: EmailIntegrationUpdateManyWithWhereWithoutCompanyInput | EmailIntegrationUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: EmailIntegrationScalarWhereInput | EmailIntegrationScalarWhereInput[]
  }

  export type AIProcessingLogUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<AIProcessingLogCreateWithoutCompanyInput, AIProcessingLogUncheckedCreateWithoutCompanyInput> | AIProcessingLogCreateWithoutCompanyInput[] | AIProcessingLogUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AIProcessingLogCreateOrConnectWithoutCompanyInput | AIProcessingLogCreateOrConnectWithoutCompanyInput[]
    upsert?: AIProcessingLogUpsertWithWhereUniqueWithoutCompanyInput | AIProcessingLogUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: AIProcessingLogCreateManyCompanyInputEnvelope
    set?: AIProcessingLogWhereUniqueInput | AIProcessingLogWhereUniqueInput[]
    disconnect?: AIProcessingLogWhereUniqueInput | AIProcessingLogWhereUniqueInput[]
    delete?: AIProcessingLogWhereUniqueInput | AIProcessingLogWhereUniqueInput[]
    connect?: AIProcessingLogWhereUniqueInput | AIProcessingLogWhereUniqueInput[]
    update?: AIProcessingLogUpdateWithWhereUniqueWithoutCompanyInput | AIProcessingLogUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: AIProcessingLogUpdateManyWithWhereWithoutCompanyInput | AIProcessingLogUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: AIProcessingLogScalarWhereInput | AIProcessingLogScalarWhereInput[]
  }

  export type SubscriptionUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<SubscriptionCreateWithoutCompanyInput, SubscriptionUncheckedCreateWithoutCompanyInput> | SubscriptionCreateWithoutCompanyInput[] | SubscriptionUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutCompanyInput | SubscriptionCreateOrConnectWithoutCompanyInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutCompanyInput | SubscriptionUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: SubscriptionCreateManyCompanyInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutCompanyInput | SubscriptionUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutCompanyInput | SubscriptionUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type UsageMetricsUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UsageMetricsCreateWithoutCompanyInput, UsageMetricsUncheckedCreateWithoutCompanyInput> | UsageMetricsCreateWithoutCompanyInput[] | UsageMetricsUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UsageMetricsCreateOrConnectWithoutCompanyInput | UsageMetricsCreateOrConnectWithoutCompanyInput[]
    upsert?: UsageMetricsUpsertWithWhereUniqueWithoutCompanyInput | UsageMetricsUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UsageMetricsCreateManyCompanyInputEnvelope
    set?: UsageMetricsWhereUniqueInput | UsageMetricsWhereUniqueInput[]
    disconnect?: UsageMetricsWhereUniqueInput | UsageMetricsWhereUniqueInput[]
    delete?: UsageMetricsWhereUniqueInput | UsageMetricsWhereUniqueInput[]
    connect?: UsageMetricsWhereUniqueInput | UsageMetricsWhereUniqueInput[]
    update?: UsageMetricsUpdateWithWhereUniqueWithoutCompanyInput | UsageMetricsUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UsageMetricsUpdateManyWithWhereWithoutCompanyInput | UsageMetricsUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UsageMetricsScalarWhereInput | UsageMetricsScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<AuditLogCreateWithoutCompanyInput, AuditLogUncheckedCreateWithoutCompanyInput> | AuditLogCreateWithoutCompanyInput[] | AuditLogUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutCompanyInput | AuditLogCreateOrConnectWithoutCompanyInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutCompanyInput | AuditLogUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: AuditLogCreateManyCompanyInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutCompanyInput | AuditLogUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutCompanyInput | AuditLogUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<NotificationCreateWithoutCompanyInput, NotificationUncheckedCreateWithoutCompanyInput> | NotificationCreateWithoutCompanyInput[] | NotificationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCompanyInput | NotificationCreateOrConnectWithoutCompanyInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutCompanyInput | NotificationUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: NotificationCreateManyCompanyInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutCompanyInput | NotificationUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutCompanyInput | NotificationUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCompanyInput | UserUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCompanyInput | UserUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCompanyInput | UserUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type EmployeeUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput> | EmployeeCreateWithoutCompanyInput[] | EmployeeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCompanyInput | EmployeeCreateOrConnectWithoutCompanyInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutCompanyInput | EmployeeUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: EmployeeCreateManyCompanyInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutCompanyInput | EmployeeUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutCompanyInput | EmployeeUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type AbsenceTypeUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<AbsenceTypeCreateWithoutCompanyInput, AbsenceTypeUncheckedCreateWithoutCompanyInput> | AbsenceTypeCreateWithoutCompanyInput[] | AbsenceTypeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AbsenceTypeCreateOrConnectWithoutCompanyInput | AbsenceTypeCreateOrConnectWithoutCompanyInput[]
    upsert?: AbsenceTypeUpsertWithWhereUniqueWithoutCompanyInput | AbsenceTypeUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: AbsenceTypeCreateManyCompanyInputEnvelope
    set?: AbsenceTypeWhereUniqueInput | AbsenceTypeWhereUniqueInput[]
    disconnect?: AbsenceTypeWhereUniqueInput | AbsenceTypeWhereUniqueInput[]
    delete?: AbsenceTypeWhereUniqueInput | AbsenceTypeWhereUniqueInput[]
    connect?: AbsenceTypeWhereUniqueInput | AbsenceTypeWhereUniqueInput[]
    update?: AbsenceTypeUpdateWithWhereUniqueWithoutCompanyInput | AbsenceTypeUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: AbsenceTypeUpdateManyWithWhereWithoutCompanyInput | AbsenceTypeUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: AbsenceTypeScalarWhereInput | AbsenceTypeScalarWhereInput[]
  }

  export type AbsenceRecordUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<AbsenceRecordCreateWithoutCompanyInput, AbsenceRecordUncheckedCreateWithoutCompanyInput> | AbsenceRecordCreateWithoutCompanyInput[] | AbsenceRecordUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AbsenceRecordCreateOrConnectWithoutCompanyInput | AbsenceRecordCreateOrConnectWithoutCompanyInput[]
    upsert?: AbsenceRecordUpsertWithWhereUniqueWithoutCompanyInput | AbsenceRecordUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: AbsenceRecordCreateManyCompanyInputEnvelope
    set?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    disconnect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    delete?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    connect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    update?: AbsenceRecordUpdateWithWhereUniqueWithoutCompanyInput | AbsenceRecordUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: AbsenceRecordUpdateManyWithWhereWithoutCompanyInput | AbsenceRecordUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: AbsenceRecordScalarWhereInput | AbsenceRecordScalarWhereInput[]
  }

  export type EmailIntegrationUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<EmailIntegrationCreateWithoutCompanyInput, EmailIntegrationUncheckedCreateWithoutCompanyInput> | EmailIntegrationCreateWithoutCompanyInput[] | EmailIntegrationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmailIntegrationCreateOrConnectWithoutCompanyInput | EmailIntegrationCreateOrConnectWithoutCompanyInput[]
    upsert?: EmailIntegrationUpsertWithWhereUniqueWithoutCompanyInput | EmailIntegrationUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: EmailIntegrationCreateManyCompanyInputEnvelope
    set?: EmailIntegrationWhereUniqueInput | EmailIntegrationWhereUniqueInput[]
    disconnect?: EmailIntegrationWhereUniqueInput | EmailIntegrationWhereUniqueInput[]
    delete?: EmailIntegrationWhereUniqueInput | EmailIntegrationWhereUniqueInput[]
    connect?: EmailIntegrationWhereUniqueInput | EmailIntegrationWhereUniqueInput[]
    update?: EmailIntegrationUpdateWithWhereUniqueWithoutCompanyInput | EmailIntegrationUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: EmailIntegrationUpdateManyWithWhereWithoutCompanyInput | EmailIntegrationUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: EmailIntegrationScalarWhereInput | EmailIntegrationScalarWhereInput[]
  }

  export type AIProcessingLogUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<AIProcessingLogCreateWithoutCompanyInput, AIProcessingLogUncheckedCreateWithoutCompanyInput> | AIProcessingLogCreateWithoutCompanyInput[] | AIProcessingLogUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AIProcessingLogCreateOrConnectWithoutCompanyInput | AIProcessingLogCreateOrConnectWithoutCompanyInput[]
    upsert?: AIProcessingLogUpsertWithWhereUniqueWithoutCompanyInput | AIProcessingLogUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: AIProcessingLogCreateManyCompanyInputEnvelope
    set?: AIProcessingLogWhereUniqueInput | AIProcessingLogWhereUniqueInput[]
    disconnect?: AIProcessingLogWhereUniqueInput | AIProcessingLogWhereUniqueInput[]
    delete?: AIProcessingLogWhereUniqueInput | AIProcessingLogWhereUniqueInput[]
    connect?: AIProcessingLogWhereUniqueInput | AIProcessingLogWhereUniqueInput[]
    update?: AIProcessingLogUpdateWithWhereUniqueWithoutCompanyInput | AIProcessingLogUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: AIProcessingLogUpdateManyWithWhereWithoutCompanyInput | AIProcessingLogUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: AIProcessingLogScalarWhereInput | AIProcessingLogScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<SubscriptionCreateWithoutCompanyInput, SubscriptionUncheckedCreateWithoutCompanyInput> | SubscriptionCreateWithoutCompanyInput[] | SubscriptionUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutCompanyInput | SubscriptionCreateOrConnectWithoutCompanyInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutCompanyInput | SubscriptionUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: SubscriptionCreateManyCompanyInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutCompanyInput | SubscriptionUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutCompanyInput | SubscriptionUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type UsageMetricsUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UsageMetricsCreateWithoutCompanyInput, UsageMetricsUncheckedCreateWithoutCompanyInput> | UsageMetricsCreateWithoutCompanyInput[] | UsageMetricsUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UsageMetricsCreateOrConnectWithoutCompanyInput | UsageMetricsCreateOrConnectWithoutCompanyInput[]
    upsert?: UsageMetricsUpsertWithWhereUniqueWithoutCompanyInput | UsageMetricsUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UsageMetricsCreateManyCompanyInputEnvelope
    set?: UsageMetricsWhereUniqueInput | UsageMetricsWhereUniqueInput[]
    disconnect?: UsageMetricsWhereUniqueInput | UsageMetricsWhereUniqueInput[]
    delete?: UsageMetricsWhereUniqueInput | UsageMetricsWhereUniqueInput[]
    connect?: UsageMetricsWhereUniqueInput | UsageMetricsWhereUniqueInput[]
    update?: UsageMetricsUpdateWithWhereUniqueWithoutCompanyInput | UsageMetricsUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UsageMetricsUpdateManyWithWhereWithoutCompanyInput | UsageMetricsUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UsageMetricsScalarWhereInput | UsageMetricsScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<AuditLogCreateWithoutCompanyInput, AuditLogUncheckedCreateWithoutCompanyInput> | AuditLogCreateWithoutCompanyInput[] | AuditLogUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutCompanyInput | AuditLogCreateOrConnectWithoutCompanyInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutCompanyInput | AuditLogUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: AuditLogCreateManyCompanyInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutCompanyInput | AuditLogUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutCompanyInput | AuditLogUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<NotificationCreateWithoutCompanyInput, NotificationUncheckedCreateWithoutCompanyInput> | NotificationCreateWithoutCompanyInput[] | NotificationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCompanyInput | NotificationCreateOrConnectWithoutCompanyInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutCompanyInput | NotificationUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: NotificationCreateManyCompanyInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutCompanyInput | NotificationUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutCompanyInput | NotificationUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutUsersInput = {
    create?: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUsersInput
    connect?: CompanyWhereUniqueInput
  }

  export type AbsenceRecordCreateNestedManyWithoutCreatorInput = {
    create?: XOR<AbsenceRecordCreateWithoutCreatorInput, AbsenceRecordUncheckedCreateWithoutCreatorInput> | AbsenceRecordCreateWithoutCreatorInput[] | AbsenceRecordUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AbsenceRecordCreateOrConnectWithoutCreatorInput | AbsenceRecordCreateOrConnectWithoutCreatorInput[]
    createMany?: AbsenceRecordCreateManyCreatorInputEnvelope
    connect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
  }

  export type AbsenceRecordCreateNestedManyWithoutApproverInput = {
    create?: XOR<AbsenceRecordCreateWithoutApproverInput, AbsenceRecordUncheckedCreateWithoutApproverInput> | AbsenceRecordCreateWithoutApproverInput[] | AbsenceRecordUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: AbsenceRecordCreateOrConnectWithoutApproverInput | AbsenceRecordCreateOrConnectWithoutApproverInput[]
    createMany?: AbsenceRecordCreateManyApproverInputEnvelope
    connect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type AbsenceRecordUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<AbsenceRecordCreateWithoutCreatorInput, AbsenceRecordUncheckedCreateWithoutCreatorInput> | AbsenceRecordCreateWithoutCreatorInput[] | AbsenceRecordUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AbsenceRecordCreateOrConnectWithoutCreatorInput | AbsenceRecordCreateOrConnectWithoutCreatorInput[]
    createMany?: AbsenceRecordCreateManyCreatorInputEnvelope
    connect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
  }

  export type AbsenceRecordUncheckedCreateNestedManyWithoutApproverInput = {
    create?: XOR<AbsenceRecordCreateWithoutApproverInput, AbsenceRecordUncheckedCreateWithoutApproverInput> | AbsenceRecordCreateWithoutApproverInput[] | AbsenceRecordUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: AbsenceRecordCreateOrConnectWithoutApproverInput | AbsenceRecordCreateOrConnectWithoutApproverInput[]
    createMany?: AbsenceRecordCreateManyApproverInputEnvelope
    connect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CompanyUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUsersInput
    upsert?: CompanyUpsertWithoutUsersInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutUsersInput, CompanyUpdateWithoutUsersInput>, CompanyUncheckedUpdateWithoutUsersInput>
  }

  export type AbsenceRecordUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<AbsenceRecordCreateWithoutCreatorInput, AbsenceRecordUncheckedCreateWithoutCreatorInput> | AbsenceRecordCreateWithoutCreatorInput[] | AbsenceRecordUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AbsenceRecordCreateOrConnectWithoutCreatorInput | AbsenceRecordCreateOrConnectWithoutCreatorInput[]
    upsert?: AbsenceRecordUpsertWithWhereUniqueWithoutCreatorInput | AbsenceRecordUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: AbsenceRecordCreateManyCreatorInputEnvelope
    set?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    disconnect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    delete?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    connect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    update?: AbsenceRecordUpdateWithWhereUniqueWithoutCreatorInput | AbsenceRecordUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: AbsenceRecordUpdateManyWithWhereWithoutCreatorInput | AbsenceRecordUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: AbsenceRecordScalarWhereInput | AbsenceRecordScalarWhereInput[]
  }

  export type AbsenceRecordUpdateManyWithoutApproverNestedInput = {
    create?: XOR<AbsenceRecordCreateWithoutApproverInput, AbsenceRecordUncheckedCreateWithoutApproverInput> | AbsenceRecordCreateWithoutApproverInput[] | AbsenceRecordUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: AbsenceRecordCreateOrConnectWithoutApproverInput | AbsenceRecordCreateOrConnectWithoutApproverInput[]
    upsert?: AbsenceRecordUpsertWithWhereUniqueWithoutApproverInput | AbsenceRecordUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: AbsenceRecordCreateManyApproverInputEnvelope
    set?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    disconnect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    delete?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    connect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    update?: AbsenceRecordUpdateWithWhereUniqueWithoutApproverInput | AbsenceRecordUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: AbsenceRecordUpdateManyWithWhereWithoutApproverInput | AbsenceRecordUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: AbsenceRecordScalarWhereInput | AbsenceRecordScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type AbsenceRecordUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<AbsenceRecordCreateWithoutCreatorInput, AbsenceRecordUncheckedCreateWithoutCreatorInput> | AbsenceRecordCreateWithoutCreatorInput[] | AbsenceRecordUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AbsenceRecordCreateOrConnectWithoutCreatorInput | AbsenceRecordCreateOrConnectWithoutCreatorInput[]
    upsert?: AbsenceRecordUpsertWithWhereUniqueWithoutCreatorInput | AbsenceRecordUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: AbsenceRecordCreateManyCreatorInputEnvelope
    set?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    disconnect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    delete?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    connect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    update?: AbsenceRecordUpdateWithWhereUniqueWithoutCreatorInput | AbsenceRecordUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: AbsenceRecordUpdateManyWithWhereWithoutCreatorInput | AbsenceRecordUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: AbsenceRecordScalarWhereInput | AbsenceRecordScalarWhereInput[]
  }

  export type AbsenceRecordUncheckedUpdateManyWithoutApproverNestedInput = {
    create?: XOR<AbsenceRecordCreateWithoutApproverInput, AbsenceRecordUncheckedCreateWithoutApproverInput> | AbsenceRecordCreateWithoutApproverInput[] | AbsenceRecordUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: AbsenceRecordCreateOrConnectWithoutApproverInput | AbsenceRecordCreateOrConnectWithoutApproverInput[]
    upsert?: AbsenceRecordUpsertWithWhereUniqueWithoutApproverInput | AbsenceRecordUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: AbsenceRecordCreateManyApproverInputEnvelope
    set?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    disconnect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    delete?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    connect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    update?: AbsenceRecordUpdateWithWhereUniqueWithoutApproverInput | AbsenceRecordUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: AbsenceRecordUpdateManyWithWhereWithoutApproverInput | AbsenceRecordUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: AbsenceRecordScalarWhereInput | AbsenceRecordScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutEmployeesInput = {
    create?: XOR<CompanyCreateWithoutEmployeesInput, CompanyUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutEmployeesInput
    connect?: CompanyWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutSubordinatesInput = {
    create?: XOR<EmployeeCreateWithoutSubordinatesInput, EmployeeUncheckedCreateWithoutSubordinatesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutSubordinatesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedManyWithoutManagerInput = {
    create?: XOR<EmployeeCreateWithoutManagerInput, EmployeeUncheckedCreateWithoutManagerInput> | EmployeeCreateWithoutManagerInput[] | EmployeeUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutManagerInput | EmployeeCreateOrConnectWithoutManagerInput[]
    createMany?: EmployeeCreateManyManagerInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type AbsenceRecordCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<AbsenceRecordCreateWithoutEmployeeInput, AbsenceRecordUncheckedCreateWithoutEmployeeInput> | AbsenceRecordCreateWithoutEmployeeInput[] | AbsenceRecordUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: AbsenceRecordCreateOrConnectWithoutEmployeeInput | AbsenceRecordCreateOrConnectWithoutEmployeeInput[]
    createMany?: AbsenceRecordCreateManyEmployeeInputEnvelope
    connect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedManyWithoutManagerInput = {
    create?: XOR<EmployeeCreateWithoutManagerInput, EmployeeUncheckedCreateWithoutManagerInput> | EmployeeCreateWithoutManagerInput[] | EmployeeUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutManagerInput | EmployeeCreateOrConnectWithoutManagerInput[]
    createMany?: EmployeeCreateManyManagerInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type AbsenceRecordUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<AbsenceRecordCreateWithoutEmployeeInput, AbsenceRecordUncheckedCreateWithoutEmployeeInput> | AbsenceRecordCreateWithoutEmployeeInput[] | AbsenceRecordUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: AbsenceRecordCreateOrConnectWithoutEmployeeInput | AbsenceRecordCreateOrConnectWithoutEmployeeInput[]
    createMany?: AbsenceRecordCreateManyEmployeeInputEnvelope
    connect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type CompanyUpdateOneRequiredWithoutEmployeesNestedInput = {
    create?: XOR<CompanyCreateWithoutEmployeesInput, CompanyUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutEmployeesInput
    upsert?: CompanyUpsertWithoutEmployeesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutEmployeesInput, CompanyUpdateWithoutEmployeesInput>, CompanyUncheckedUpdateWithoutEmployeesInput>
  }

  export type EmployeeUpdateOneWithoutSubordinatesNestedInput = {
    create?: XOR<EmployeeCreateWithoutSubordinatesInput, EmployeeUncheckedCreateWithoutSubordinatesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutSubordinatesInput
    upsert?: EmployeeUpsertWithoutSubordinatesInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutSubordinatesInput, EmployeeUpdateWithoutSubordinatesInput>, EmployeeUncheckedUpdateWithoutSubordinatesInput>
  }

  export type EmployeeUpdateManyWithoutManagerNestedInput = {
    create?: XOR<EmployeeCreateWithoutManagerInput, EmployeeUncheckedCreateWithoutManagerInput> | EmployeeCreateWithoutManagerInput[] | EmployeeUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutManagerInput | EmployeeCreateOrConnectWithoutManagerInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutManagerInput | EmployeeUpsertWithWhereUniqueWithoutManagerInput[]
    createMany?: EmployeeCreateManyManagerInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutManagerInput | EmployeeUpdateWithWhereUniqueWithoutManagerInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutManagerInput | EmployeeUpdateManyWithWhereWithoutManagerInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type AbsenceRecordUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<AbsenceRecordCreateWithoutEmployeeInput, AbsenceRecordUncheckedCreateWithoutEmployeeInput> | AbsenceRecordCreateWithoutEmployeeInput[] | AbsenceRecordUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: AbsenceRecordCreateOrConnectWithoutEmployeeInput | AbsenceRecordCreateOrConnectWithoutEmployeeInput[]
    upsert?: AbsenceRecordUpsertWithWhereUniqueWithoutEmployeeInput | AbsenceRecordUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: AbsenceRecordCreateManyEmployeeInputEnvelope
    set?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    disconnect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    delete?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    connect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    update?: AbsenceRecordUpdateWithWhereUniqueWithoutEmployeeInput | AbsenceRecordUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: AbsenceRecordUpdateManyWithWhereWithoutEmployeeInput | AbsenceRecordUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: AbsenceRecordScalarWhereInput | AbsenceRecordScalarWhereInput[]
  }

  export type EmployeeUncheckedUpdateManyWithoutManagerNestedInput = {
    create?: XOR<EmployeeCreateWithoutManagerInput, EmployeeUncheckedCreateWithoutManagerInput> | EmployeeCreateWithoutManagerInput[] | EmployeeUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutManagerInput | EmployeeCreateOrConnectWithoutManagerInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutManagerInput | EmployeeUpsertWithWhereUniqueWithoutManagerInput[]
    createMany?: EmployeeCreateManyManagerInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutManagerInput | EmployeeUpdateWithWhereUniqueWithoutManagerInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutManagerInput | EmployeeUpdateManyWithWhereWithoutManagerInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type AbsenceRecordUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<AbsenceRecordCreateWithoutEmployeeInput, AbsenceRecordUncheckedCreateWithoutEmployeeInput> | AbsenceRecordCreateWithoutEmployeeInput[] | AbsenceRecordUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: AbsenceRecordCreateOrConnectWithoutEmployeeInput | AbsenceRecordCreateOrConnectWithoutEmployeeInput[]
    upsert?: AbsenceRecordUpsertWithWhereUniqueWithoutEmployeeInput | AbsenceRecordUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: AbsenceRecordCreateManyEmployeeInputEnvelope
    set?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    disconnect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    delete?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    connect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    update?: AbsenceRecordUpdateWithWhereUniqueWithoutEmployeeInput | AbsenceRecordUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: AbsenceRecordUpdateManyWithWhereWithoutEmployeeInput | AbsenceRecordUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: AbsenceRecordScalarWhereInput | AbsenceRecordScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutAbsenceTypesInput = {
    create?: XOR<CompanyCreateWithoutAbsenceTypesInput, CompanyUncheckedCreateWithoutAbsenceTypesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutAbsenceTypesInput
    connect?: CompanyWhereUniqueInput
  }

  export type AbsenceRecordCreateNestedManyWithoutAbsenceTypeInput = {
    create?: XOR<AbsenceRecordCreateWithoutAbsenceTypeInput, AbsenceRecordUncheckedCreateWithoutAbsenceTypeInput> | AbsenceRecordCreateWithoutAbsenceTypeInput[] | AbsenceRecordUncheckedCreateWithoutAbsenceTypeInput[]
    connectOrCreate?: AbsenceRecordCreateOrConnectWithoutAbsenceTypeInput | AbsenceRecordCreateOrConnectWithoutAbsenceTypeInput[]
    createMany?: AbsenceRecordCreateManyAbsenceTypeInputEnvelope
    connect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
  }

  export type AbsenceRecordUncheckedCreateNestedManyWithoutAbsenceTypeInput = {
    create?: XOR<AbsenceRecordCreateWithoutAbsenceTypeInput, AbsenceRecordUncheckedCreateWithoutAbsenceTypeInput> | AbsenceRecordCreateWithoutAbsenceTypeInput[] | AbsenceRecordUncheckedCreateWithoutAbsenceTypeInput[]
    connectOrCreate?: AbsenceRecordCreateOrConnectWithoutAbsenceTypeInput | AbsenceRecordCreateOrConnectWithoutAbsenceTypeInput[]
    createMany?: AbsenceRecordCreateManyAbsenceTypeInputEnvelope
    connect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CompanyUpdateOneRequiredWithoutAbsenceTypesNestedInput = {
    create?: XOR<CompanyCreateWithoutAbsenceTypesInput, CompanyUncheckedCreateWithoutAbsenceTypesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutAbsenceTypesInput
    upsert?: CompanyUpsertWithoutAbsenceTypesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutAbsenceTypesInput, CompanyUpdateWithoutAbsenceTypesInput>, CompanyUncheckedUpdateWithoutAbsenceTypesInput>
  }

  export type AbsenceRecordUpdateManyWithoutAbsenceTypeNestedInput = {
    create?: XOR<AbsenceRecordCreateWithoutAbsenceTypeInput, AbsenceRecordUncheckedCreateWithoutAbsenceTypeInput> | AbsenceRecordCreateWithoutAbsenceTypeInput[] | AbsenceRecordUncheckedCreateWithoutAbsenceTypeInput[]
    connectOrCreate?: AbsenceRecordCreateOrConnectWithoutAbsenceTypeInput | AbsenceRecordCreateOrConnectWithoutAbsenceTypeInput[]
    upsert?: AbsenceRecordUpsertWithWhereUniqueWithoutAbsenceTypeInput | AbsenceRecordUpsertWithWhereUniqueWithoutAbsenceTypeInput[]
    createMany?: AbsenceRecordCreateManyAbsenceTypeInputEnvelope
    set?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    disconnect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    delete?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    connect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    update?: AbsenceRecordUpdateWithWhereUniqueWithoutAbsenceTypeInput | AbsenceRecordUpdateWithWhereUniqueWithoutAbsenceTypeInput[]
    updateMany?: AbsenceRecordUpdateManyWithWhereWithoutAbsenceTypeInput | AbsenceRecordUpdateManyWithWhereWithoutAbsenceTypeInput[]
    deleteMany?: AbsenceRecordScalarWhereInput | AbsenceRecordScalarWhereInput[]
  }

  export type AbsenceRecordUncheckedUpdateManyWithoutAbsenceTypeNestedInput = {
    create?: XOR<AbsenceRecordCreateWithoutAbsenceTypeInput, AbsenceRecordUncheckedCreateWithoutAbsenceTypeInput> | AbsenceRecordCreateWithoutAbsenceTypeInput[] | AbsenceRecordUncheckedCreateWithoutAbsenceTypeInput[]
    connectOrCreate?: AbsenceRecordCreateOrConnectWithoutAbsenceTypeInput | AbsenceRecordCreateOrConnectWithoutAbsenceTypeInput[]
    upsert?: AbsenceRecordUpsertWithWhereUniqueWithoutAbsenceTypeInput | AbsenceRecordUpsertWithWhereUniqueWithoutAbsenceTypeInput[]
    createMany?: AbsenceRecordCreateManyAbsenceTypeInputEnvelope
    set?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    disconnect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    delete?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    connect?: AbsenceRecordWhereUniqueInput | AbsenceRecordWhereUniqueInput[]
    update?: AbsenceRecordUpdateWithWhereUniqueWithoutAbsenceTypeInput | AbsenceRecordUpdateWithWhereUniqueWithoutAbsenceTypeInput[]
    updateMany?: AbsenceRecordUpdateManyWithWhereWithoutAbsenceTypeInput | AbsenceRecordUpdateManyWithWhereWithoutAbsenceTypeInput[]
    deleteMany?: AbsenceRecordScalarWhereInput | AbsenceRecordScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutAbsenceRecordsInput = {
    create?: XOR<CompanyCreateWithoutAbsenceRecordsInput, CompanyUncheckedCreateWithoutAbsenceRecordsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutAbsenceRecordsInput
    connect?: CompanyWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutAbsenceRecordsInput = {
    create?: XOR<EmployeeCreateWithoutAbsenceRecordsInput, EmployeeUncheckedCreateWithoutAbsenceRecordsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutAbsenceRecordsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type AbsenceTypeCreateNestedOneWithoutAbsenceRecordsInput = {
    create?: XOR<AbsenceTypeCreateWithoutAbsenceRecordsInput, AbsenceTypeUncheckedCreateWithoutAbsenceRecordsInput>
    connectOrCreate?: AbsenceTypeCreateOrConnectWithoutAbsenceRecordsInput
    connect?: AbsenceTypeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedAbsenceRecordsInput = {
    create?: XOR<UserCreateWithoutCreatedAbsenceRecordsInput, UserUncheckedCreateWithoutCreatedAbsenceRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedAbsenceRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutApprovedAbsenceRecordsInput = {
    create?: XOR<UserCreateWithoutApprovedAbsenceRecordsInput, UserUncheckedCreateWithoutApprovedAbsenceRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovedAbsenceRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CompanyUpdateOneRequiredWithoutAbsenceRecordsNestedInput = {
    create?: XOR<CompanyCreateWithoutAbsenceRecordsInput, CompanyUncheckedCreateWithoutAbsenceRecordsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutAbsenceRecordsInput
    upsert?: CompanyUpsertWithoutAbsenceRecordsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutAbsenceRecordsInput, CompanyUpdateWithoutAbsenceRecordsInput>, CompanyUncheckedUpdateWithoutAbsenceRecordsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutAbsenceRecordsNestedInput = {
    create?: XOR<EmployeeCreateWithoutAbsenceRecordsInput, EmployeeUncheckedCreateWithoutAbsenceRecordsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutAbsenceRecordsInput
    upsert?: EmployeeUpsertWithoutAbsenceRecordsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutAbsenceRecordsInput, EmployeeUpdateWithoutAbsenceRecordsInput>, EmployeeUncheckedUpdateWithoutAbsenceRecordsInput>
  }

  export type AbsenceTypeUpdateOneRequiredWithoutAbsenceRecordsNestedInput = {
    create?: XOR<AbsenceTypeCreateWithoutAbsenceRecordsInput, AbsenceTypeUncheckedCreateWithoutAbsenceRecordsInput>
    connectOrCreate?: AbsenceTypeCreateOrConnectWithoutAbsenceRecordsInput
    upsert?: AbsenceTypeUpsertWithoutAbsenceRecordsInput
    connect?: AbsenceTypeWhereUniqueInput
    update?: XOR<XOR<AbsenceTypeUpdateToOneWithWhereWithoutAbsenceRecordsInput, AbsenceTypeUpdateWithoutAbsenceRecordsInput>, AbsenceTypeUncheckedUpdateWithoutAbsenceRecordsInput>
  }

  export type UserUpdateOneWithoutCreatedAbsenceRecordsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedAbsenceRecordsInput, UserUncheckedCreateWithoutCreatedAbsenceRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedAbsenceRecordsInput
    upsert?: UserUpsertWithoutCreatedAbsenceRecordsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedAbsenceRecordsInput, UserUpdateWithoutCreatedAbsenceRecordsInput>, UserUncheckedUpdateWithoutCreatedAbsenceRecordsInput>
  }

  export type UserUpdateOneWithoutApprovedAbsenceRecordsNestedInput = {
    create?: XOR<UserCreateWithoutApprovedAbsenceRecordsInput, UserUncheckedCreateWithoutApprovedAbsenceRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovedAbsenceRecordsInput
    upsert?: UserUpsertWithoutApprovedAbsenceRecordsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApprovedAbsenceRecordsInput, UserUpdateWithoutApprovedAbsenceRecordsInput>, UserUncheckedUpdateWithoutApprovedAbsenceRecordsInput>
  }

  export type CompanyCreateNestedOneWithoutEmailIntegrationsInput = {
    create?: XOR<CompanyCreateWithoutEmailIntegrationsInput, CompanyUncheckedCreateWithoutEmailIntegrationsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutEmailIntegrationsInput
    connect?: CompanyWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutEmailIntegrationsNestedInput = {
    create?: XOR<CompanyCreateWithoutEmailIntegrationsInput, CompanyUncheckedCreateWithoutEmailIntegrationsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutEmailIntegrationsInput
    upsert?: CompanyUpsertWithoutEmailIntegrationsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutEmailIntegrationsInput, CompanyUpdateWithoutEmailIntegrationsInput>, CompanyUncheckedUpdateWithoutEmailIntegrationsInput>
  }

  export type CompanyCreateNestedOneWithoutAiProcessingLogsInput = {
    create?: XOR<CompanyCreateWithoutAiProcessingLogsInput, CompanyUncheckedCreateWithoutAiProcessingLogsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutAiProcessingLogsInput
    connect?: CompanyWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutAiProcessingLogsNestedInput = {
    create?: XOR<CompanyCreateWithoutAiProcessingLogsInput, CompanyUncheckedCreateWithoutAiProcessingLogsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutAiProcessingLogsInput
    upsert?: CompanyUpsertWithoutAiProcessingLogsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutAiProcessingLogsInput, CompanyUpdateWithoutAiProcessingLogsInput>, CompanyUncheckedUpdateWithoutAiProcessingLogsInput>
  }

  export type CompanyCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<CompanyCreateWithoutSubscriptionsInput, CompanyUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutSubscriptionsInput
    connect?: CompanyWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type CompanyUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<CompanyCreateWithoutSubscriptionsInput, CompanyUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutSubscriptionsInput
    upsert?: CompanyUpsertWithoutSubscriptionsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutSubscriptionsInput, CompanyUpdateWithoutSubscriptionsInput>, CompanyUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type CompanyCreateNestedOneWithoutUsageMetricsInput = {
    create?: XOR<CompanyCreateWithoutUsageMetricsInput, CompanyUncheckedCreateWithoutUsageMetricsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUsageMetricsInput
    connect?: CompanyWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutUsageMetricsNestedInput = {
    create?: XOR<CompanyCreateWithoutUsageMetricsInput, CompanyUncheckedCreateWithoutUsageMetricsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUsageMetricsInput
    upsert?: CompanyUpsertWithoutUsageMetricsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutUsageMetricsInput, CompanyUpdateWithoutUsageMetricsInput>, CompanyUncheckedUpdateWithoutUsageMetricsInput>
  }

  export type CompanyCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<CompanyCreateWithoutAuditLogsInput, CompanyUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutAuditLogsInput
    connect?: CompanyWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<CompanyCreateWithoutAuditLogsInput, CompanyUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutAuditLogsInput
    upsert?: CompanyUpsertWithoutAuditLogsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutAuditLogsInput, CompanyUpdateWithoutAuditLogsInput>, CompanyUncheckedUpdateWithoutAuditLogsInput>
  }

  export type CompanyCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<CompanyCreateWithoutNotificationsInput, CompanyUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutNotificationsInput
    connect?: CompanyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<CompanyCreateWithoutNotificationsInput, CompanyUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutNotificationsInput
    upsert?: CompanyUpsertWithoutNotificationsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutNotificationsInput, CompanyUpdateWithoutNotificationsInput>, CompanyUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type UserCreateWithoutCompanyInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role?: string
    phone?: string | null
    passwordHash: string
    avatarUrl?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdAbsenceRecords?: AbsenceRecordCreateNestedManyWithoutCreatorInput
    approvedAbsenceRecords?: AbsenceRecordCreateNestedManyWithoutApproverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCompanyInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role?: string
    phone?: string | null
    passwordHash: string
    avatarUrl?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdAbsenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutCreatorInput
    approvedAbsenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutApproverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCompanyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type UserCreateManyCompanyInputEnvelope = {
    data: UserCreateManyCompanyInput | UserCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutCompanyInput = {
    id?: string
    employeeId?: string | null
    email?: string | null
    firstName: string
    lastName: string
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    terminationDate?: Date | string | null
    status?: string
    employmentType?: string | null
    workLocation?: string | null
    salaryCurrency?: string
    salaryAmount?: Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    manager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutManagerInput
    absenceRecords?: AbsenceRecordCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutCompanyInput = {
    id?: string
    employeeId?: string | null
    email?: string | null
    firstName: string
    lastName: string
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    terminationDate?: Date | string | null
    status?: string
    managerId?: string | null
    employmentType?: string | null
    workLocation?: string | null
    salaryCurrency?: string
    salaryAmount?: Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutManagerInput
    absenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutCompanyInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput>
  }

  export type EmployeeCreateManyCompanyInputEnvelope = {
    data: EmployeeCreateManyCompanyInput | EmployeeCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type AbsenceTypeCreateWithoutCompanyInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isPaid?: boolean
    requiresApproval?: boolean
    maxDaysPerYear?: number | null
    advanceNoticeDays?: number
    color?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    absenceRecords?: AbsenceRecordCreateNestedManyWithoutAbsenceTypeInput
  }

  export type AbsenceTypeUncheckedCreateWithoutCompanyInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isPaid?: boolean
    requiresApproval?: boolean
    maxDaysPerYear?: number | null
    advanceNoticeDays?: number
    color?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    absenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutAbsenceTypeInput
  }

  export type AbsenceTypeCreateOrConnectWithoutCompanyInput = {
    where: AbsenceTypeWhereUniqueInput
    create: XOR<AbsenceTypeCreateWithoutCompanyInput, AbsenceTypeUncheckedCreateWithoutCompanyInput>
  }

  export type AbsenceTypeCreateManyCompanyInputEnvelope = {
    data: AbsenceTypeCreateManyCompanyInput | AbsenceTypeCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type AbsenceRecordCreateWithoutCompanyInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    notes?: string | null
    status?: string
    source?: string
    sourceReference?: string | null
    confidenceScore?: number | null
    approvedAt?: Date | string | null
    rejectionReason?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutAbsenceRecordsInput
    absenceType: AbsenceTypeCreateNestedOneWithoutAbsenceRecordsInput
    creator?: UserCreateNestedOneWithoutCreatedAbsenceRecordsInput
    approver?: UserCreateNestedOneWithoutApprovedAbsenceRecordsInput
  }

  export type AbsenceRecordUncheckedCreateWithoutCompanyInput = {
    id?: string
    employeeId: string
    absenceTypeId: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    notes?: string | null
    status?: string
    source?: string
    sourceReference?: string | null
    confidenceScore?: number | null
    approvedBy?: string | null
    approvedAt?: Date | string | null
    rejectionReason?: string | null
    createdBy?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceRecordCreateOrConnectWithoutCompanyInput = {
    where: AbsenceRecordWhereUniqueInput
    create: XOR<AbsenceRecordCreateWithoutCompanyInput, AbsenceRecordUncheckedCreateWithoutCompanyInput>
  }

  export type AbsenceRecordCreateManyCompanyInputEnvelope = {
    data: AbsenceRecordCreateManyCompanyInput | AbsenceRecordCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type EmailIntegrationCreateWithoutCompanyInput = {
    id?: string
    name: string
    provider: string
    configuration?: JsonNullValueInput | InputJsonValue
    encryptedCredentials: string
    isActive?: boolean
    lastSync?: Date | string | null
    syncStatus?: string
    errorMessage?: string | null
    syncFrequencyMinutes?: number
    totalEmailsProcessed?: number
    lastEmailProcessedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailIntegrationUncheckedCreateWithoutCompanyInput = {
    id?: string
    name: string
    provider: string
    configuration?: JsonNullValueInput | InputJsonValue
    encryptedCredentials: string
    isActive?: boolean
    lastSync?: Date | string | null
    syncStatus?: string
    errorMessage?: string | null
    syncFrequencyMinutes?: number
    totalEmailsProcessed?: number
    lastEmailProcessedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailIntegrationCreateOrConnectWithoutCompanyInput = {
    where: EmailIntegrationWhereUniqueInput
    create: XOR<EmailIntegrationCreateWithoutCompanyInput, EmailIntegrationUncheckedCreateWithoutCompanyInput>
  }

  export type EmailIntegrationCreateManyCompanyInputEnvelope = {
    data: EmailIntegrationCreateManyCompanyInput | EmailIntegrationCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type AIProcessingLogCreateWithoutCompanyInput = {
    id?: string
    processingType: string
    provider: string
    inputData?: NullableJsonNullValueInput | InputJsonValue
    aiResponse?: NullableJsonNullValueInput | InputJsonValue
    confidenceScore?: number | null
    status?: string
    errorMessage?: string | null
    processingTimeMs?: number | null
    costUsd?: Decimal | DecimalJsLike | number | string | null
    tokensUsed?: number | null
    relatedRecordId?: string | null
    createdAt?: Date | string
  }

  export type AIProcessingLogUncheckedCreateWithoutCompanyInput = {
    id?: string
    processingType: string
    provider: string
    inputData?: NullableJsonNullValueInput | InputJsonValue
    aiResponse?: NullableJsonNullValueInput | InputJsonValue
    confidenceScore?: number | null
    status?: string
    errorMessage?: string | null
    processingTimeMs?: number | null
    costUsd?: Decimal | DecimalJsLike | number | string | null
    tokensUsed?: number | null
    relatedRecordId?: string | null
    createdAt?: Date | string
  }

  export type AIProcessingLogCreateOrConnectWithoutCompanyInput = {
    where: AIProcessingLogWhereUniqueInput
    create: XOR<AIProcessingLogCreateWithoutCompanyInput, AIProcessingLogUncheckedCreateWithoutCompanyInput>
  }

  export type AIProcessingLogCreateManyCompanyInputEnvelope = {
    data: AIProcessingLogCreateManyCompanyInput | AIProcessingLogCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionCreateWithoutCompanyInput = {
    id?: string
    stripeSubscriptionId: string
    status: string
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    planName: string
    planPrice: Decimal | DecimalJsLike | number | string
    planInterval: string
    cancelAtPeriodEnd?: boolean
    cancelledAt?: Date | string | null
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionUncheckedCreateWithoutCompanyInput = {
    id?: string
    stripeSubscriptionId: string
    status: string
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    planName: string
    planPrice: Decimal | DecimalJsLike | number | string
    planInterval: string
    cancelAtPeriodEnd?: boolean
    cancelledAt?: Date | string | null
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionCreateOrConnectWithoutCompanyInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutCompanyInput, SubscriptionUncheckedCreateWithoutCompanyInput>
  }

  export type SubscriptionCreateManyCompanyInputEnvelope = {
    data: SubscriptionCreateManyCompanyInput | SubscriptionCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type UsageMetricsCreateWithoutCompanyInput = {
    id?: string
    metricType: string
    metricValue: number
    periodStart: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
  }

  export type UsageMetricsUncheckedCreateWithoutCompanyInput = {
    id?: string
    metricType: string
    metricValue: number
    periodStart: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
  }

  export type UsageMetricsCreateOrConnectWithoutCompanyInput = {
    where: UsageMetricsWhereUniqueInput
    create: XOR<UsageMetricsCreateWithoutCompanyInput, UsageMetricsUncheckedCreateWithoutCompanyInput>
  }

  export type UsageMetricsCreateManyCompanyInputEnvelope = {
    data: UsageMetricsCreateManyCompanyInput | UsageMetricsCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutCompanyInput = {
    id?: string
    tableName: string
    recordId: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: string | null
    changedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type AuditLogUncheckedCreateWithoutCompanyInput = {
    id?: string
    tableName: string
    recordId: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: string | null
    changedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type AuditLogCreateOrConnectWithoutCompanyInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutCompanyInput, AuditLogUncheckedCreateWithoutCompanyInput>
  }

  export type AuditLogCreateManyCompanyInputEnvelope = {
    data: AuditLogCreateManyCompanyInput | AuditLogCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutCompanyInput = {
    id?: string
    type: string
    title: string
    message: string
    data?: JsonNullValueInput | InputJsonValue
    isRead?: boolean
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutCompanyInput = {
    id?: string
    userId?: string | null
    type: string
    title: string
    message: string
    data?: JsonNullValueInput | InputJsonValue
    isRead?: boolean
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutCompanyInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutCompanyInput, NotificationUncheckedCreateWithoutCompanyInput>
  }

  export type NotificationCreateManyCompanyInputEnvelope = {
    data: NotificationCreateManyCompanyInput | NotificationCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutCompanyInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCompanyInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
  }

  export type UserUpdateManyWithWhereWithoutCompanyInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutCompanyInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    companyId?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    passwordHash?: StringFilter<"User"> | string
    avatarUrl?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    emailVerified?: BoolFilter<"User"> | boolean
    emailVerificationToken?: StringNullableFilter<"User"> | string | null
    passwordResetToken?: StringNullableFilter<"User"> | string | null
    passwordResetExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    preferences?: JsonFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type EmployeeUpsertWithWhereUniqueWithoutCompanyInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutCompanyInput, EmployeeUncheckedUpdateWithoutCompanyInput>
    create: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutCompanyInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutCompanyInput, EmployeeUncheckedUpdateWithoutCompanyInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutCompanyInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutCompanyInput>
  }

  export type EmployeeScalarWhereInput = {
    AND?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    OR?: EmployeeScalarWhereInput[]
    NOT?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    id?: StringFilter<"Employee"> | string
    companyId?: StringFilter<"Employee"> | string
    employeeId?: StringNullableFilter<"Employee"> | string | null
    email?: StringNullableFilter<"Employee"> | string | null
    firstName?: StringFilter<"Employee"> | string
    lastName?: StringFilter<"Employee"> | string
    department?: StringNullableFilter<"Employee"> | string | null
    position?: StringNullableFilter<"Employee"> | string | null
    hireDate?: DateTimeNullableFilter<"Employee"> | Date | string | null
    terminationDate?: DateTimeNullableFilter<"Employee"> | Date | string | null
    status?: StringFilter<"Employee"> | string
    managerId?: StringNullableFilter<"Employee"> | string | null
    employmentType?: StringNullableFilter<"Employee"> | string | null
    workLocation?: StringNullableFilter<"Employee"> | string | null
    salaryCurrency?: StringFilter<"Employee"> | string
    salaryAmount?: DecimalNullableFilter<"Employee"> | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonFilter<"Employee">
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
  }

  export type AbsenceTypeUpsertWithWhereUniqueWithoutCompanyInput = {
    where: AbsenceTypeWhereUniqueInput
    update: XOR<AbsenceTypeUpdateWithoutCompanyInput, AbsenceTypeUncheckedUpdateWithoutCompanyInput>
    create: XOR<AbsenceTypeCreateWithoutCompanyInput, AbsenceTypeUncheckedCreateWithoutCompanyInput>
  }

  export type AbsenceTypeUpdateWithWhereUniqueWithoutCompanyInput = {
    where: AbsenceTypeWhereUniqueInput
    data: XOR<AbsenceTypeUpdateWithoutCompanyInput, AbsenceTypeUncheckedUpdateWithoutCompanyInput>
  }

  export type AbsenceTypeUpdateManyWithWhereWithoutCompanyInput = {
    where: AbsenceTypeScalarWhereInput
    data: XOR<AbsenceTypeUpdateManyMutationInput, AbsenceTypeUncheckedUpdateManyWithoutCompanyInput>
  }

  export type AbsenceTypeScalarWhereInput = {
    AND?: AbsenceTypeScalarWhereInput | AbsenceTypeScalarWhereInput[]
    OR?: AbsenceTypeScalarWhereInput[]
    NOT?: AbsenceTypeScalarWhereInput | AbsenceTypeScalarWhereInput[]
    id?: StringFilter<"AbsenceType"> | string
    companyId?: StringFilter<"AbsenceType"> | string
    name?: StringFilter<"AbsenceType"> | string
    code?: StringFilter<"AbsenceType"> | string
    description?: StringNullableFilter<"AbsenceType"> | string | null
    isPaid?: BoolFilter<"AbsenceType"> | boolean
    requiresApproval?: BoolFilter<"AbsenceType"> | boolean
    maxDaysPerYear?: IntNullableFilter<"AbsenceType"> | number | null
    advanceNoticeDays?: IntFilter<"AbsenceType"> | number
    color?: StringFilter<"AbsenceType"> | string
    isActive?: BoolFilter<"AbsenceType"> | boolean
    createdAt?: DateTimeFilter<"AbsenceType"> | Date | string
    updatedAt?: DateTimeFilter<"AbsenceType"> | Date | string
  }

  export type AbsenceRecordUpsertWithWhereUniqueWithoutCompanyInput = {
    where: AbsenceRecordWhereUniqueInput
    update: XOR<AbsenceRecordUpdateWithoutCompanyInput, AbsenceRecordUncheckedUpdateWithoutCompanyInput>
    create: XOR<AbsenceRecordCreateWithoutCompanyInput, AbsenceRecordUncheckedCreateWithoutCompanyInput>
  }

  export type AbsenceRecordUpdateWithWhereUniqueWithoutCompanyInput = {
    where: AbsenceRecordWhereUniqueInput
    data: XOR<AbsenceRecordUpdateWithoutCompanyInput, AbsenceRecordUncheckedUpdateWithoutCompanyInput>
  }

  export type AbsenceRecordUpdateManyWithWhereWithoutCompanyInput = {
    where: AbsenceRecordScalarWhereInput
    data: XOR<AbsenceRecordUpdateManyMutationInput, AbsenceRecordUncheckedUpdateManyWithoutCompanyInput>
  }

  export type AbsenceRecordScalarWhereInput = {
    AND?: AbsenceRecordScalarWhereInput | AbsenceRecordScalarWhereInput[]
    OR?: AbsenceRecordScalarWhereInput[]
    NOT?: AbsenceRecordScalarWhereInput | AbsenceRecordScalarWhereInput[]
    id?: StringFilter<"AbsenceRecord"> | string
    companyId?: StringFilter<"AbsenceRecord"> | string
    employeeId?: StringFilter<"AbsenceRecord"> | string
    absenceTypeId?: StringFilter<"AbsenceRecord"> | string
    startDate?: DateTimeFilter<"AbsenceRecord"> | Date | string
    endDate?: DateTimeFilter<"AbsenceRecord"> | Date | string
    totalDays?: IntFilter<"AbsenceRecord"> | number
    reason?: StringNullableFilter<"AbsenceRecord"> | string | null
    notes?: StringNullableFilter<"AbsenceRecord"> | string | null
    status?: StringFilter<"AbsenceRecord"> | string
    source?: StringFilter<"AbsenceRecord"> | string
    sourceReference?: StringNullableFilter<"AbsenceRecord"> | string | null
    confidenceScore?: FloatNullableFilter<"AbsenceRecord"> | number | null
    approvedBy?: StringNullableFilter<"AbsenceRecord"> | string | null
    approvedAt?: DateTimeNullableFilter<"AbsenceRecord"> | Date | string | null
    rejectionReason?: StringNullableFilter<"AbsenceRecord"> | string | null
    createdBy?: StringNullableFilter<"AbsenceRecord"> | string | null
    attachments?: JsonFilter<"AbsenceRecord">
    createdAt?: DateTimeFilter<"AbsenceRecord"> | Date | string
    updatedAt?: DateTimeFilter<"AbsenceRecord"> | Date | string
  }

  export type EmailIntegrationUpsertWithWhereUniqueWithoutCompanyInput = {
    where: EmailIntegrationWhereUniqueInput
    update: XOR<EmailIntegrationUpdateWithoutCompanyInput, EmailIntegrationUncheckedUpdateWithoutCompanyInput>
    create: XOR<EmailIntegrationCreateWithoutCompanyInput, EmailIntegrationUncheckedCreateWithoutCompanyInput>
  }

  export type EmailIntegrationUpdateWithWhereUniqueWithoutCompanyInput = {
    where: EmailIntegrationWhereUniqueInput
    data: XOR<EmailIntegrationUpdateWithoutCompanyInput, EmailIntegrationUncheckedUpdateWithoutCompanyInput>
  }

  export type EmailIntegrationUpdateManyWithWhereWithoutCompanyInput = {
    where: EmailIntegrationScalarWhereInput
    data: XOR<EmailIntegrationUpdateManyMutationInput, EmailIntegrationUncheckedUpdateManyWithoutCompanyInput>
  }

  export type EmailIntegrationScalarWhereInput = {
    AND?: EmailIntegrationScalarWhereInput | EmailIntegrationScalarWhereInput[]
    OR?: EmailIntegrationScalarWhereInput[]
    NOT?: EmailIntegrationScalarWhereInput | EmailIntegrationScalarWhereInput[]
    id?: StringFilter<"EmailIntegration"> | string
    companyId?: StringFilter<"EmailIntegration"> | string
    name?: StringFilter<"EmailIntegration"> | string
    provider?: StringFilter<"EmailIntegration"> | string
    configuration?: JsonFilter<"EmailIntegration">
    encryptedCredentials?: StringFilter<"EmailIntegration"> | string
    isActive?: BoolFilter<"EmailIntegration"> | boolean
    lastSync?: DateTimeNullableFilter<"EmailIntegration"> | Date | string | null
    syncStatus?: StringFilter<"EmailIntegration"> | string
    errorMessage?: StringNullableFilter<"EmailIntegration"> | string | null
    syncFrequencyMinutes?: IntFilter<"EmailIntegration"> | number
    totalEmailsProcessed?: IntFilter<"EmailIntegration"> | number
    lastEmailProcessedAt?: DateTimeNullableFilter<"EmailIntegration"> | Date | string | null
    createdAt?: DateTimeFilter<"EmailIntegration"> | Date | string
    updatedAt?: DateTimeFilter<"EmailIntegration"> | Date | string
  }

  export type AIProcessingLogUpsertWithWhereUniqueWithoutCompanyInput = {
    where: AIProcessingLogWhereUniqueInput
    update: XOR<AIProcessingLogUpdateWithoutCompanyInput, AIProcessingLogUncheckedUpdateWithoutCompanyInput>
    create: XOR<AIProcessingLogCreateWithoutCompanyInput, AIProcessingLogUncheckedCreateWithoutCompanyInput>
  }

  export type AIProcessingLogUpdateWithWhereUniqueWithoutCompanyInput = {
    where: AIProcessingLogWhereUniqueInput
    data: XOR<AIProcessingLogUpdateWithoutCompanyInput, AIProcessingLogUncheckedUpdateWithoutCompanyInput>
  }

  export type AIProcessingLogUpdateManyWithWhereWithoutCompanyInput = {
    where: AIProcessingLogScalarWhereInput
    data: XOR<AIProcessingLogUpdateManyMutationInput, AIProcessingLogUncheckedUpdateManyWithoutCompanyInput>
  }

  export type AIProcessingLogScalarWhereInput = {
    AND?: AIProcessingLogScalarWhereInput | AIProcessingLogScalarWhereInput[]
    OR?: AIProcessingLogScalarWhereInput[]
    NOT?: AIProcessingLogScalarWhereInput | AIProcessingLogScalarWhereInput[]
    id?: StringFilter<"AIProcessingLog"> | string
    companyId?: StringFilter<"AIProcessingLog"> | string
    processingType?: StringFilter<"AIProcessingLog"> | string
    provider?: StringFilter<"AIProcessingLog"> | string
    inputData?: JsonNullableFilter<"AIProcessingLog">
    aiResponse?: JsonNullableFilter<"AIProcessingLog">
    confidenceScore?: FloatNullableFilter<"AIProcessingLog"> | number | null
    status?: StringFilter<"AIProcessingLog"> | string
    errorMessage?: StringNullableFilter<"AIProcessingLog"> | string | null
    processingTimeMs?: IntNullableFilter<"AIProcessingLog"> | number | null
    costUsd?: DecimalNullableFilter<"AIProcessingLog"> | Decimal | DecimalJsLike | number | string | null
    tokensUsed?: IntNullableFilter<"AIProcessingLog"> | number | null
    relatedRecordId?: StringNullableFilter<"AIProcessingLog"> | string | null
    createdAt?: DateTimeFilter<"AIProcessingLog"> | Date | string
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutCompanyInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutCompanyInput, SubscriptionUncheckedUpdateWithoutCompanyInput>
    create: XOR<SubscriptionCreateWithoutCompanyInput, SubscriptionUncheckedCreateWithoutCompanyInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutCompanyInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutCompanyInput, SubscriptionUncheckedUpdateWithoutCompanyInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutCompanyInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutCompanyInput>
  }

  export type SubscriptionScalarWhereInput = {
    AND?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    OR?: SubscriptionScalarWhereInput[]
    NOT?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    id?: StringFilter<"Subscription"> | string
    companyId?: StringFilter<"Subscription"> | string
    stripeSubscriptionId?: StringFilter<"Subscription"> | string
    status?: StringFilter<"Subscription"> | string
    currentPeriodStart?: DateTimeFilter<"Subscription"> | Date | string
    currentPeriodEnd?: DateTimeFilter<"Subscription"> | Date | string
    planName?: StringFilter<"Subscription"> | string
    planPrice?: DecimalFilter<"Subscription"> | Decimal | DecimalJsLike | number | string
    planInterval?: StringFilter<"Subscription"> | string
    cancelAtPeriodEnd?: BoolFilter<"Subscription"> | boolean
    cancelledAt?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    trialStart?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    trialEnd?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
  }

  export type UsageMetricsUpsertWithWhereUniqueWithoutCompanyInput = {
    where: UsageMetricsWhereUniqueInput
    update: XOR<UsageMetricsUpdateWithoutCompanyInput, UsageMetricsUncheckedUpdateWithoutCompanyInput>
    create: XOR<UsageMetricsCreateWithoutCompanyInput, UsageMetricsUncheckedCreateWithoutCompanyInput>
  }

  export type UsageMetricsUpdateWithWhereUniqueWithoutCompanyInput = {
    where: UsageMetricsWhereUniqueInput
    data: XOR<UsageMetricsUpdateWithoutCompanyInput, UsageMetricsUncheckedUpdateWithoutCompanyInput>
  }

  export type UsageMetricsUpdateManyWithWhereWithoutCompanyInput = {
    where: UsageMetricsScalarWhereInput
    data: XOR<UsageMetricsUpdateManyMutationInput, UsageMetricsUncheckedUpdateManyWithoutCompanyInput>
  }

  export type UsageMetricsScalarWhereInput = {
    AND?: UsageMetricsScalarWhereInput | UsageMetricsScalarWhereInput[]
    OR?: UsageMetricsScalarWhereInput[]
    NOT?: UsageMetricsScalarWhereInput | UsageMetricsScalarWhereInput[]
    id?: StringFilter<"UsageMetrics"> | string
    companyId?: StringFilter<"UsageMetrics"> | string
    metricType?: StringFilter<"UsageMetrics"> | string
    metricValue?: IntFilter<"UsageMetrics"> | number
    periodStart?: DateTimeFilter<"UsageMetrics"> | Date | string
    periodEnd?: DateTimeFilter<"UsageMetrics"> | Date | string
    createdAt?: DateTimeFilter<"UsageMetrics"> | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutCompanyInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutCompanyInput, AuditLogUncheckedUpdateWithoutCompanyInput>
    create: XOR<AuditLogCreateWithoutCompanyInput, AuditLogUncheckedCreateWithoutCompanyInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutCompanyInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutCompanyInput, AuditLogUncheckedUpdateWithoutCompanyInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutCompanyInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutCompanyInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    companyId?: StringFilter<"AuditLog"> | string
    tableName?: StringFilter<"AuditLog"> | string
    recordId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    changedBy?: StringNullableFilter<"AuditLog"> | string | null
    changedAt?: DateTimeFilter<"AuditLog"> | Date | string
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
  }

  export type NotificationUpsertWithWhereUniqueWithoutCompanyInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutCompanyInput, NotificationUncheckedUpdateWithoutCompanyInput>
    create: XOR<NotificationCreateWithoutCompanyInput, NotificationUncheckedCreateWithoutCompanyInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutCompanyInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutCompanyInput, NotificationUncheckedUpdateWithoutCompanyInput>
  }

  export type NotificationUpdateManyWithWhereWithoutCompanyInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutCompanyInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    companyId?: StringFilter<"Notification"> | string
    userId?: StringNullableFilter<"Notification"> | string | null
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    data?: JsonFilter<"Notification">
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type CompanyCreateWithoutUsersInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    employees?: EmployeeCreateNestedManyWithoutCompanyInput
    absenceTypes?: AbsenceTypeCreateNestedManyWithoutCompanyInput
    absenceRecords?: AbsenceRecordCreateNestedManyWithoutCompanyInput
    emailIntegrations?: EmailIntegrationCreateNestedManyWithoutCompanyInput
    aiProcessingLogs?: AIProcessingLogCreateNestedManyWithoutCompanyInput
    subscriptions?: SubscriptionCreateNestedManyWithoutCompanyInput
    usageMetrics?: UsageMetricsCreateNestedManyWithoutCompanyInput
    auditLogs?: AuditLogCreateNestedManyWithoutCompanyInput
    notifications?: NotificationCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    employees?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
    absenceTypes?: AbsenceTypeUncheckedCreateNestedManyWithoutCompanyInput
    absenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutCompanyInput
    emailIntegrations?: EmailIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    aiProcessingLogs?: AIProcessingLogUncheckedCreateNestedManyWithoutCompanyInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    usageMetrics?: UsageMetricsUncheckedCreateNestedManyWithoutCompanyInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutCompanyInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutUsersInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
  }

  export type AbsenceRecordCreateWithoutCreatorInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    notes?: string | null
    status?: string
    source?: string
    sourceReference?: string | null
    confidenceScore?: number | null
    approvedAt?: Date | string | null
    rejectionReason?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutAbsenceRecordsInput
    employee: EmployeeCreateNestedOneWithoutAbsenceRecordsInput
    absenceType: AbsenceTypeCreateNestedOneWithoutAbsenceRecordsInput
    approver?: UserCreateNestedOneWithoutApprovedAbsenceRecordsInput
  }

  export type AbsenceRecordUncheckedCreateWithoutCreatorInput = {
    id?: string
    companyId: string
    employeeId: string
    absenceTypeId: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    notes?: string | null
    status?: string
    source?: string
    sourceReference?: string | null
    confidenceScore?: number | null
    approvedBy?: string | null
    approvedAt?: Date | string | null
    rejectionReason?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceRecordCreateOrConnectWithoutCreatorInput = {
    where: AbsenceRecordWhereUniqueInput
    create: XOR<AbsenceRecordCreateWithoutCreatorInput, AbsenceRecordUncheckedCreateWithoutCreatorInput>
  }

  export type AbsenceRecordCreateManyCreatorInputEnvelope = {
    data: AbsenceRecordCreateManyCreatorInput | AbsenceRecordCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type AbsenceRecordCreateWithoutApproverInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    notes?: string | null
    status?: string
    source?: string
    sourceReference?: string | null
    confidenceScore?: number | null
    approvedAt?: Date | string | null
    rejectionReason?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutAbsenceRecordsInput
    employee: EmployeeCreateNestedOneWithoutAbsenceRecordsInput
    absenceType: AbsenceTypeCreateNestedOneWithoutAbsenceRecordsInput
    creator?: UserCreateNestedOneWithoutCreatedAbsenceRecordsInput
  }

  export type AbsenceRecordUncheckedCreateWithoutApproverInput = {
    id?: string
    companyId: string
    employeeId: string
    absenceTypeId: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    notes?: string | null
    status?: string
    source?: string
    sourceReference?: string | null
    confidenceScore?: number | null
    approvedAt?: Date | string | null
    rejectionReason?: string | null
    createdBy?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceRecordCreateOrConnectWithoutApproverInput = {
    where: AbsenceRecordWhereUniqueInput
    create: XOR<AbsenceRecordCreateWithoutApproverInput, AbsenceRecordUncheckedCreateWithoutApproverInput>
  }

  export type AbsenceRecordCreateManyApproverInputEnvelope = {
    data: AbsenceRecordCreateManyApproverInput | AbsenceRecordCreateManyApproverInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    message: string
    data?: JsonNullValueInput | InputJsonValue
    isRead?: boolean
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    company: CompanyCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    companyId: string
    type: string
    title: string
    message: string
    data?: JsonNullValueInput | InputJsonValue
    isRead?: boolean
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutUsersInput = {
    update: XOR<CompanyUpdateWithoutUsersInput, CompanyUncheckedUpdateWithoutUsersInput>
    create: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutUsersInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutUsersInput, CompanyUncheckedUpdateWithoutUsersInput>
  }

  export type CompanyUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employees?: EmployeeUpdateManyWithoutCompanyNestedInput
    absenceTypes?: AbsenceTypeUpdateManyWithoutCompanyNestedInput
    absenceRecords?: AbsenceRecordUpdateManyWithoutCompanyNestedInput
    emailIntegrations?: EmailIntegrationUpdateManyWithoutCompanyNestedInput
    aiProcessingLogs?: AIProcessingLogUpdateManyWithoutCompanyNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutCompanyNestedInput
    usageMetrics?: UsageMetricsUpdateManyWithoutCompanyNestedInput
    auditLogs?: AuditLogUpdateManyWithoutCompanyNestedInput
    notifications?: NotificationUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employees?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    absenceTypes?: AbsenceTypeUncheckedUpdateManyWithoutCompanyNestedInput
    absenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutCompanyNestedInput
    emailIntegrations?: EmailIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    aiProcessingLogs?: AIProcessingLogUncheckedUpdateManyWithoutCompanyNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    usageMetrics?: UsageMetricsUncheckedUpdateManyWithoutCompanyNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutCompanyNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type AbsenceRecordUpsertWithWhereUniqueWithoutCreatorInput = {
    where: AbsenceRecordWhereUniqueInput
    update: XOR<AbsenceRecordUpdateWithoutCreatorInput, AbsenceRecordUncheckedUpdateWithoutCreatorInput>
    create: XOR<AbsenceRecordCreateWithoutCreatorInput, AbsenceRecordUncheckedCreateWithoutCreatorInput>
  }

  export type AbsenceRecordUpdateWithWhereUniqueWithoutCreatorInput = {
    where: AbsenceRecordWhereUniqueInput
    data: XOR<AbsenceRecordUpdateWithoutCreatorInput, AbsenceRecordUncheckedUpdateWithoutCreatorInput>
  }

  export type AbsenceRecordUpdateManyWithWhereWithoutCreatorInput = {
    where: AbsenceRecordScalarWhereInput
    data: XOR<AbsenceRecordUpdateManyMutationInput, AbsenceRecordUncheckedUpdateManyWithoutCreatorInput>
  }

  export type AbsenceRecordUpsertWithWhereUniqueWithoutApproverInput = {
    where: AbsenceRecordWhereUniqueInput
    update: XOR<AbsenceRecordUpdateWithoutApproverInput, AbsenceRecordUncheckedUpdateWithoutApproverInput>
    create: XOR<AbsenceRecordCreateWithoutApproverInput, AbsenceRecordUncheckedCreateWithoutApproverInput>
  }

  export type AbsenceRecordUpdateWithWhereUniqueWithoutApproverInput = {
    where: AbsenceRecordWhereUniqueInput
    data: XOR<AbsenceRecordUpdateWithoutApproverInput, AbsenceRecordUncheckedUpdateWithoutApproverInput>
  }

  export type AbsenceRecordUpdateManyWithWhereWithoutApproverInput = {
    where: AbsenceRecordScalarWhereInput
    data: XOR<AbsenceRecordUpdateManyMutationInput, AbsenceRecordUncheckedUpdateManyWithoutApproverInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type CompanyCreateWithoutEmployeesInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutCompanyInput
    absenceTypes?: AbsenceTypeCreateNestedManyWithoutCompanyInput
    absenceRecords?: AbsenceRecordCreateNestedManyWithoutCompanyInput
    emailIntegrations?: EmailIntegrationCreateNestedManyWithoutCompanyInput
    aiProcessingLogs?: AIProcessingLogCreateNestedManyWithoutCompanyInput
    subscriptions?: SubscriptionCreateNestedManyWithoutCompanyInput
    usageMetrics?: UsageMetricsCreateNestedManyWithoutCompanyInput
    auditLogs?: AuditLogCreateNestedManyWithoutCompanyInput
    notifications?: NotificationCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutEmployeesInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    absenceTypes?: AbsenceTypeUncheckedCreateNestedManyWithoutCompanyInput
    absenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutCompanyInput
    emailIntegrations?: EmailIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    aiProcessingLogs?: AIProcessingLogUncheckedCreateNestedManyWithoutCompanyInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    usageMetrics?: UsageMetricsUncheckedCreateNestedManyWithoutCompanyInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutCompanyInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutEmployeesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutEmployeesInput, CompanyUncheckedCreateWithoutEmployeesInput>
  }

  export type EmployeeCreateWithoutSubordinatesInput = {
    id?: string
    employeeId?: string | null
    email?: string | null
    firstName: string
    lastName: string
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    terminationDate?: Date | string | null
    status?: string
    employmentType?: string | null
    workLocation?: string | null
    salaryCurrency?: string
    salaryAmount?: Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutEmployeesInput
    manager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    absenceRecords?: AbsenceRecordCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutSubordinatesInput = {
    id?: string
    companyId: string
    employeeId?: string | null
    email?: string | null
    firstName: string
    lastName: string
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    terminationDate?: Date | string | null
    status?: string
    managerId?: string | null
    employmentType?: string | null
    workLocation?: string | null
    salaryCurrency?: string
    salaryAmount?: Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    absenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutSubordinatesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutSubordinatesInput, EmployeeUncheckedCreateWithoutSubordinatesInput>
  }

  export type EmployeeCreateWithoutManagerInput = {
    id?: string
    employeeId?: string | null
    email?: string | null
    firstName: string
    lastName: string
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    terminationDate?: Date | string | null
    status?: string
    employmentType?: string | null
    workLocation?: string | null
    salaryCurrency?: string
    salaryAmount?: Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutEmployeesInput
    subordinates?: EmployeeCreateNestedManyWithoutManagerInput
    absenceRecords?: AbsenceRecordCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutManagerInput = {
    id?: string
    companyId: string
    employeeId?: string | null
    email?: string | null
    firstName: string
    lastName: string
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    terminationDate?: Date | string | null
    status?: string
    employmentType?: string | null
    workLocation?: string | null
    salaryCurrency?: string
    salaryAmount?: Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutManagerInput
    absenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutManagerInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutManagerInput, EmployeeUncheckedCreateWithoutManagerInput>
  }

  export type EmployeeCreateManyManagerInputEnvelope = {
    data: EmployeeCreateManyManagerInput | EmployeeCreateManyManagerInput[]
    skipDuplicates?: boolean
  }

  export type AbsenceRecordCreateWithoutEmployeeInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    notes?: string | null
    status?: string
    source?: string
    sourceReference?: string | null
    confidenceScore?: number | null
    approvedAt?: Date | string | null
    rejectionReason?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutAbsenceRecordsInput
    absenceType: AbsenceTypeCreateNestedOneWithoutAbsenceRecordsInput
    creator?: UserCreateNestedOneWithoutCreatedAbsenceRecordsInput
    approver?: UserCreateNestedOneWithoutApprovedAbsenceRecordsInput
  }

  export type AbsenceRecordUncheckedCreateWithoutEmployeeInput = {
    id?: string
    companyId: string
    absenceTypeId: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    notes?: string | null
    status?: string
    source?: string
    sourceReference?: string | null
    confidenceScore?: number | null
    approvedBy?: string | null
    approvedAt?: Date | string | null
    rejectionReason?: string | null
    createdBy?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceRecordCreateOrConnectWithoutEmployeeInput = {
    where: AbsenceRecordWhereUniqueInput
    create: XOR<AbsenceRecordCreateWithoutEmployeeInput, AbsenceRecordUncheckedCreateWithoutEmployeeInput>
  }

  export type AbsenceRecordCreateManyEmployeeInputEnvelope = {
    data: AbsenceRecordCreateManyEmployeeInput | AbsenceRecordCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutEmployeesInput = {
    update: XOR<CompanyUpdateWithoutEmployeesInput, CompanyUncheckedUpdateWithoutEmployeesInput>
    create: XOR<CompanyCreateWithoutEmployeesInput, CompanyUncheckedCreateWithoutEmployeesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutEmployeesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutEmployeesInput, CompanyUncheckedUpdateWithoutEmployeesInput>
  }

  export type CompanyUpdateWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutCompanyNestedInput
    absenceTypes?: AbsenceTypeUpdateManyWithoutCompanyNestedInput
    absenceRecords?: AbsenceRecordUpdateManyWithoutCompanyNestedInput
    emailIntegrations?: EmailIntegrationUpdateManyWithoutCompanyNestedInput
    aiProcessingLogs?: AIProcessingLogUpdateManyWithoutCompanyNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutCompanyNestedInput
    usageMetrics?: UsageMetricsUpdateManyWithoutCompanyNestedInput
    auditLogs?: AuditLogUpdateManyWithoutCompanyNestedInput
    notifications?: NotificationUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    absenceTypes?: AbsenceTypeUncheckedUpdateManyWithoutCompanyNestedInput
    absenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutCompanyNestedInput
    emailIntegrations?: EmailIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    aiProcessingLogs?: AIProcessingLogUncheckedUpdateManyWithoutCompanyNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    usageMetrics?: UsageMetricsUncheckedUpdateManyWithoutCompanyNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutCompanyNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type EmployeeUpsertWithoutSubordinatesInput = {
    update: XOR<EmployeeUpdateWithoutSubordinatesInput, EmployeeUncheckedUpdateWithoutSubordinatesInput>
    create: XOR<EmployeeCreateWithoutSubordinatesInput, EmployeeUncheckedCreateWithoutSubordinatesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutSubordinatesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutSubordinatesInput, EmployeeUncheckedUpdateWithoutSubordinatesInput>
  }

  export type EmployeeUpdateWithoutSubordinatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    workLocation?: NullableStringFieldUpdateOperationsInput | string | null
    salaryCurrency?: StringFieldUpdateOperationsInput | string
    salaryAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutEmployeesNestedInput
    manager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    absenceRecords?: AbsenceRecordUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutSubordinatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    workLocation?: NullableStringFieldUpdateOperationsInput | string | null
    salaryCurrency?: StringFieldUpdateOperationsInput | string
    salaryAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    absenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUpsertWithWhereUniqueWithoutManagerInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutManagerInput, EmployeeUncheckedUpdateWithoutManagerInput>
    create: XOR<EmployeeCreateWithoutManagerInput, EmployeeUncheckedCreateWithoutManagerInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutManagerInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutManagerInput, EmployeeUncheckedUpdateWithoutManagerInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutManagerInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutManagerInput>
  }

  export type AbsenceRecordUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: AbsenceRecordWhereUniqueInput
    update: XOR<AbsenceRecordUpdateWithoutEmployeeInput, AbsenceRecordUncheckedUpdateWithoutEmployeeInput>
    create: XOR<AbsenceRecordCreateWithoutEmployeeInput, AbsenceRecordUncheckedCreateWithoutEmployeeInput>
  }

  export type AbsenceRecordUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: AbsenceRecordWhereUniqueInput
    data: XOR<AbsenceRecordUpdateWithoutEmployeeInput, AbsenceRecordUncheckedUpdateWithoutEmployeeInput>
  }

  export type AbsenceRecordUpdateManyWithWhereWithoutEmployeeInput = {
    where: AbsenceRecordScalarWhereInput
    data: XOR<AbsenceRecordUpdateManyMutationInput, AbsenceRecordUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type CompanyCreateWithoutAbsenceTypesInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutCompanyInput
    employees?: EmployeeCreateNestedManyWithoutCompanyInput
    absenceRecords?: AbsenceRecordCreateNestedManyWithoutCompanyInput
    emailIntegrations?: EmailIntegrationCreateNestedManyWithoutCompanyInput
    aiProcessingLogs?: AIProcessingLogCreateNestedManyWithoutCompanyInput
    subscriptions?: SubscriptionCreateNestedManyWithoutCompanyInput
    usageMetrics?: UsageMetricsCreateNestedManyWithoutCompanyInput
    auditLogs?: AuditLogCreateNestedManyWithoutCompanyInput
    notifications?: NotificationCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutAbsenceTypesInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
    absenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutCompanyInput
    emailIntegrations?: EmailIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    aiProcessingLogs?: AIProcessingLogUncheckedCreateNestedManyWithoutCompanyInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    usageMetrics?: UsageMetricsUncheckedCreateNestedManyWithoutCompanyInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutCompanyInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutAbsenceTypesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutAbsenceTypesInput, CompanyUncheckedCreateWithoutAbsenceTypesInput>
  }

  export type AbsenceRecordCreateWithoutAbsenceTypeInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    notes?: string | null
    status?: string
    source?: string
    sourceReference?: string | null
    confidenceScore?: number | null
    approvedAt?: Date | string | null
    rejectionReason?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutAbsenceRecordsInput
    employee: EmployeeCreateNestedOneWithoutAbsenceRecordsInput
    creator?: UserCreateNestedOneWithoutCreatedAbsenceRecordsInput
    approver?: UserCreateNestedOneWithoutApprovedAbsenceRecordsInput
  }

  export type AbsenceRecordUncheckedCreateWithoutAbsenceTypeInput = {
    id?: string
    companyId: string
    employeeId: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    notes?: string | null
    status?: string
    source?: string
    sourceReference?: string | null
    confidenceScore?: number | null
    approvedBy?: string | null
    approvedAt?: Date | string | null
    rejectionReason?: string | null
    createdBy?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceRecordCreateOrConnectWithoutAbsenceTypeInput = {
    where: AbsenceRecordWhereUniqueInput
    create: XOR<AbsenceRecordCreateWithoutAbsenceTypeInput, AbsenceRecordUncheckedCreateWithoutAbsenceTypeInput>
  }

  export type AbsenceRecordCreateManyAbsenceTypeInputEnvelope = {
    data: AbsenceRecordCreateManyAbsenceTypeInput | AbsenceRecordCreateManyAbsenceTypeInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutAbsenceTypesInput = {
    update: XOR<CompanyUpdateWithoutAbsenceTypesInput, CompanyUncheckedUpdateWithoutAbsenceTypesInput>
    create: XOR<CompanyCreateWithoutAbsenceTypesInput, CompanyUncheckedCreateWithoutAbsenceTypesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutAbsenceTypesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutAbsenceTypesInput, CompanyUncheckedUpdateWithoutAbsenceTypesInput>
  }

  export type CompanyUpdateWithoutAbsenceTypesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUpdateManyWithoutCompanyNestedInput
    absenceRecords?: AbsenceRecordUpdateManyWithoutCompanyNestedInput
    emailIntegrations?: EmailIntegrationUpdateManyWithoutCompanyNestedInput
    aiProcessingLogs?: AIProcessingLogUpdateManyWithoutCompanyNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutCompanyNestedInput
    usageMetrics?: UsageMetricsUpdateManyWithoutCompanyNestedInput
    auditLogs?: AuditLogUpdateManyWithoutCompanyNestedInput
    notifications?: NotificationUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutAbsenceTypesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    absenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutCompanyNestedInput
    emailIntegrations?: EmailIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    aiProcessingLogs?: AIProcessingLogUncheckedUpdateManyWithoutCompanyNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    usageMetrics?: UsageMetricsUncheckedUpdateManyWithoutCompanyNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutCompanyNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type AbsenceRecordUpsertWithWhereUniqueWithoutAbsenceTypeInput = {
    where: AbsenceRecordWhereUniqueInput
    update: XOR<AbsenceRecordUpdateWithoutAbsenceTypeInput, AbsenceRecordUncheckedUpdateWithoutAbsenceTypeInput>
    create: XOR<AbsenceRecordCreateWithoutAbsenceTypeInput, AbsenceRecordUncheckedCreateWithoutAbsenceTypeInput>
  }

  export type AbsenceRecordUpdateWithWhereUniqueWithoutAbsenceTypeInput = {
    where: AbsenceRecordWhereUniqueInput
    data: XOR<AbsenceRecordUpdateWithoutAbsenceTypeInput, AbsenceRecordUncheckedUpdateWithoutAbsenceTypeInput>
  }

  export type AbsenceRecordUpdateManyWithWhereWithoutAbsenceTypeInput = {
    where: AbsenceRecordScalarWhereInput
    data: XOR<AbsenceRecordUpdateManyMutationInput, AbsenceRecordUncheckedUpdateManyWithoutAbsenceTypeInput>
  }

  export type CompanyCreateWithoutAbsenceRecordsInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutCompanyInput
    employees?: EmployeeCreateNestedManyWithoutCompanyInput
    absenceTypes?: AbsenceTypeCreateNestedManyWithoutCompanyInput
    emailIntegrations?: EmailIntegrationCreateNestedManyWithoutCompanyInput
    aiProcessingLogs?: AIProcessingLogCreateNestedManyWithoutCompanyInput
    subscriptions?: SubscriptionCreateNestedManyWithoutCompanyInput
    usageMetrics?: UsageMetricsCreateNestedManyWithoutCompanyInput
    auditLogs?: AuditLogCreateNestedManyWithoutCompanyInput
    notifications?: NotificationCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutAbsenceRecordsInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
    absenceTypes?: AbsenceTypeUncheckedCreateNestedManyWithoutCompanyInput
    emailIntegrations?: EmailIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    aiProcessingLogs?: AIProcessingLogUncheckedCreateNestedManyWithoutCompanyInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    usageMetrics?: UsageMetricsUncheckedCreateNestedManyWithoutCompanyInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutCompanyInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutAbsenceRecordsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutAbsenceRecordsInput, CompanyUncheckedCreateWithoutAbsenceRecordsInput>
  }

  export type EmployeeCreateWithoutAbsenceRecordsInput = {
    id?: string
    employeeId?: string | null
    email?: string | null
    firstName: string
    lastName: string
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    terminationDate?: Date | string | null
    status?: string
    employmentType?: string | null
    workLocation?: string | null
    salaryCurrency?: string
    salaryAmount?: Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutEmployeesInput
    manager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutManagerInput
  }

  export type EmployeeUncheckedCreateWithoutAbsenceRecordsInput = {
    id?: string
    companyId: string
    employeeId?: string | null
    email?: string | null
    firstName: string
    lastName: string
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    terminationDate?: Date | string | null
    status?: string
    managerId?: string | null
    employmentType?: string | null
    workLocation?: string | null
    salaryCurrency?: string
    salaryAmount?: Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutManagerInput
  }

  export type EmployeeCreateOrConnectWithoutAbsenceRecordsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutAbsenceRecordsInput, EmployeeUncheckedCreateWithoutAbsenceRecordsInput>
  }

  export type AbsenceTypeCreateWithoutAbsenceRecordsInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isPaid?: boolean
    requiresApproval?: boolean
    maxDaysPerYear?: number | null
    advanceNoticeDays?: number
    color?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutAbsenceTypesInput
  }

  export type AbsenceTypeUncheckedCreateWithoutAbsenceRecordsInput = {
    id?: string
    companyId: string
    name: string
    code: string
    description?: string | null
    isPaid?: boolean
    requiresApproval?: boolean
    maxDaysPerYear?: number | null
    advanceNoticeDays?: number
    color?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceTypeCreateOrConnectWithoutAbsenceRecordsInput = {
    where: AbsenceTypeWhereUniqueInput
    create: XOR<AbsenceTypeCreateWithoutAbsenceRecordsInput, AbsenceTypeUncheckedCreateWithoutAbsenceRecordsInput>
  }

  export type UserCreateWithoutCreatedAbsenceRecordsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role?: string
    phone?: string | null
    passwordHash: string
    avatarUrl?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutUsersInput
    approvedAbsenceRecords?: AbsenceRecordCreateNestedManyWithoutApproverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedAbsenceRecordsInput = {
    id?: string
    companyId: string
    email: string
    firstName: string
    lastName: string
    role?: string
    phone?: string | null
    passwordHash: string
    avatarUrl?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    approvedAbsenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutApproverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedAbsenceRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedAbsenceRecordsInput, UserUncheckedCreateWithoutCreatedAbsenceRecordsInput>
  }

  export type UserCreateWithoutApprovedAbsenceRecordsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role?: string
    phone?: string | null
    passwordHash: string
    avatarUrl?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutUsersInput
    createdAbsenceRecords?: AbsenceRecordCreateNestedManyWithoutCreatorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutApprovedAbsenceRecordsInput = {
    id?: string
    companyId: string
    email: string
    firstName: string
    lastName: string
    role?: string
    phone?: string | null
    passwordHash: string
    avatarUrl?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdAbsenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutCreatorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutApprovedAbsenceRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApprovedAbsenceRecordsInput, UserUncheckedCreateWithoutApprovedAbsenceRecordsInput>
  }

  export type CompanyUpsertWithoutAbsenceRecordsInput = {
    update: XOR<CompanyUpdateWithoutAbsenceRecordsInput, CompanyUncheckedUpdateWithoutAbsenceRecordsInput>
    create: XOR<CompanyCreateWithoutAbsenceRecordsInput, CompanyUncheckedCreateWithoutAbsenceRecordsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutAbsenceRecordsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutAbsenceRecordsInput, CompanyUncheckedUpdateWithoutAbsenceRecordsInput>
  }

  export type CompanyUpdateWithoutAbsenceRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUpdateManyWithoutCompanyNestedInput
    absenceTypes?: AbsenceTypeUpdateManyWithoutCompanyNestedInput
    emailIntegrations?: EmailIntegrationUpdateManyWithoutCompanyNestedInput
    aiProcessingLogs?: AIProcessingLogUpdateManyWithoutCompanyNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutCompanyNestedInput
    usageMetrics?: UsageMetricsUpdateManyWithoutCompanyNestedInput
    auditLogs?: AuditLogUpdateManyWithoutCompanyNestedInput
    notifications?: NotificationUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutAbsenceRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    absenceTypes?: AbsenceTypeUncheckedUpdateManyWithoutCompanyNestedInput
    emailIntegrations?: EmailIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    aiProcessingLogs?: AIProcessingLogUncheckedUpdateManyWithoutCompanyNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    usageMetrics?: UsageMetricsUncheckedUpdateManyWithoutCompanyNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutCompanyNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type EmployeeUpsertWithoutAbsenceRecordsInput = {
    update: XOR<EmployeeUpdateWithoutAbsenceRecordsInput, EmployeeUncheckedUpdateWithoutAbsenceRecordsInput>
    create: XOR<EmployeeCreateWithoutAbsenceRecordsInput, EmployeeUncheckedCreateWithoutAbsenceRecordsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutAbsenceRecordsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutAbsenceRecordsInput, EmployeeUncheckedUpdateWithoutAbsenceRecordsInput>
  }

  export type EmployeeUpdateWithoutAbsenceRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    workLocation?: NullableStringFieldUpdateOperationsInput | string | null
    salaryCurrency?: StringFieldUpdateOperationsInput | string
    salaryAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutEmployeesNestedInput
    manager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutManagerNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutAbsenceRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    workLocation?: NullableStringFieldUpdateOperationsInput | string | null
    salaryCurrency?: StringFieldUpdateOperationsInput | string
    salaryAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subordinates?: EmployeeUncheckedUpdateManyWithoutManagerNestedInput
  }

  export type AbsenceTypeUpsertWithoutAbsenceRecordsInput = {
    update: XOR<AbsenceTypeUpdateWithoutAbsenceRecordsInput, AbsenceTypeUncheckedUpdateWithoutAbsenceRecordsInput>
    create: XOR<AbsenceTypeCreateWithoutAbsenceRecordsInput, AbsenceTypeUncheckedCreateWithoutAbsenceRecordsInput>
    where?: AbsenceTypeWhereInput
  }

  export type AbsenceTypeUpdateToOneWithWhereWithoutAbsenceRecordsInput = {
    where?: AbsenceTypeWhereInput
    data: XOR<AbsenceTypeUpdateWithoutAbsenceRecordsInput, AbsenceTypeUncheckedUpdateWithoutAbsenceRecordsInput>
  }

  export type AbsenceTypeUpdateWithoutAbsenceRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    maxDaysPerYear?: NullableIntFieldUpdateOperationsInput | number | null
    advanceNoticeDays?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutAbsenceTypesNestedInput
  }

  export type AbsenceTypeUncheckedUpdateWithoutAbsenceRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    maxDaysPerYear?: NullableIntFieldUpdateOperationsInput | number | null
    advanceNoticeDays?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutCreatedAbsenceRecordsInput = {
    update: XOR<UserUpdateWithoutCreatedAbsenceRecordsInput, UserUncheckedUpdateWithoutCreatedAbsenceRecordsInput>
    create: XOR<UserCreateWithoutCreatedAbsenceRecordsInput, UserUncheckedCreateWithoutCreatedAbsenceRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedAbsenceRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedAbsenceRecordsInput, UserUncheckedUpdateWithoutCreatedAbsenceRecordsInput>
  }

  export type UserUpdateWithoutCreatedAbsenceRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutUsersNestedInput
    approvedAbsenceRecords?: AbsenceRecordUpdateManyWithoutApproverNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedAbsenceRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAbsenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutApproverNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutApprovedAbsenceRecordsInput = {
    update: XOR<UserUpdateWithoutApprovedAbsenceRecordsInput, UserUncheckedUpdateWithoutApprovedAbsenceRecordsInput>
    create: XOR<UserCreateWithoutApprovedAbsenceRecordsInput, UserUncheckedCreateWithoutApprovedAbsenceRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApprovedAbsenceRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApprovedAbsenceRecordsInput, UserUncheckedUpdateWithoutApprovedAbsenceRecordsInput>
  }

  export type UserUpdateWithoutApprovedAbsenceRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutUsersNestedInput
    createdAbsenceRecords?: AbsenceRecordUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutApprovedAbsenceRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAbsenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutCreatorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CompanyCreateWithoutEmailIntegrationsInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutCompanyInput
    employees?: EmployeeCreateNestedManyWithoutCompanyInput
    absenceTypes?: AbsenceTypeCreateNestedManyWithoutCompanyInput
    absenceRecords?: AbsenceRecordCreateNestedManyWithoutCompanyInput
    aiProcessingLogs?: AIProcessingLogCreateNestedManyWithoutCompanyInput
    subscriptions?: SubscriptionCreateNestedManyWithoutCompanyInput
    usageMetrics?: UsageMetricsCreateNestedManyWithoutCompanyInput
    auditLogs?: AuditLogCreateNestedManyWithoutCompanyInput
    notifications?: NotificationCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutEmailIntegrationsInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
    absenceTypes?: AbsenceTypeUncheckedCreateNestedManyWithoutCompanyInput
    absenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutCompanyInput
    aiProcessingLogs?: AIProcessingLogUncheckedCreateNestedManyWithoutCompanyInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    usageMetrics?: UsageMetricsUncheckedCreateNestedManyWithoutCompanyInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutCompanyInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutEmailIntegrationsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutEmailIntegrationsInput, CompanyUncheckedCreateWithoutEmailIntegrationsInput>
  }

  export type CompanyUpsertWithoutEmailIntegrationsInput = {
    update: XOR<CompanyUpdateWithoutEmailIntegrationsInput, CompanyUncheckedUpdateWithoutEmailIntegrationsInput>
    create: XOR<CompanyCreateWithoutEmailIntegrationsInput, CompanyUncheckedCreateWithoutEmailIntegrationsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutEmailIntegrationsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutEmailIntegrationsInput, CompanyUncheckedUpdateWithoutEmailIntegrationsInput>
  }

  export type CompanyUpdateWithoutEmailIntegrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUpdateManyWithoutCompanyNestedInput
    absenceTypes?: AbsenceTypeUpdateManyWithoutCompanyNestedInput
    absenceRecords?: AbsenceRecordUpdateManyWithoutCompanyNestedInput
    aiProcessingLogs?: AIProcessingLogUpdateManyWithoutCompanyNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutCompanyNestedInput
    usageMetrics?: UsageMetricsUpdateManyWithoutCompanyNestedInput
    auditLogs?: AuditLogUpdateManyWithoutCompanyNestedInput
    notifications?: NotificationUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutEmailIntegrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    absenceTypes?: AbsenceTypeUncheckedUpdateManyWithoutCompanyNestedInput
    absenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutCompanyNestedInput
    aiProcessingLogs?: AIProcessingLogUncheckedUpdateManyWithoutCompanyNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    usageMetrics?: UsageMetricsUncheckedUpdateManyWithoutCompanyNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutCompanyNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateWithoutAiProcessingLogsInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutCompanyInput
    employees?: EmployeeCreateNestedManyWithoutCompanyInput
    absenceTypes?: AbsenceTypeCreateNestedManyWithoutCompanyInput
    absenceRecords?: AbsenceRecordCreateNestedManyWithoutCompanyInput
    emailIntegrations?: EmailIntegrationCreateNestedManyWithoutCompanyInput
    subscriptions?: SubscriptionCreateNestedManyWithoutCompanyInput
    usageMetrics?: UsageMetricsCreateNestedManyWithoutCompanyInput
    auditLogs?: AuditLogCreateNestedManyWithoutCompanyInput
    notifications?: NotificationCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutAiProcessingLogsInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
    absenceTypes?: AbsenceTypeUncheckedCreateNestedManyWithoutCompanyInput
    absenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutCompanyInput
    emailIntegrations?: EmailIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    usageMetrics?: UsageMetricsUncheckedCreateNestedManyWithoutCompanyInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutCompanyInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutAiProcessingLogsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutAiProcessingLogsInput, CompanyUncheckedCreateWithoutAiProcessingLogsInput>
  }

  export type CompanyUpsertWithoutAiProcessingLogsInput = {
    update: XOR<CompanyUpdateWithoutAiProcessingLogsInput, CompanyUncheckedUpdateWithoutAiProcessingLogsInput>
    create: XOR<CompanyCreateWithoutAiProcessingLogsInput, CompanyUncheckedCreateWithoutAiProcessingLogsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutAiProcessingLogsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutAiProcessingLogsInput, CompanyUncheckedUpdateWithoutAiProcessingLogsInput>
  }

  export type CompanyUpdateWithoutAiProcessingLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUpdateManyWithoutCompanyNestedInput
    absenceTypes?: AbsenceTypeUpdateManyWithoutCompanyNestedInput
    absenceRecords?: AbsenceRecordUpdateManyWithoutCompanyNestedInput
    emailIntegrations?: EmailIntegrationUpdateManyWithoutCompanyNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutCompanyNestedInput
    usageMetrics?: UsageMetricsUpdateManyWithoutCompanyNestedInput
    auditLogs?: AuditLogUpdateManyWithoutCompanyNestedInput
    notifications?: NotificationUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutAiProcessingLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    absenceTypes?: AbsenceTypeUncheckedUpdateManyWithoutCompanyNestedInput
    absenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutCompanyNestedInput
    emailIntegrations?: EmailIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    usageMetrics?: UsageMetricsUncheckedUpdateManyWithoutCompanyNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutCompanyNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateWithoutSubscriptionsInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutCompanyInput
    employees?: EmployeeCreateNestedManyWithoutCompanyInput
    absenceTypes?: AbsenceTypeCreateNestedManyWithoutCompanyInput
    absenceRecords?: AbsenceRecordCreateNestedManyWithoutCompanyInput
    emailIntegrations?: EmailIntegrationCreateNestedManyWithoutCompanyInput
    aiProcessingLogs?: AIProcessingLogCreateNestedManyWithoutCompanyInput
    usageMetrics?: UsageMetricsCreateNestedManyWithoutCompanyInput
    auditLogs?: AuditLogCreateNestedManyWithoutCompanyInput
    notifications?: NotificationCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutSubscriptionsInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
    absenceTypes?: AbsenceTypeUncheckedCreateNestedManyWithoutCompanyInput
    absenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutCompanyInput
    emailIntegrations?: EmailIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    aiProcessingLogs?: AIProcessingLogUncheckedCreateNestedManyWithoutCompanyInput
    usageMetrics?: UsageMetricsUncheckedCreateNestedManyWithoutCompanyInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutCompanyInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutSubscriptionsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutSubscriptionsInput, CompanyUncheckedCreateWithoutSubscriptionsInput>
  }

  export type CompanyUpsertWithoutSubscriptionsInput = {
    update: XOR<CompanyUpdateWithoutSubscriptionsInput, CompanyUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<CompanyCreateWithoutSubscriptionsInput, CompanyUncheckedCreateWithoutSubscriptionsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutSubscriptionsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutSubscriptionsInput, CompanyUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type CompanyUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUpdateManyWithoutCompanyNestedInput
    absenceTypes?: AbsenceTypeUpdateManyWithoutCompanyNestedInput
    absenceRecords?: AbsenceRecordUpdateManyWithoutCompanyNestedInput
    emailIntegrations?: EmailIntegrationUpdateManyWithoutCompanyNestedInput
    aiProcessingLogs?: AIProcessingLogUpdateManyWithoutCompanyNestedInput
    usageMetrics?: UsageMetricsUpdateManyWithoutCompanyNestedInput
    auditLogs?: AuditLogUpdateManyWithoutCompanyNestedInput
    notifications?: NotificationUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    absenceTypes?: AbsenceTypeUncheckedUpdateManyWithoutCompanyNestedInput
    absenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutCompanyNestedInput
    emailIntegrations?: EmailIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    aiProcessingLogs?: AIProcessingLogUncheckedUpdateManyWithoutCompanyNestedInput
    usageMetrics?: UsageMetricsUncheckedUpdateManyWithoutCompanyNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutCompanyNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateWithoutUsageMetricsInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutCompanyInput
    employees?: EmployeeCreateNestedManyWithoutCompanyInput
    absenceTypes?: AbsenceTypeCreateNestedManyWithoutCompanyInput
    absenceRecords?: AbsenceRecordCreateNestedManyWithoutCompanyInput
    emailIntegrations?: EmailIntegrationCreateNestedManyWithoutCompanyInput
    aiProcessingLogs?: AIProcessingLogCreateNestedManyWithoutCompanyInput
    subscriptions?: SubscriptionCreateNestedManyWithoutCompanyInput
    auditLogs?: AuditLogCreateNestedManyWithoutCompanyInput
    notifications?: NotificationCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutUsageMetricsInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
    absenceTypes?: AbsenceTypeUncheckedCreateNestedManyWithoutCompanyInput
    absenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutCompanyInput
    emailIntegrations?: EmailIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    aiProcessingLogs?: AIProcessingLogUncheckedCreateNestedManyWithoutCompanyInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutCompanyInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutUsageMetricsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutUsageMetricsInput, CompanyUncheckedCreateWithoutUsageMetricsInput>
  }

  export type CompanyUpsertWithoutUsageMetricsInput = {
    update: XOR<CompanyUpdateWithoutUsageMetricsInput, CompanyUncheckedUpdateWithoutUsageMetricsInput>
    create: XOR<CompanyCreateWithoutUsageMetricsInput, CompanyUncheckedCreateWithoutUsageMetricsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutUsageMetricsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutUsageMetricsInput, CompanyUncheckedUpdateWithoutUsageMetricsInput>
  }

  export type CompanyUpdateWithoutUsageMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUpdateManyWithoutCompanyNestedInput
    absenceTypes?: AbsenceTypeUpdateManyWithoutCompanyNestedInput
    absenceRecords?: AbsenceRecordUpdateManyWithoutCompanyNestedInput
    emailIntegrations?: EmailIntegrationUpdateManyWithoutCompanyNestedInput
    aiProcessingLogs?: AIProcessingLogUpdateManyWithoutCompanyNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutCompanyNestedInput
    auditLogs?: AuditLogUpdateManyWithoutCompanyNestedInput
    notifications?: NotificationUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutUsageMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    absenceTypes?: AbsenceTypeUncheckedUpdateManyWithoutCompanyNestedInput
    absenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutCompanyNestedInput
    emailIntegrations?: EmailIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    aiProcessingLogs?: AIProcessingLogUncheckedUpdateManyWithoutCompanyNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutCompanyNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateWithoutAuditLogsInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutCompanyInput
    employees?: EmployeeCreateNestedManyWithoutCompanyInput
    absenceTypes?: AbsenceTypeCreateNestedManyWithoutCompanyInput
    absenceRecords?: AbsenceRecordCreateNestedManyWithoutCompanyInput
    emailIntegrations?: EmailIntegrationCreateNestedManyWithoutCompanyInput
    aiProcessingLogs?: AIProcessingLogCreateNestedManyWithoutCompanyInput
    subscriptions?: SubscriptionCreateNestedManyWithoutCompanyInput
    usageMetrics?: UsageMetricsCreateNestedManyWithoutCompanyInput
    notifications?: NotificationCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
    absenceTypes?: AbsenceTypeUncheckedCreateNestedManyWithoutCompanyInput
    absenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutCompanyInput
    emailIntegrations?: EmailIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    aiProcessingLogs?: AIProcessingLogUncheckedCreateNestedManyWithoutCompanyInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    usageMetrics?: UsageMetricsUncheckedCreateNestedManyWithoutCompanyInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutAuditLogsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutAuditLogsInput, CompanyUncheckedCreateWithoutAuditLogsInput>
  }

  export type CompanyUpsertWithoutAuditLogsInput = {
    update: XOR<CompanyUpdateWithoutAuditLogsInput, CompanyUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<CompanyCreateWithoutAuditLogsInput, CompanyUncheckedCreateWithoutAuditLogsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutAuditLogsInput, CompanyUncheckedUpdateWithoutAuditLogsInput>
  }

  export type CompanyUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUpdateManyWithoutCompanyNestedInput
    absenceTypes?: AbsenceTypeUpdateManyWithoutCompanyNestedInput
    absenceRecords?: AbsenceRecordUpdateManyWithoutCompanyNestedInput
    emailIntegrations?: EmailIntegrationUpdateManyWithoutCompanyNestedInput
    aiProcessingLogs?: AIProcessingLogUpdateManyWithoutCompanyNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutCompanyNestedInput
    usageMetrics?: UsageMetricsUpdateManyWithoutCompanyNestedInput
    notifications?: NotificationUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    absenceTypes?: AbsenceTypeUncheckedUpdateManyWithoutCompanyNestedInput
    absenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutCompanyNestedInput
    emailIntegrations?: EmailIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    aiProcessingLogs?: AIProcessingLogUncheckedUpdateManyWithoutCompanyNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    usageMetrics?: UsageMetricsUncheckedUpdateManyWithoutCompanyNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateWithoutNotificationsInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutCompanyInput
    employees?: EmployeeCreateNestedManyWithoutCompanyInput
    absenceTypes?: AbsenceTypeCreateNestedManyWithoutCompanyInput
    absenceRecords?: AbsenceRecordCreateNestedManyWithoutCompanyInput
    emailIntegrations?: EmailIntegrationCreateNestedManyWithoutCompanyInput
    aiProcessingLogs?: AIProcessingLogCreateNestedManyWithoutCompanyInput
    subscriptions?: SubscriptionCreateNestedManyWithoutCompanyInput
    usageMetrics?: UsageMetricsCreateNestedManyWithoutCompanyInput
    auditLogs?: AuditLogCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutNotificationsInput = {
    id?: string
    name: string
    slug: string
    industry?: string | null
    sizeRange?: string | null
    emailDomain?: string | null
    logoUrl?: string | null
    timezone?: string
    subscriptionStatus?: string
    subscriptionTier?: string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
    absenceTypes?: AbsenceTypeUncheckedCreateNestedManyWithoutCompanyInput
    absenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutCompanyInput
    emailIntegrations?: EmailIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    aiProcessingLogs?: AIProcessingLogUncheckedCreateNestedManyWithoutCompanyInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    usageMetrics?: UsageMetricsUncheckedCreateNestedManyWithoutCompanyInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutNotificationsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutNotificationsInput, CompanyUncheckedCreateWithoutNotificationsInput>
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role?: string
    phone?: string | null
    passwordHash: string
    avatarUrl?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutUsersInput
    createdAbsenceRecords?: AbsenceRecordCreateNestedManyWithoutCreatorInput
    approvedAbsenceRecords?: AbsenceRecordCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    companyId: string
    email: string
    firstName: string
    lastName: string
    role?: string
    phone?: string | null
    passwordHash: string
    avatarUrl?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdAbsenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutCreatorInput
    approvedAbsenceRecords?: AbsenceRecordUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type CompanyUpsertWithoutNotificationsInput = {
    update: XOR<CompanyUpdateWithoutNotificationsInput, CompanyUncheckedUpdateWithoutNotificationsInput>
    create: XOR<CompanyCreateWithoutNotificationsInput, CompanyUncheckedCreateWithoutNotificationsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutNotificationsInput, CompanyUncheckedUpdateWithoutNotificationsInput>
  }

  export type CompanyUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUpdateManyWithoutCompanyNestedInput
    absenceTypes?: AbsenceTypeUpdateManyWithoutCompanyNestedInput
    absenceRecords?: AbsenceRecordUpdateManyWithoutCompanyNestedInput
    emailIntegrations?: EmailIntegrationUpdateManyWithoutCompanyNestedInput
    aiProcessingLogs?: AIProcessingLogUpdateManyWithoutCompanyNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutCompanyNestedInput
    usageMetrics?: UsageMetricsUpdateManyWithoutCompanyNestedInput
    auditLogs?: AuditLogUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    sizeRange?: NullableStringFieldUpdateOperationsInput | string | null
    emailDomain?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    subscriptionStatus?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    absenceTypes?: AbsenceTypeUncheckedUpdateManyWithoutCompanyNestedInput
    absenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutCompanyNestedInput
    emailIntegrations?: EmailIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    aiProcessingLogs?: AIProcessingLogUncheckedUpdateManyWithoutCompanyNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    usageMetrics?: UsageMetricsUncheckedUpdateManyWithoutCompanyNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutUsersNestedInput
    createdAbsenceRecords?: AbsenceRecordUpdateManyWithoutCreatorNestedInput
    approvedAbsenceRecords?: AbsenceRecordUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAbsenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutCreatorNestedInput
    approvedAbsenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type UserCreateManyCompanyInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    role?: string
    phone?: string | null
    passwordHash: string
    avatarUrl?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeCreateManyCompanyInput = {
    id?: string
    employeeId?: string | null
    email?: string | null
    firstName: string
    lastName: string
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    terminationDate?: Date | string | null
    status?: string
    managerId?: string | null
    employmentType?: string | null
    workLocation?: string | null
    salaryCurrency?: string
    salaryAmount?: Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceTypeCreateManyCompanyInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isPaid?: boolean
    requiresApproval?: boolean
    maxDaysPerYear?: number | null
    advanceNoticeDays?: number
    color?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceRecordCreateManyCompanyInput = {
    id?: string
    employeeId: string
    absenceTypeId: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    notes?: string | null
    status?: string
    source?: string
    sourceReference?: string | null
    confidenceScore?: number | null
    approvedBy?: string | null
    approvedAt?: Date | string | null
    rejectionReason?: string | null
    createdBy?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailIntegrationCreateManyCompanyInput = {
    id?: string
    name: string
    provider: string
    configuration?: JsonNullValueInput | InputJsonValue
    encryptedCredentials: string
    isActive?: boolean
    lastSync?: Date | string | null
    syncStatus?: string
    errorMessage?: string | null
    syncFrequencyMinutes?: number
    totalEmailsProcessed?: number
    lastEmailProcessedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AIProcessingLogCreateManyCompanyInput = {
    id?: string
    processingType: string
    provider: string
    inputData?: NullableJsonNullValueInput | InputJsonValue
    aiResponse?: NullableJsonNullValueInput | InputJsonValue
    confidenceScore?: number | null
    status?: string
    errorMessage?: string | null
    processingTimeMs?: number | null
    costUsd?: Decimal | DecimalJsLike | number | string | null
    tokensUsed?: number | null
    relatedRecordId?: string | null
    createdAt?: Date | string
  }

  export type SubscriptionCreateManyCompanyInput = {
    id?: string
    stripeSubscriptionId: string
    status: string
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    planName: string
    planPrice: Decimal | DecimalJsLike | number | string
    planInterval: string
    cancelAtPeriodEnd?: boolean
    cancelledAt?: Date | string | null
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsageMetricsCreateManyCompanyInput = {
    id?: string
    metricType: string
    metricValue: number
    periodStart: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
  }

  export type AuditLogCreateManyCompanyInput = {
    id?: string
    tableName: string
    recordId: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: string | null
    changedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type NotificationCreateManyCompanyInput = {
    id?: string
    userId?: string | null
    type: string
    title: string
    message: string
    data?: JsonNullValueInput | InputJsonValue
    isRead?: boolean
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type UserUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAbsenceRecords?: AbsenceRecordUpdateManyWithoutCreatorNestedInput
    approvedAbsenceRecords?: AbsenceRecordUpdateManyWithoutApproverNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAbsenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutCreatorNestedInput
    approvedAbsenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutApproverNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    workLocation?: NullableStringFieldUpdateOperationsInput | string | null
    salaryCurrency?: StringFieldUpdateOperationsInput | string
    salaryAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutManagerNestedInput
    absenceRecords?: AbsenceRecordUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    workLocation?: NullableStringFieldUpdateOperationsInput | string | null
    salaryCurrency?: StringFieldUpdateOperationsInput | string
    salaryAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subordinates?: EmployeeUncheckedUpdateManyWithoutManagerNestedInput
    absenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    workLocation?: NullableStringFieldUpdateOperationsInput | string | null
    salaryCurrency?: StringFieldUpdateOperationsInput | string
    salaryAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceTypeUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    maxDaysPerYear?: NullableIntFieldUpdateOperationsInput | number | null
    advanceNoticeDays?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    absenceRecords?: AbsenceRecordUpdateManyWithoutAbsenceTypeNestedInput
  }

  export type AbsenceTypeUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    maxDaysPerYear?: NullableIntFieldUpdateOperationsInput | number | null
    advanceNoticeDays?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    absenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutAbsenceTypeNestedInput
  }

  export type AbsenceTypeUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    maxDaysPerYear?: NullableIntFieldUpdateOperationsInput | number | null
    advanceNoticeDays?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceRecordUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutAbsenceRecordsNestedInput
    absenceType?: AbsenceTypeUpdateOneRequiredWithoutAbsenceRecordsNestedInput
    creator?: UserUpdateOneWithoutCreatedAbsenceRecordsNestedInput
    approver?: UserUpdateOneWithoutApprovedAbsenceRecordsNestedInput
  }

  export type AbsenceRecordUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    absenceTypeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceRecordUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    absenceTypeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailIntegrationUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    configuration?: JsonNullValueInput | InputJsonValue
    encryptedCredentials?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncStatus?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    syncFrequencyMinutes?: IntFieldUpdateOperationsInput | number
    totalEmailsProcessed?: IntFieldUpdateOperationsInput | number
    lastEmailProcessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailIntegrationUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    configuration?: JsonNullValueInput | InputJsonValue
    encryptedCredentials?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncStatus?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    syncFrequencyMinutes?: IntFieldUpdateOperationsInput | number
    totalEmailsProcessed?: IntFieldUpdateOperationsInput | number
    lastEmailProcessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailIntegrationUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    configuration?: JsonNullValueInput | InputJsonValue
    encryptedCredentials?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSync?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncStatus?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    syncFrequencyMinutes?: IntFieldUpdateOperationsInput | number
    totalEmailsProcessed?: IntFieldUpdateOperationsInput | number
    lastEmailProcessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIProcessingLogUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    processingType?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    inputData?: NullableJsonNullValueInput | InputJsonValue
    aiResponse?: NullableJsonNullValueInput | InputJsonValue
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    processingTimeMs?: NullableIntFieldUpdateOperationsInput | number | null
    costUsd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tokensUsed?: NullableIntFieldUpdateOperationsInput | number | null
    relatedRecordId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIProcessingLogUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    processingType?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    inputData?: NullableJsonNullValueInput | InputJsonValue
    aiResponse?: NullableJsonNullValueInput | InputJsonValue
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    processingTimeMs?: NullableIntFieldUpdateOperationsInput | number | null
    costUsd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tokensUsed?: NullableIntFieldUpdateOperationsInput | number | null
    relatedRecordId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIProcessingLogUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    processingType?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    inputData?: NullableJsonNullValueInput | InputJsonValue
    aiResponse?: NullableJsonNullValueInput | InputJsonValue
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    processingTimeMs?: NullableIntFieldUpdateOperationsInput | number | null
    costUsd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tokensUsed?: NullableIntFieldUpdateOperationsInput | number | null
    relatedRecordId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    planName?: StringFieldUpdateOperationsInput | string
    planPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planInterval?: StringFieldUpdateOperationsInput | string
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    planName?: StringFieldUpdateOperationsInput | string
    planPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planInterval?: StringFieldUpdateOperationsInput | string
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    planName?: StringFieldUpdateOperationsInput | string
    planPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planInterval?: StringFieldUpdateOperationsInput | string
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageMetricsUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricType?: StringFieldUpdateOperationsInput | string
    metricValue?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageMetricsUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricType?: StringFieldUpdateOperationsInput | string
    metricValue?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageMetricsUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricType?: StringFieldUpdateOperationsInput | string
    metricValue?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceRecordCreateManyCreatorInput = {
    id?: string
    companyId: string
    employeeId: string
    absenceTypeId: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    notes?: string | null
    status?: string
    source?: string
    sourceReference?: string | null
    confidenceScore?: number | null
    approvedBy?: string | null
    approvedAt?: Date | string | null
    rejectionReason?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceRecordCreateManyApproverInput = {
    id?: string
    companyId: string
    employeeId: string
    absenceTypeId: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    notes?: string | null
    status?: string
    source?: string
    sourceReference?: string | null
    confidenceScore?: number | null
    approvedAt?: Date | string | null
    rejectionReason?: string | null
    createdBy?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    companyId: string
    type: string
    title: string
    message: string
    data?: JsonNullValueInput | InputJsonValue
    isRead?: boolean
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type AbsenceRecordUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutAbsenceRecordsNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutAbsenceRecordsNestedInput
    absenceType?: AbsenceTypeUpdateOneRequiredWithoutAbsenceRecordsNestedInput
    approver?: UserUpdateOneWithoutApprovedAbsenceRecordsNestedInput
  }

  export type AbsenceRecordUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    absenceTypeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceRecordUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    absenceTypeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceRecordUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutAbsenceRecordsNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutAbsenceRecordsNestedInput
    absenceType?: AbsenceTypeUpdateOneRequiredWithoutAbsenceRecordsNestedInput
    creator?: UserUpdateOneWithoutCreatedAbsenceRecordsNestedInput
  }

  export type AbsenceRecordUncheckedUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    absenceTypeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceRecordUncheckedUpdateManyWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    absenceTypeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCreateManyManagerInput = {
    id?: string
    companyId: string
    employeeId?: string | null
    email?: string | null
    firstName: string
    lastName: string
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    terminationDate?: Date | string | null
    status?: string
    employmentType?: string | null
    workLocation?: string | null
    salaryCurrency?: string
    salaryAmount?: Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceRecordCreateManyEmployeeInput = {
    id?: string
    companyId: string
    absenceTypeId: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    notes?: string | null
    status?: string
    source?: string
    sourceReference?: string | null
    confidenceScore?: number | null
    approvedBy?: string | null
    approvedAt?: Date | string | null
    rejectionReason?: string | null
    createdBy?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeUpdateWithoutManagerInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    workLocation?: NullableStringFieldUpdateOperationsInput | string | null
    salaryCurrency?: StringFieldUpdateOperationsInput | string
    salaryAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutEmployeesNestedInput
    subordinates?: EmployeeUpdateManyWithoutManagerNestedInput
    absenceRecords?: AbsenceRecordUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutManagerInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    workLocation?: NullableStringFieldUpdateOperationsInput | string | null
    salaryCurrency?: StringFieldUpdateOperationsInput | string
    salaryAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subordinates?: EmployeeUncheckedUpdateManyWithoutManagerNestedInput
    absenceRecords?: AbsenceRecordUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateManyWithoutManagerInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    workLocation?: NullableStringFieldUpdateOperationsInput | string | null
    salaryCurrency?: StringFieldUpdateOperationsInput | string
    salaryAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceRecordUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutAbsenceRecordsNestedInput
    absenceType?: AbsenceTypeUpdateOneRequiredWithoutAbsenceRecordsNestedInput
    creator?: UserUpdateOneWithoutCreatedAbsenceRecordsNestedInput
    approver?: UserUpdateOneWithoutApprovedAbsenceRecordsNestedInput
  }

  export type AbsenceRecordUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    absenceTypeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceRecordUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    absenceTypeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceRecordCreateManyAbsenceTypeInput = {
    id?: string
    companyId: string
    employeeId: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    notes?: string | null
    status?: string
    source?: string
    sourceReference?: string | null
    confidenceScore?: number | null
    approvedBy?: string | null
    approvedAt?: Date | string | null
    rejectionReason?: string | null
    createdBy?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AbsenceRecordUpdateWithoutAbsenceTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutAbsenceRecordsNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutAbsenceRecordsNestedInput
    creator?: UserUpdateOneWithoutCreatedAbsenceRecordsNestedInput
    approver?: UserUpdateOneWithoutApprovedAbsenceRecordsNestedInput
  }

  export type AbsenceRecordUncheckedUpdateWithoutAbsenceTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AbsenceRecordUncheckedUpdateManyWithoutAbsenceTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CompanyCountOutputTypeDefaultArgs instead
     */
    export type CompanyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployeeCountOutputTypeDefaultArgs instead
     */
    export type EmployeeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AbsenceTypeCountOutputTypeDefaultArgs instead
     */
    export type AbsenceTypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AbsenceTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyDefaultArgs instead
     */
    export type CompanyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployeeDefaultArgs instead
     */
    export type EmployeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AbsenceTypeDefaultArgs instead
     */
    export type AbsenceTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AbsenceTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AbsenceRecordDefaultArgs instead
     */
    export type AbsenceRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AbsenceRecordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmailIntegrationDefaultArgs instead
     */
    export type EmailIntegrationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmailIntegrationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AIProcessingLogDefaultArgs instead
     */
    export type AIProcessingLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AIProcessingLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubscriptionDefaultArgs instead
     */
    export type SubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubscriptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsageMetricsDefaultArgs instead
     */
    export type UsageMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsageMetricsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}